


Network Working Group                                        N. Williams
Internet-Draft                                              Cryptonector
Updates: RFC2743 RFC2744                               February 22, 2013
(if approved)
Intended status: Standards Track
Expires: August 26, 2013


Simplified and Asynchronous Security Context Interfaces for the Generic
          Security Services Application Programming Interface
               draft-williams-kitten-ctx-simple-async-00

Abstract

   This Internet-Draft proposes extensions to the Generic Security
   Services Application Programming Interface (GSS-API) for replacing
   the exiting GSS_Init_sec_context() and GSS_Accept_sec_context()
   functions with simplified forms that also support asynchrony.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on August 26, 2013.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of



Williams                 Expires August 26, 2013                [Page 1]

Internet-Draft                 Simple GSS                  February 2013


   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   1.      Introduction . . . . . . . . . . . . . . . . . . . . . . .  3
   1.1.    Conventions used in this document  . . . . . . . . . . . .  3
   2.      Simplified API . . . . . . . . . . . . . . . . . . . . . .  4
   2.1.    GSS_Create_sec_context() . . . . . . . . . . . . . . . . .  4
   2.1.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . . . .  5
   2.2.    GSS_Set_context_flags()  . . . . . . . . . . . . . . . . .  5
   2.2.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . . . .  6
   2.3.    GSS_Set_context_credentials()  . . . . . . . . . . . . . .  6
   2.3.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . . . .  7
   2.4.    GSS_Set_context_channel_bindings() . . . . . . . . . . . .  7
   2.4.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . . . .  7
   2.5.    GSS_Set_context_lifetime() . . . . . . . . . . . . . . . .  7
   2.5.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . . . .  8
   2.6.    GSS_Set_async_IO_notification()  . . . . . . . . . . . . .  8
   2.6.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . . . .  9
   2.6.2.  A Word About Event Loops and Threading . . . . . . . . . . 10
   2.7.    GSS_Set_context_role_init()  . . . . . . . . . . . . . . . 11
   2.7.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . . . . 11
   2.8.    GSS_Step_context() . . . . . . . . . . . . . . . . . . . . 11
   2.8.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . . . . 12
   3.      Security Considerations  . . . . . . . . . . . . . . . . . 13
   4.      IANA Considerations  . . . . . . . . . . . . . . . . . . . 14
   5.      References . . . . . . . . . . . . . . . . . . . . . . . . 15
   5.1.    Normative References . . . . . . . . . . . . . . . . . . . 15
   5.2.    Informative References . . . . . . . . . . . . . . . . . . 15
           Author's Address . . . . . . . . . . . . . . . . . . . . . 16



















Williams                 Expires August 26, 2013                [Page 2]

Internet-Draft                 Simple GSS                  February 2013


1.  Introduction

   We propose replacing the GSS_Init_sec_context() and
   GSS_Accept_sec_context() functions with a set of simpler functions:
   one to create an "empty" security context, a set of functions to set
   context parameters, a single function for "stepping" the security
   context token exchange, and additional security context inquiry
   functions.  Support for non-blocking stepping of security context
   token exchange is also included.

1.1.  Conventions used in this document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].




































Williams                 Expires August 26, 2013                [Page 3]

Internet-Draft                 Simple GSS                  February 2013


2.  Simplified API

   We add a function for creating "empty" security contexts:

   o  GSS_Create_sec_context()

   We add the following new mutator functions for empty security
   contexts:

   o  GSS_Set_context_flags()

   o  GSS_Set_context_credentials()

   o  GSS_Set_context_role_init()

   o  GSS_Set_context_channel_bindings()

   o  GSS_Set_context_lifetime()

   o  GSS_Set_async_IO_notification()

   We add a function for stepping through security context token
   exchanges:

   o  GSS_Step_context()

   We add a function for retrieving delegated credentials from a
   security context token:

   o  GSS_Get_context_deleg_cred()

2.1.  GSS_Create_sec_context()

   Inputs:

   o  <none>

   Outputs:

   o  major_status INTEGER

   o  minor_status INTEGER -- note: mostly useless, but we should keep
      it

   o  context SECURITY CONTEXT

   Return major status codes:




Williams                 Expires August 26, 2013                [Page 4]

Internet-Draft                 Simple GSS                  February 2013


   o  GSS_S_COMPLETE indicates success.

   o  GSS_S_UNAVAILABLE indicates that memory is not available, for
      example.

   o  GSS_S_FAILURE indicates a general failure.

   This function creates an "empty" security context handle that can be
   passed to GSS_Init_sec_context() or GSS_Accept_sec_context() where
   they expect a NULL context.  The context can also be passed to the
   other new security context functions defined in this document.

2.1.1.  C-Bindings

    OM_uint32
    gss_create_sec_context(OM_uint32 *minor_status,
                           gss_ctx_id_t *context);

             Figure 1: C-Bindings of GSS_Create_sec_context()

2.2.  GSS_Set_context_flags()

   Inputs:

   context CONTEXT HANDLE

   req_flags FLAGS  Requested flags.  Applicable to acceptors and
      initiators.

   ret_flags_understood FLAGS  Return flags understood by the caller.

   Outputs:

   o  major_status INTEGER

   o  minor_status INTEGER

   Return major status codes:

   o  GSS_S_COMPLETE indicates success.

   o  GSS_S_FAILURE indicates a general failure.

   This function tells the mechanism (when one is eventually chosen and
   invoked) that the application requests the given req_flags and
   undestands the given ret_flags.  Initiators can override the
   req_flags in their GSS_Init_sec_context() call, but if no flags are
   requested there then the req_flags set on the empty context will be



Williams                 Expires August 26, 2013                [Page 5]

Internet-Draft                 Simple GSS                  February 2013


   used.

   NOTE: The abstract GSS-API [RFC2743] uses individual elements -one
   per-flag- instead of a "FLAGS" type.  This is unwieldy, therefore we
   introduce an abstract type named "FLAGS" to act as a set of all the
   request/return flags defined for the abstract GSS-API.

2.2.1.  C-Bindings

    OM_uint32
    gss_set_context_flags(OM_uint32 *minor_status,
                          gss_ctx_id_t context,
                          uint64_t req_flags,
                          uint64_t ret_flags);

              Figure 2: C-Bindings of GSS_Set_context_flags()

2.3.  GSS_Set_context_credentials()

   Inputs:

   context CONTEXT HANDLE  Empty security context

   input_cred_handle CREDENTIAL HANDLE

   Outputs:

   o  major_status INTEGER

   o  minor_status INTEGER

   Return major status codes:

   o  GSS_S_COMPLETE indicates success.

   o  ...

   o  GSS_S_FAILURE indicates a general failure.

   This function sets the application's credentials.  If not set then
   the default credentials will be used.  Multiple acceptor credentials
   MAY be set on a security context; the mechanism SHOULD allow
   accepting security contexts for any principal names for which
   credentials were set, and MUST allow accepting security cotnexts for
   the first credential's principal name.






Williams                 Expires August 26, 2013                [Page 6]

Internet-Draft                 Simple GSS                  February 2013


2.3.1.  C-Bindings

    OM_uint32
    gss_set_context_credentials(OM_uint32 *minor_status,
                                gss_ctx_id_t context,
                                gss_const_cred_id_t input_cred_handle);

           Figure 3: C-Bindings of GSS_Set_context_credentials()

2.4.  GSS_Set_context_channel_bindings()

   Inputs:

   context CONTEXT HANDLE  Empty security context

   input_channel_bindings OCTET STRING

   Outputs:

   o  major_status INTEGER

   o  minor_status INTEGER

   Return major status codes:

   o  GSS_S_COMPLETE indicates success.

   o  ...

   o  GSS_S_FAILURE indicates a general failure.

2.4.1.  C-Bindings

    OM_uint32
    gss_set_context_channel_bindings(OM_uint32 *minor_status,
                                     gss_ctx_id_t context,
                                     gss_const_buffer_t input_cb);

            Figure 4: C-Bindings of GSS_Set_context_lifetime()

2.5.  GSS_Set_context_lifetime()

   Inputs:








Williams                 Expires August 26, 2013                [Page 7]

Internet-Draft                 Simple GSS                  February 2013


   context CONTEXT HANDLE  Empty security context

   lifetime_req INTEGER  ...

   Outputs:

   o  major_status INTEGER

   o  minor_status INTEGER

   Return major status codes:

   o  GSS_S_COMPLETE indicates success.

   o  ...

   o  GSS_S_FAILURE indicates a general failure.

2.5.1.  C-Bindings

    OM_uint32
    gss_set_context_lifetime(OM_uint32 *minor_status,
                             gss_ctx_id_t context,
                             uint64_t lifetime_req);

            Figure 5: C-Bindings of GSS_Set_context_lifetime()

2.6.  GSS_Set_async_IO_notification()

   Inputs:

   context CONTEXT HANDLE  Empty security context

   async_notification_method UNSPECIFIED

   Outputs:

   o  major_status INTEGER

   o  minor_status INTEGER

   Return major status codes:

   o  GSS_S_COMPLETE indicates success.

   o  ...





Williams                 Expires August 26, 2013                [Page 8]

Internet-Draft                 Simple GSS                  February 2013


   o  GSS_S_FAILURE indicates a general failure.

   This function sets a method for informing the application that the
   given security context is ready to have GSS_Step_context() called on
   it.  Whenever GSS_Step_context() returns GSS_S_CONTINUE_NEEDED and no
   output token the application must wait for the async I/O completion
   notification and then call GSS_Step_context() again (this time with
   no input token).  GSS_Step_context() will only work asynchronously
   when this function has been used to set a completion notification
   method.

   The async I/O completion notification method is not specified for the
   abstract API.  In the C bindings we allow for several different
   notification methods, including:

   o  callback function

   o  file descriptor or file handle into which a single byte (any
      value) will be written

   o  a condition variable (and associated mutex) on which a signal will
      be sent

   Other completeion notification methods could be specified as well,
   but these seem likely to be sufficient and reasonably portable.

2.6.1.  C-Bindings
























Williams                 Expires August 26, 2013                [Page 9]

Internet-Draft                 Simple GSS                  February 2013


    typedef void (*gss_async_cb_t)(gss_ctx_id_t context, void *cb_data);

    OM_uint32
    gss_set_context_async_io_cb(OM_uint32 *minor_status,
                                gss_ctx_id_t context,
                                gss_async_cb_t cb,
                                void *cb_data);

    OM_uint32
    gss_set_context_async_io_fd(OM_uint32 *minor_status,
                                gss_ctx_id_t context,
                                int fd);


    OM_uint32
    gss_set_context_async_io_handle(OM_uint32 *minor_status,
                                    gss_ctx_id_t context,
                                    HANDLE h);

    OM_uint32
    gss_set_context_async_io_condvar(OM_uint32 *minor_status,
                                     gss_ctx_id_t context,
                                     pthread_cond_t cv,
                                     pthread_mutex_t lock);

          Figure 6: C-Bindings of GSS_Set_async_IO_notification()

2.6.2.  A Word About Event Loops and Threading

   Note that it is possible for the mechanism to use a standard event
   loop library loop used by the application without having to tell the
   mechanism about the event loop.  There exists a library specifically
   for this purpose known as
   "<git://git.fedorahosted.org/libverto.git>".  The verto library has a
   lot of clever logic in it to find the event loop that the application
   might be using, as long as the application uses an event loop library
   known to verto, including: glib, libev, libevent, and tevent.  Verto
   is portable to Unix and Unix-like systems (including Linux and BSDs)
   as well as to Windows.

   Given the large number of event loop interfaces and the ability of
   mechanismst to find a suitable event loop or, if none exists, to
   create a thread in which to run an event loop, it makes sense to not
   specify interfaces by which to tell the mechanism which event loop to
   use.  Otherwise we'd either have to make reference to the many event
   loop APIs in the C bindings, or define an event loop API for the
   application to implement and pass to the GSS-API.  The latter seems
   much too complicated.



Williams                 Expires August 26, 2013               [Page 10]

Internet-Draft                 Simple GSS                  February 2013


2.7.  GSS_Set_context_role_init()

   Inputs:

   context CONTEXT HANDLE  Empty security context

   mech_type OID  Mechanism OID

   target NAME  Name of target service principal

   Outputs:

   o  major_status INTEGER

   o  minor_status INTEGER

   Return major status codes:

   o  GSS_S_COMPLETE indicates success.

   o  GSS_S_UNAVAILABLE

   o  ...

   o  GSS_S_FAILURE indicates a general failure.

   This function sets the security context role to be that of an
   initiator, with the given mechanism OID (possibly GSS_C_NO_OID), and
   the given target name (possibly GSS_C_NO_NAME).

2.7.1.  C-Bindings

    OM_uint32
    gss_set_context_context_role_init(OM_uint32 *minor_status,
                                      gss_ctx_id_t context,
                                      gss_const_OID mech_oid,
                                      gss_const_name_t target_name);

            Figure 7: C-Bindings of GSS_Set_context_role_init()

2.8.  GSS_Step_context()

   Inputs:








Williams                 Expires August 26, 2013               [Page 11]

Internet-Draft                 Simple GSS                  February 2013


   context CONTEXT HANDLE  Empty security context

   input_token OCTET STRING  Input security context token, if any

   Outputs:

   o  major_status INTEGER

   o  minor_status INTEGER

   o  output_token OCTET STRING -- output security context token, if any

   o  actual_mech OID -- OID of mechanism used

   Return major status codes:

   o  GSS_S_COMPLETE indicates success.

   o  GSS_S_CONTINUE_NEEDED ...

   o  GSS_S_UNAVAILABLE

   o  ...

   o  GSS_S_FAILURE indicates a general failure.

   This function steps through one step of security context token
   exchange for the given security context.

   Note that if GSS_S_CONTINUE_NEEDED is returned but no security
   context is output, then the function must be called again upon async
   I/O completion notification.

2.8.1.  C-Bindings

    OM_uint32
    gss_step_context(OM_uint32 *minor_status,
                     gss_ctx_id_t context,
                     gss_const_buffer_t input_token,
                     gss_buffer_t output_token,
                     gss_const_OID *actual_mech);

                Figure 8: C-Bindings of GSS_Step_context()








Williams                 Expires August 26, 2013               [Page 12]

Internet-Draft                 Simple GSS                  February 2013


3.  Security Considerations

   ...
















































Williams                 Expires August 26, 2013               [Page 13]

Internet-Draft                 Simple GSS                  February 2013


4.  IANA Considerations

   [Add registrations for all the above functions.]
















































Williams                 Expires August 26, 2013               [Page 14]

Internet-Draft                 Simple GSS                  February 2013


5.  References

5.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2743]  Linn, J., "Generic Security Service Application Program
              Interface Version 2, Update 1", RFC 2743, January 2000.

   [RFC2744]  Wray, J., "Generic Security Service API Version 2 :
              C-bindings", RFC 2744, January 2000.

   [RFC5056]  Williams, N., "On the Use of Channel Bindings to Secure
              Channels", RFC 5056, November 2007.

   [RFC5587]  Williams, N., "Extended Generic Security Service Mechanism
              Inquiry APIs", RFC 5587, July 2009.

5.2.  Informative References

   [RFC5653]  Upadhyay, M. and S. Malkani, "Generic Security Service API
              Version 2: Java Bindings Update", RFC 5653, August 2009.




























Williams                 Expires August 26, 2013               [Page 15]

Internet-Draft                 Simple GSS                  February 2013


Author's Address

   Nicolas Williams
   Cryptonector, LLC

   Email: nico@cryptonector.com













































Williams                 Expires August 26, 2013               [Page 16]

