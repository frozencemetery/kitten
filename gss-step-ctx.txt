


Network Working Group                                        N. Williams
Internet-Draft                                              Cryptonector
Updates: 2743, 2744 (if approved)                          July 16, 2013
Intended status: Standards Track
Expires: January 17, 2014


Simplified and Asynchronous Security Context Interfaces for the Generic
          Security Services Application Programming Interface
               draft-williams-kitten-ctx-simple-async-01

Abstract

   This Internet-Draft proposes extensions to the Generic Security
   Services Application Programming Interface (GSS-API) for replacing
   the exiting GSS_Init_sec_context() and GSS_Accept_sec_context()
   functions with simplified forms that also support asynchrony.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 17, 2014.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as



Williams                Expires January 17, 2014                [Page 1]

Internet-Draft                 Simple GSS                      July 2013


   described in the Simplified BSD License.


Table of Contents

   1.      Introduction . . . . . . . . . . . . . . . . . . . . . . .  3
   1.1.    Channel Binding Semantics Improvements . . . . . . . . . .  3
   1.2.    Conventions used in this document  . . . . . . . . . . . .  3
   2.      Simplified API . . . . . . . . . . . . . . . . . . . . . .  4
   2.1.    GSS_Create_sec_context() . . . . . . . . . . . . . . . . .  4
   2.1.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . . . .  5
   2.2.    GSS_Set_context_flags()  . . . . . . . . . . . . . . . . .  5
   2.2.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . . . .  6
   2.3.    GSS_Set_context_credentials()  . . . . . . . . . . . . . .  6
   2.3.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . . . .  7
   2.4.    GSS_Set_context_channel_bindings() . . . . . . . . . . . .  7
   2.4.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . . . .  7
   2.5.    GSS_Set_context_lifetime() . . . . . . . . . . . . . . . .  7
   2.5.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . . . .  8
   2.6.    GSS_Indicate_context_events()  . . . . . . . . . . . . . .  8
   2.6.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . . . .  9
   2.7.    GSS_Report_context_events()  . . . . . . . . . . . . . . . 10
   2.7.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . . . . 10
   2.8.    GSS_Set_context_role_init()  . . . . . . . . . . . . . . . 11
   2.8.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . . . . 12
   2.9.    GSS_Step_context() . . . . . . . . . . . . . . . . . . . . 12
   2.9.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . . . . 13
   3.      Security Considerations  . . . . . . . . . . . . . . . . . 14
   4.      IANA Considerations  . . . . . . . . . . . . . . . . . . . 15
   5.      References . . . . . . . . . . . . . . . . . . . . . . . . 16
   5.1.    Normative References . . . . . . . . . . . . . . . . . . . 16
   5.2.    Informative References . . . . . . . . . . . . . . . . . . 16
           Author's Address . . . . . . . . . . . . . . . . . . . . . 17


















Williams                Expires January 17, 2014                [Page 2]

Internet-Draft                 Simple GSS                      July 2013


1.  Introduction

   We propose replacing the GSS_Init_sec_context() and
   GSS_Accept_sec_context() functions with a set of simpler functions:
   one to create an "empty" security context, a set of functions to set
   context parameters, a single function for "stepping" the security
   context token exchange, and additional security context inquiry
   functions.  Support for non-blocking stepping of security context
   token exchange is also included.

1.1.  Channel Binding Semantics Improvements

   The extensions specified in this document are a further extension to
   [I-D.williams-kitten-channel-bound-flag].

1.2.  Conventions used in this document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].































Williams                Expires January 17, 2014                [Page 3]

Internet-Draft                 Simple GSS                      July 2013


2.  Simplified API

   We add a function for creating "empty" security contexts:

   o  GSS_Create_sec_context()

   We add the following new mutator functions for empty security
   contexts:

   o  GSS_Set_context_flags()

   o  GSS_Set_context_credentials()

   o  GSS_Set_context_role_init()

   o  GSS_Set_context_channel_bindings()

   o  GSS_Set_context_lifetime()

   o  GSS_Indicate_context_events()

   o  GSS_Report_context_events()

   We add a function for stepping through security context token
   exchanges:

   o  GSS_Step_context()

   We add a function for retrieving delegated credentials from a
   security context token:

   o  GSS_Get_context_deleg_cred()

2.1.  GSS_Create_sec_context()

   Inputs:

   o  <none>

   Outputs:

   o  major_status INTEGER

   o  minor_status INTEGER -- note: mostly useless, but we should keep
      it

   o  context SECURITY CONTEXT




Williams                Expires January 17, 2014                [Page 4]

Internet-Draft                 Simple GSS                      July 2013


   Return major status codes:

   o  GSS_S_COMPLETE indicates success.

   o  GSS_S_UNAVAILABLE indicates that memory is not available, for
      example.

   o  GSS_S_FAILURE indicates a general failure.

   This function creates an "empty" security context handle that can be
   passed to GSS_Init_sec_context() or GSS_Accept_sec_context() where
   they expect a NULL context.  The context can also be passed to the
   other new security context functions defined in this document.

2.1.1.  C-Bindings

               OM_uint32
               gss_create_sec_context(OM_uint32 *minor_status,
                                      gss_ctx_id_t *context);

2.2.  GSS_Set_context_flags()

   Inputs:

   context CONTEXT HANDLE

   req_flags FLAGS  Requested flags.  Applicable to acceptors and
      initiators.

   ret_flags_understood FLAGS  Return flags understood by the caller.

   Outputs:

   o  major_status INTEGER

   o  minor_status INTEGER

   Return major status codes:

   o  GSS_S_COMPLETE indicates success.

   o  GSS_S_FAILURE indicates a general failure.

   This function tells the mechanism (when one is eventually chosen and
   invoked) that the application requests the given req_flags and
   undestands the given ret_flags.  Initiators can override the
   req_flags in their GSS_Init_sec_context() call, but if no flags are
   requested there then the req_flags set on the empty context will be



Williams                Expires January 17, 2014                [Page 5]

Internet-Draft                 Simple GSS                      July 2013


   used.

   NOTE: The abstract GSS-API [RFC2743] uses individual elements -one
   per-flag- instead of a "FLAGS" type.  This is unwieldy, therefore we
   introduce an abstract type named "FLAGS" to act as a set of all the
   request/return flags defined for the abstract GSS-API.

2.2.1.  C-Bindings

               OM_uint32
               gss_set_context_flags(OM_uint32 *minor_status,
                                     gss_ctx_id_t context,
                                     uint64_t req_flags,
                                     uint64_t ret_flags);

2.3.  GSS_Set_context_credentials()

   Inputs:

   context CONTEXT HANDLE  Empty security context

   input_cred_handle CREDENTIAL HANDLE  MUST NOT be the default
      credential.

   Outputs:

   o  major_status INTEGER

   o  minor_status INTEGER

   Return major status codes:

   o  GSS_S_COMPLETE indicates success.

   o  ...

   o  GSS_S_FAILURE indicates a general failure.

   This function sets the application's credentials.  If no credentials
   are set then the default credentials will be used.

   Multiple credentials may be set on a security context.  The mechanism
   SHOULD allow accepting security contexts for any principals for which
   credentials had elements for the mechanism used.  The mechanism
   SHOULD allow initiators to have multiple credentials, in which case
   the mechanism should select the credential most likely to succeed for
   the given target principal.  Where a mechanism does not support
   multiple credentials it MUST use the first credential handle set by



Williams                Expires January 17, 2014                [Page 6]

Internet-Draft                 Simple GSS                      July 2013


   the application.

2.3.1.  C-Bindings

     OM_uint32
     gss_set_context_credentials(OM_uint32 *minor_status,
                                 gss_ctx_id_t context,
                                 gss_const_cred_id_t input_cred_handle);

2.4.  GSS_Set_context_channel_bindings()

   Inputs:

   context CONTEXT HANDLE  Empty security context

   input_channel_bindings OCTET STRING

   Outputs:

   o  major_status INTEGER

   o  minor_status INTEGER

   Return major status codes:

   o  GSS_S_COMPLETE indicates success.

   o  ...

   o  GSS_S_FAILURE indicates a general failure.

2.4.1.  C-Bindings

       OM_uint32
       gss_set_context_channel_bindings(OM_uint32 *minor_status,
                                        gss_ctx_id_t context,
                                        gss_const_buffer_t input_cb);

2.5.  GSS_Set_context_lifetime()

   Inputs:

   context CONTEXT HANDLE  Empty security context

   lifetime_req INTEGER  ...

   Outputs:




Williams                Expires January 17, 2014                [Page 7]

Internet-Draft                 Simple GSS                      July 2013


   o  major_status INTEGER

   o  minor_status INTEGER

   Return major status codes:

   o  GSS_S_COMPLETE indicates success.

   o  ...

   o  GSS_S_FAILURE indicates a general failure.

2.5.1.  C-Bindings

              OM_uint32
              gss_set_context_lifetime(OM_uint32 *minor_status,
                                       gss_ctx_id_t context,
                                       uint64_t lifetime_req);

2.6.  GSS_Indicate_context_events()

   Inputs:

   context CONTEXT HANDLE  Empty security context

   Outputs:

   o  major_status INTEGER

   o  minor_status INTEGER

   o  read_handles SEQUENCE OF FILE HANDLE

   o  write_handles SEQUENCE OF FILE HANDLE

   o  processes SEQUENCE OF PROCESS ID

   o  signals SEQUENCE OF SIGNAL

   o  timeout INTEGER

   Return major status codes:

   o  GSS_S_COMPLETE indicates success.

   o  ...





Williams                Expires January 17, 2014                [Page 8]

Internet-Draft                 Simple GSS                      July 2013


   o  GSS_S_FAILURE indicates a general failure.

   This function indicates the asynchronous events that the mechanism is
   waiting for, which can be: read and write events on various "files"
   (including TCP, UDP, SCTP, and any other transport), child processes
   to exit, signals to arrive, and/or a timeout timer to expire.
   Waiting for a TCP connection to establish can be done by waiting for
   it to be writable.  Waiting for read or write should also be taken to
   include waiting for end-of-file events in either direction.

   The application should mutate its event loop to wait for these
   events, and it should report events as they happen using
   GSS_Report_context_events().

2.6.1.  C-Bindings

           #ifdef WIN32
           #include <windows.h>
           #typedef HANDLE gss_pid_t;
           #typedef DWORD gss_pid_status_t;
           #define GSS_C_NO_FILE (-1)
           #define GSS_C_NO_PROC ((gss_pid_t)-1)
           #define GSS_C_NO_SIGNAL (-1)
           #elif _POSIX_C_SOURCE
           #include <unistd.h>
           #typedef pid_t gss_pid_t;
           #typedef int gss_pid_status_t;
           #define GSS_C_NO_FILE (-1)
           #define GSS_C_NO_PROC ((gss_pid_t)-1)
           #define GSS_C_NO_SIGNAL (-1)
           #else
           /* TBD by the operating system */
           #endif

           OM_uint32
           gss_indicate_context_events(OM_uint32 *minor_status,
                                       gss_ctx_id_t context,
                                       int * const *read_fds,
                                       int * const *write_fds,
                                       gss_pid_t * const *procs,
                                       int * const *signals,
                                       struct timeval **timeout);

   The events are described by outputting pointers to arrays of file
   descriptors, process IDs, and signals, terminated by an invalid value
   (GSS_C_NO_FILE for read_fds[] and write_fds[], GSS_C_NO_PROC for
   procs[], and GSS_C_NO_SIGNAL for signals[]).  The timeout output is a
   pointer to a struct timeval, set to NULL by the mechanism if it



Williams                Expires January 17, 2014                [Page 9]

Internet-Draft                 Simple GSS                      July 2013


   wishes to wait without a timeout (but the application may always
   impose a timeout of its own).

   If the application does not support waiting for any one event type
   then the application can pass NULL for that output pointer.

2.7.  GSS_Report_context_events()

   Inputs:

   context CONTEXT HANDLE  Empty security context

   read_handles  SEQUENCE OF FILE HANDLE

   write_handles  SEQUENCE OF FILE HANDLE

   processes  SEQUENCE OF PROCESS ID

   signals  SEQUENCE OF SIGNAL

   timedout  BOOLEAN

   Outputs:

   o  major_status INTEGER

   o  minor_status INTEGER

   Return major status codes:

   o  GSS_S_COMPLETE indicates success.

   o  ...

   o  GSS_S_FAILURE indicates a general failure.

   This function is used by the application to report to the mechanism
   that some or all of the events requested have completed.  Only the
   events that occurred should be reported.

2.7.1.  C-Bindings










Williams                Expires January 17, 2014               [Page 10]

Internet-Draft                 Simple GSS                      July 2013


        OM_uint32
        gss_indicate_context_events(OM_uint32 *minor_status,
                                    gss_ctx_id_t context,
                                    const int *read_fds,
                                    const int *write_fds,
                                    const gss_pid_t *procs,
                                    const int *signals,
                                    const struct timeval *timeleft);

   The inputs point to variable arrays of file descriptors or process
   IDs terminated by an invalid value (GSS_C_NO_FILE for read_fds[] and
   write_fds[], GSS_C_NO_PROC for procs[], and GSS_C_NO_SIGNAL for
   signals[]), except for timeleft, which is either a NULL pointer (if
   the application doesn't know how much time was left before timing
   out) or a pointer to a single struct timeval indicating how much time
   is left before the mechanism's timeout ({0, 0} to indicate the
   timeout fired).

2.8.  GSS_Set_context_role_init()

   Inputs:

   context CONTEXT HANDLE  Empty security context handle

   mech_type OID  Mechanism OID

   target_name NAME  Name of target principal

   Outputs:

   o  major_status INTEGER

   o  minor_status INTEGER

   Return major status codes:

   o  GSS_S_COMPLETE indicates success.

   o  ...

   o  GSS_S_FAILURE indicates a general failure.

   This function sets the security context role to be that of an
   initiator, with the given mechanism OID (possibly GSS_C_NO_OID), and
   the given target name (possibly GSS_C_NO_NAME).  The difference
   between an initiator and an acceptor application is that an initiator
   application calls this function and an acceptor does not; both call
   GSS_Step_context() (see Section 2.8).



Williams                Expires January 17, 2014               [Page 11]

Internet-Draft                 Simple GSS                      July 2013


2.8.1.  C-Bindings

      OM_uint32
      gss_set_context_context_role_init(OM_uint32 *minor_status,
                                        gss_ctx_id_t context,
                                        gss_const_OID mech_oid,
                                        gss_const_name_t target_name);

2.9.  GSS_Step_context()

   Inputs:

   context CONTEXT HANDLE  Empty security context

   input_token OCTET STRING  Input security context token, if any

   callback CLOSURE  Callback to invoke when mechanism is ready to be
      called

   Outputs:

   o  major_status INTEGER

   o  minor_status INTEGER

   o  output_token OCTET STRING -- output security context token, if any

   o  actual_mech OID -- OID of mechanism used

   Return major status codes:

   o  GSS_S_COMPLETE indicates success.

   o  GSS_S_CONTINUE_NEEDED indicates that an output security context
      token has been produced and an input security context token is
      needed.

   o  GSS_S_ASYNC_EVENTS_NEEDED indicates that the mechanism needs to
      wait for asynchronous events.  The application should call
      GSS_Indicate_context_events() to find out what these events are,
      wait for them (and possibly other, unrelated events), then report
      the events that by calling GSS_Report_context_events().

   o  All major status codes allowed for GSS_Init_sec_context() and
      GSS_Accept_sec_context().

   o  GSS_S_CALLBACK_UNSUPPORTED indicates callbacks are not supported;
      the application must use GSS_Indicate_context_events().



Williams                Expires January 17, 2014               [Page 12]

Internet-Draft                 Simple GSS                      July 2013


   o  GSS_S_FAILURE indicates a general failure.

   This function steps through one step of security context token
   exchange for the given security context.

   Acceptors call this without having called
   GSS_Set_context_role_init(); see Section 2.8.

   If a null closure is passed as the callback then the application must
   call GSS_Indicate_context_events() Section 2.6 to get the set of
   events to wait for on behalf of the mechanism, wait for said events,
   then report the results with GSS_Report_context_events() Section 2.7.
   Else the mechanism must return GSS_S_ASYNC_EVENTS_NEEDED when it
   needs to wait for asynchronous events, and must call the application
   back via its closure.  The mechanism may not require the use of a
   callback closure -- the mechanism must support the use of
   application-managed event loops via GSS_Indicate/
   Report_context_events().

2.9.1.  C-Bindings

          OM_uint32
          gss_step_context(OM_uint32 *minor_status,
                           gss_ctx_id_t context,
                           gss_const_buffer_t input_token,
                           gss_buffer_t output_token,
                           gss_const_OID *actual_mech
                           void (*callback)(gss_ctx_id_t, void *),
                           void *callback_data);






















Williams                Expires January 17, 2014               [Page 13]

Internet-Draft                 Simple GSS                      July 2013


3.  Security Considerations

   The GSS-API is a security API, however, this document does not modify
   its semantics in any security-relevant way.  There are no security
   considerations in this document.














































Williams                Expires January 17, 2014               [Page 14]

Internet-Draft                 Simple GSS                      July 2013


4.  IANA Considerations

   [Add registrations for all the above functions, types, and
   constants.]















































Williams                Expires January 17, 2014               [Page 15]

Internet-Draft                 Simple GSS                      July 2013


5.  References

5.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2743]  Linn, J., "Generic Security Service Application Program
              Interface Version 2, Update 1", RFC 2743, January 2000.

   [RFC2744]  Wray, J., "Generic Security Service API Version 2 :
              C-bindings", RFC 2744, January 2000.

   [RFC5056]  Williams, N., "On the Use of Channel Bindings to Secure
              Channels", RFC 5056, November 2007.

   [RFC5587]  Williams, N., "Extended Generic Security Service Mechanism
              Inquiry APIs", RFC 5587, July 2009.

   [I-D.williams-kitten-channel-bound-flag]
              Williams, N., "Channel Binding Signalling for the Generic
              Security Services Application Programming Interface",
              draft-williams-kitten-channel-bound-flag-02 (work in
              progress), February 2013.

5.2.  Informative References

   [RFC5653]  Upadhyay, M. and S. Malkani, "Generic Security Service API
              Version 2: Java Bindings Update", RFC 5653, August 2009.






















Williams                Expires January 17, 2014               [Page 16]

Internet-Draft                 Simple GSS                      July 2013


Author's Address

   Nicolas Williams
   Cryptonector, LLC

   Email: nico@cryptonector.com













































Williams                Expires January 17, 2014               [Page 17]

