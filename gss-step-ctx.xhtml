<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "file:///home/nico/I-Ds/kitten/../test/src/../data/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="GENERATOR" content="LyX 2.0.2" />
<meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
<title>Simplified and Asynchronous Security Context Interfaces for the Generic Security Services Application Programming Interface</title>

<!-- Text Class Preamble -->
<style type="text/css">
div.toc {
margin: 2em 0em;
border-style: solid;
border-width: 2px 0px;
padding: 1em 0em;
}
div.tochead { font-size: x-large; font-weight: bold; }
div.lyxtoc-0 {
margin: 2em 0em 0em 0em;
font-size: xx-large;
font-weight: bold;
}
div.lyxtoc-1 {
margin: 1em 0em 0em 0em;
font-size: x-large;
font-weight: bold;
}
div.lyxtoc-2 {
margin: 0em 0em 0em 1em;
font-size: large;
font-weight: normal;
}
div.lyxtoc-3 { margin: 0em 0em 0em 0.5em; font-size: medium; }
div.lyxtoc-4 { margin: 0em 0em 0em 0.5em; }
div.lyxtoc-5 { margin: 0em 0em 0em 0.5em; }
div.lyxtoc-6 { margin: 0em 0em 0em 0.5em; }
a.tocentry {
text-decoration: none;
color: black;
}
a.tocentry:visited { color: black; }
a.tocarrow {
font-weight: bold;
text-decoration: none;
color: #909090;
}
a.tocarrow:visited { color: #C0C0C0; }
</style>

<!-- Preamble Snippets -->

<!-- Layout-provided Styles -->
<style type='text/css'>
h1.title {
font-size: x-large;
margin-bottom: 1ex;
text-align: center;

}
div.standard {
text-align: left;

}
div.plain_layout {
text-align: left;

}
div.author {
font-size: large;
margin-top: 1.3ex;
margin-bottom: 0.7ex;
text-align: center;

}
div.abstract {
font-size: small;
margin-top: 0.7ex;
margin-bottom: 0.7ex;
margin-left: 3ex;
margin-right: 3ex;
text-align: left;

}
div.abstract_label {
font-weight: bold;
font-size: large;
text-align: center;

}

div.abstract {
margin: 4ex;
}
div.abstract_item {
font-size: small;
padding-top: 1ex;
}
div.abstract_label {
font-weight: bold;
}
h2.section {
font-weight: bold;
font-size: x-large;
margin-top: 1.3ex;
margin-bottom: 0.7ex;
text-align: left;

}
h3.subsection {
font-weight: bold;
font-size: large;
margin-top: 0.9ex;
margin-bottom: 0.5ex;
text-align: left;

}
ul.itemize {
margin-top: 0.7ex;
margin-bottom: 0.7ex;
margin-left: 3ex;
text-align: left;

}
h4.subsubsection {
font-weight: bold;
font-size: medium;
margin-top: 0.7ex;
margin-bottom: 0.4ex;
text-align: left;

}
dl.description dt { font-weight: bold; }
div.flex_docname {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_ipr {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_intendedstatus {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_titleabbrev {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_ietfarea {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_xml_rfckeyword {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_updates {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi_toc {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi_symrefs {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi_tocindent {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_authororg {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_authororgabbrev {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_authoremailaddr {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_entityxref {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.listings {
font-family: monospace;
}
div.flex_bibxml {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_embeddedbibxml {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
</style>
</head>
<body>
<h1 class="title"><a id='magicparlabel-1' />
Simplified and Asynchronous Security Context Interfaces for the Generic Security Services Application Programming Interface</h1>
<div class="standard"><a id='magicparlabel-2' />
<div class="flex_docname"><div class="plain_layout"><a id='magicparlabel-6' />
draft-williams-kitten-ctx-simple-async-01</div>
</div><div class="flex_ipr"><div class="plain_layout"><a id='magicparlabel-10' />
trust200902</div>
</div><div class="flex_intendedstatus"><div class="plain_layout"><a id='magicparlabel-14' />
std</div>
</div><div class="flex_titleabbrev"><div class="plain_layout"><a id='magicparlabel-18' />
Simple GSS</div>
</div><div class="flex_ietfarea"><div class="plain_layout"><a id='magicparlabel-22' />
Security Area</div>
</div><div class="flex_xml_rfckeyword"><div class="plain_layout"><a id='magicparlabel-26' />
Internet-Draft</div>
</div><div class="flex_updates"><div class="plain_layout"><a id='magicparlabel-30' />
2743, 2744</div>
</div></div>

<div class="standard"><a id='magicparlabel-31' />
<div class="flex_pi_toc"><div class="plain_layout"><a id='magicparlabel-35' />
yes</div>
</div><div class="flex_pi_symrefs"><div class="plain_layout"><a id='magicparlabel-39' />
yes</div>
</div><div class="flex_pi_tocindent"><div class="plain_layout"><a id='magicparlabel-43' />
no</div>
</div><div class="flex_pi"><div class="plain_layout"><a id='magicparlabel-47' />
comments="yes"</div>
</div><div class="flex_pi"><div class="plain_layout"><a id='magicparlabel-51' />
inline="yes"</div>
</div></div>

<div class="author"><div class="author_item"><a id='magicparlabel-52' />
Nicolas Williams<div class="flex_authororg"><div class="plain_layout"><a id='magicparlabel-56' />
Cryptonector, LLC</div>
</div><div class="flex_authororgabbrev"><div class="plain_layout"><a id='magicparlabel-60' />
Cryptonector</div>
</div><div class="flex_authoremailaddr"><div class="plain_layout"><a id='magicparlabel-64' />
nico@cryptonector.com</div>
</div></div>
</div>

<div class="abstract"><div class="abstract_label">Abstract</div>
<div class="abstract_item"><a id='magicparlabel-65' />
This Internet-Draft proposes extensions to the Generic Security Services Application Programming Interface (GSS-API) for replacing the exiting GSS_Init_sec_context() and GSS_Accept_sec_context() functions with simplified forms that also support asynchrony.</div>
</div>
<div class="standard"><a id='magicparlabel-66' />
</div>
<div class='toc'><div class='tochead part_'>Table of Contents</div>

<div class='lyxtoc-1'><a href='#magicparlabel-67' class='tocentry'>1 Introduction</a> <a href='#magicparlabel-67' class='tocarrow'>&gt;</a>

<div class='lyxtoc-2'><a href='#magicparlabel-69' class='tocentry'>1.1 Channel Binding Semantics Improvements</a> <a href='#magicparlabel-69' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-75' class='tocentry'>1.2 Conventions used in this document</a> <a href='#magicparlabel-75' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-81' class='tocentry'>2 Simplified API</a> <a href='#magicparlabel-81' class='tocarrow'>&gt;</a>

<div class='lyxtoc-2'><a href='#magicparlabel-96' class='tocentry'>2.1 GSS_Create_sec_context()</a> <a href='#magicparlabel-96' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-108' class='tocentry'>2.1.1 C-Bindings</a> <a href='#magicparlabel-108' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-116' class='tocentry'>2.2 GSS_Set_context_flags()</a> <a href='#magicparlabel-116' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-133' class='tocentry'>2.2.1 C-Bindings</a> <a href='#magicparlabel-133' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-143' class='tocentry'>2.3 GSS_Set_context_credentials()</a> <a href='#magicparlabel-143' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-156' class='tocentry'>2.3.1 C-Bindings</a> <a href='#magicparlabel-156' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-165' class='tocentry'>2.4 GSS_Set_context_channel_bindings()</a> <a href='#magicparlabel-165' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-176' class='tocentry'>2.4.1 C-Bindings</a> <a href='#magicparlabel-176' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-185' class='tocentry'>2.5 GSS_Set_context_lifetime()</a> <a href='#magicparlabel-185' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-196' class='tocentry'>2.5.1 C-Bindings</a> <a href='#magicparlabel-196' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-205' class='tocentry'>2.6 GSS_Indicate_context_events()</a> <a href='#magicparlabel-205' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-222' class='tocentry'>2.6.1 C-Bindings</a> <a href='#magicparlabel-222' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-255' class='tocentry'>2.7 GSS_Report_context_events()</a> <a href='#magicparlabel-255' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-271' class='tocentry'>2.7.1 C-Bindings</a> <a href='#magicparlabel-271' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-285' class='tocentry'>2.8 GSS_Set_context_role_init()</a> <a href='#magicparlabel-285' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-298' class='tocentry'>2.8.1 C-Bindings</a> <a href='#magicparlabel-298' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-308' class='tocentry'>2.9 GSS_Step_context()</a> <a href='#magicparlabel-308' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-328' class='tocentry'>2.9.1 C-Bindings</a> <a href='#magicparlabel-328' class='tocarrow'>&gt;</a></div>
</div>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-341' class='tocentry'>3 Security Considerations</a> <a href='#magicparlabel-341' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-343' class='tocentry'>4 IANA Considerations</a> <a href='#magicparlabel-343' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-345' class='tocentry'>5 Normative References</a> <a href='#magicparlabel-345' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-376' class='tocentry'>6 Informative References</a> <a href='#magicparlabel-376' class='tocarrow'>&gt;</a></div>
</div>

<h2 class="section"><span class="section_label">1</span> <a id='magicparlabel-67' />
Introduction</h2>
<div class="standard"><a id='magicparlabel-68' />
We propose replacing the GSS_Init_sec_context() and GSS_Accept_sec_context() functions with a set of simpler functions: one to create an &ldquo;empty&rdquo; security context, a set of functions to set context parameters, a single function for &ldquo;stepping&rdquo; the security context token exchange, and additional security context inquiry functions. Support for non-blocking stepping of security context token exchange is also included.</div>
<h3 class="subsection"><span class="subsection_label">1.1</span> <a id='magicparlabel-69' />
Channel Binding Semantics Improvements</h3>
<div class="standard"><a id='magicparlabel-70' />
The extensions specified in this document are a further extension to <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-74' />
I-D.williams-kitten-channel-bound-flag</div>
</div>.</div>
<h3 class="subsection"><span class="subsection_label">1.2</span> <a id='magicparlabel-75' />
Conventions used in this document</h3>
<div class="standard"><a id='magicparlabel-76' />
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-80' />
RFC2119</div>
</div>.</div>
<h2 class="section"><span class="section_label">2</span> <a id='magicparlabel-81' />
Simplified API</h2>
<div class="standard"><a id='magicparlabel-82' />
We add a function for creating &ldquo;empty&rdquo; security contexts:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-83' />
GSS_Create_sec_context()</li>
</ul>
<div class="standard"><a id='magicparlabel-84' />
We add the following new mutator functions for empty security contexts:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-85' />
GSS_Set_context_flags()</li>
<li class="itemize_item"><a id='magicparlabel-86' />
GSS_Set_context_credentials()</li>
<li class="itemize_item"><a id='magicparlabel-87' />
GSS_Set_context_role_init()</li>
<li class="itemize_item"><a id='magicparlabel-88' />
GSS_Set_context_channel_bindings()</li>
<li class="itemize_item"><a id='magicparlabel-89' />
GSS_Set_context_lifetime()</li>
<li class="itemize_item"><a id='magicparlabel-90' />
GSS_Indicate_context_events()</li>
<li class="itemize_item"><a id='magicparlabel-91' />
GSS_Report_context_events()</li>
</ul>
<div class="standard"><a id='magicparlabel-92' />
We add a function for stepping through security context token exchanges:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-93' />
GSS_Step_context()</li>
</ul>
<div class="standard"><a id='magicparlabel-94' />
We add a function for retrieving delegated credentials from a security context token:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-95' />
GSS_Get_context_deleg_cred()</li>
</ul>
<h3 class="subsection"><span class="subsection_label">2.1</span> <a id='magicparlabel-96' />
GSS_Create_sec_context()</h3>
<div class="standard"><a id='magicparlabel-97' />
Inputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-98' />
&lt;none&gt;</li>
</ul>
<div class="standard"><a id='magicparlabel-99' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-100' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-101' />
minor_status INTEGER &ndash; note: mostly useless, but we should keep it</li>
<li class="itemize_item"><a id='magicparlabel-102' />
context SECURITY CONTEXT</li>
</ul>
<div class="standard"><a id='magicparlabel-103' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-104' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-105' />
GSS_S_UNAVAILABLE indicates that memory is not available, for example.</li>
<li class="itemize_item"><a id='magicparlabel-106' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<div class="standard"><a id='magicparlabel-107' />
This function creates an &ldquo;empty&rdquo; security context handle that can be passed to GSS_Init_sec_context() or GSS_Accept_sec_context() where they expect a NULL context. The context can also be passed to the other new security context functions defined in this document.</div>
<h4 class="subsubsection"><span class="subsubsection_label">2.1.1</span> <a id='magicparlabel-108' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-109' />
</div>
<div class='float float-listings'><pre> OM_uint32
 gss_create_sec_context(OM_uint32 *minor_status,
                        gss_ctx_id_t *context);</pre></div>

<h3 class="subsection"><span class="subsection_label">2.2</span> <a id='magicparlabel-116' />
GSS_Set_context_flags()</h3>
<div class="standard"><a id='magicparlabel-117' />
Inputs:</div>

<dl class='description'><dt class="description_label">context&nbsp;CONTEXT&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-118' />
 </dd>
<dt class="description_label">req_flags&nbsp;FLAGS</dt>
<dd class="description_item"><a id='magicparlabel-119' />
 Requested flags. Applicable to acceptors and initiators.</dd>
<dt class="description_label">ret_flags_understood&nbsp;FLAGS</dt>
<dd class="description_item"><a id='magicparlabel-120' />
 Return flags understood by the caller.</dd>
</dl>
<div class="standard"><a id='magicparlabel-121' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-122' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-123' />
minor_status INTEGER</li>
</ul>
<div class="standard"><a id='magicparlabel-124' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-125' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-126' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<div class="standard"><a id='magicparlabel-127' />
This function tells the mechanism (when one is eventually chosen and invoked) that the application requests the given req_flags and undestands the given ret_flags. Initiators can override the req_flags in their GSS_Init_sec_context() call, but if no flags are requested there then the req_flags set on the empty context will be used.</div>

<div class="standard"><a id='magicparlabel-128' />
NOTE: The abstract GSS-API <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-132' />
RFC2743</div>
</div> uses individual elements -one per-flag- instead of a &ldquo;FLAGS&rdquo; type. This is unwieldy, therefore we introduce an abstract type named &ldquo;FLAGS&rdquo; to act as a set of all the request/return flags defined for the abstract GSS-API.</div>
<h4 class="subsubsection"><span class="subsubsection_label">2.2.1</span> <a id='magicparlabel-133' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-134' />
</div>
<div class='float float-listings'><pre> OM_uint32
 gss_set_context_flags(OM_uint32 *minor_status,
                       gss_ctx_id_t context,
                       uint64_t req_flags,
                       uint64_t ret_flags);</pre></div>

<h3 class="subsection"><span class="subsection_label">2.3</span> <a id='magicparlabel-143' />
GSS_Set_context_credentials()</h3>
<div class="standard"><a id='magicparlabel-144' />
Inputs:</div>

<dl class='description'><dt class="description_label">context&nbsp;CONTEXT&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-145' />
 Empty security context</dd>
<dt class="description_label">input_cred_handle&nbsp;CREDENTIAL&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-146' />
 MUST NOT be the default credential.</dd>
</dl>
<div class="standard"><a id='magicparlabel-147' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-148' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-149' />
minor_status INTEGER</li>
</ul>
<div class="standard"><a id='magicparlabel-150' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-151' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-152' />
...</li>
<li class="itemize_item"><a id='magicparlabel-153' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<div class="standard"><a id='magicparlabel-154' />
This function sets the application's credentials. If no credentials are set then the default credentials will be used.</div>

<div class="standard"><a id='magicparlabel-155' />
Multiple credentials may be set on a security context. The mechanism SHOULD allow accepting security contexts for any principals for which credentials had elements for the mechanism used. The mechanism SHOULD allow initiators to have multiple credentials, in which case the mechanism should select the credential most likely to succeed for the given target principal. Where a mechanism does not support multiple credentials it MUST use the first credential handle set by the application.</div>
<h4 class="subsubsection"><span class="subsubsection_label">2.3.1</span> <a id='magicparlabel-156' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-157' />
</div>
<div class='float float-listings'><pre> OM_uint32
 gss_set_context_credentials(OM_uint32 *minor_status,
                             gss_ctx_id_t context,
                             gss_const_cred_id_t input_cred_handle);</pre></div>

<h3 class="subsection"><span class="subsection_label">2.4</span> <a id='magicparlabel-165' />
GSS_Set_context_channel_bindings()</h3>
<div class="standard"><a id='magicparlabel-166' />
Inputs:</div>

<dl class='description'><dt class="description_label">context&nbsp;CONTEXT&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-167' />
 Empty security context</dd>
<dt class="description_label">input_channel_bindings&nbsp;OCTET&nbsp;STRING</dt>
<dd class="description_item"><a id='magicparlabel-168' />
</dd>
</dl>
<div class="standard"><a id='magicparlabel-169' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-170' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-171' />
minor_status INTEGER</li>
</ul>
<div class="standard"><a id='magicparlabel-172' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-173' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-174' />
...</li>
<li class="itemize_item"><a id='magicparlabel-175' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<h4 class="subsubsection"><span class="subsubsection_label">2.4.1</span> <a id='magicparlabel-176' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-177' />
</div>
<div class='float float-listings'><pre> OM_uint32
 gss_set_context_channel_bindings(OM_uint32 *minor_status,
                                  gss_ctx_id_t context,
                                  gss_const_buffer_t input_cb);</pre></div>

<h3 class="subsection"><span class="subsection_label">2.5</span> <a id='magicparlabel-185' />
GSS_Set_context_lifetime()</h3>
<div class="standard"><a id='magicparlabel-186' />
Inputs:</div>

<dl class='description'><dt class="description_label">context&nbsp;CONTEXT&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-187' />
 Empty security context</dd>
<dt class="description_label">lifetime_req&nbsp;INTEGER</dt>
<dd class="description_item"><a id='magicparlabel-188' />
 ...</dd>
</dl>
<div class="standard"><a id='magicparlabel-189' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-190' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-191' />
minor_status INTEGER</li>
</ul>
<div class="standard"><a id='magicparlabel-192' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-193' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-194' />
...</li>
<li class="itemize_item"><a id='magicparlabel-195' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<h4 class="subsubsection"><span class="subsubsection_label">2.5.1</span> <a id='magicparlabel-196' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-197' />
</div>
<div class='float float-listings'><pre> OM_uint32
 gss_set_context_lifetime(OM_uint32 *minor_status,
                          gss_ctx_id_t context,
                          uint64_t lifetime_req);</pre></div>

<h3 class="subsection"><span class="subsection_label">2.6</span> <a id='magicparlabel-205' />
<a id="sub_GSS_Indicate_context_events__" />
GSS_Indicate_context_events()</h3>
<div class="standard"><a id='magicparlabel-206' />
Inputs:</div>

<dl class='description'><dt class="description_label">context&nbsp;CONTEXT&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-207' />
 Empty security context</dd>
</dl>
<div class="standard"><a id='magicparlabel-208' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-209' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-210' />
minor_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-211' />
read_handles SEQUENCE OF FILE HANDLE</li>
<li class="itemize_item"><a id='magicparlabel-212' />
write_handles SEQUENCE OF FILE HANDLE</li>
<li class="itemize_item"><a id='magicparlabel-213' />
processes SEQUENCE OF PROCESS ID</li>
<li class="itemize_item"><a id='magicparlabel-214' />
signals SEQUENCE OF SIGNAL</li>
<li class="itemize_item"><a id='magicparlabel-215' />
timeout INTEGER</li>
</ul>
<div class="standard"><a id='magicparlabel-216' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-217' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-218' />
...</li>
<li class="itemize_item"><a id='magicparlabel-219' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<div class="standard"><a id='magicparlabel-220' />
This function indicates the asynchronous events that the mechanism is waiting for, which can be: read and write events on various &ldquo;files&rdquo; (including TCP, UDP, SCTP, and any other transport), child processes to exit, signals to arrive, and/or a timeout timer to expire. Waiting for a TCP connection to establish can be done by waiting for it to be writable. Waiting for read or write should also be taken to include waiting for end-of-file events in either direction.</div>

<div class="standard"><a id='magicparlabel-221' />
The application should mutate its event loop to wait for these events, and it should report events as they happen using GSS_Report_context_events().</div>
<h4 class="subsubsection"><span class="subsubsection_label">2.6.1</span> <a id='magicparlabel-222' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-223' />
</div>
<div class='float float-listings'><pre> #ifdef WIN32
 #include &lt;windows.h&gt;
 #typedef HANDLE gss_pid_t;
 #typedef DWORD gss_pid_status_t;
 #define GSS_C_NO_FILE (-1)
 #define GSS_C_NO_PROC ((gss_pid_t)-1)
 #define GSS_C_NO_SIGNAL (-1)
 #elif _POSIX_C_SOURCE
 #include &lt;unistd.h&gt;
 #typedef pid_t gss_pid_t;
 #typedef int gss_pid_status_t;
 #define GSS_C_NO_FILE (-1)
 #define GSS_C_NO_PROC ((gss_pid_t)-1)
 #define GSS_C_NO_SIGNAL (-1)
 #else
 /* TBD by the operating system */
 #endif
 
 OM_uint32
 gss_indicate_context_events(OM_uint32 *minor_status,
                             gss_ctx_id_t context,
                             int * const *read_fds,
                             int * const *write_fds,
                             gss_pid_t * const *procs,
                             int * const *signals,
                             struct timeval **timeout);</pre></div>


<div class="standard"><a id='magicparlabel-253' />
The events are described by outputting pointers to arrays of file descriptors, process IDs, and signals, terminated by an invalid value (GSS_C_NO_FILE for read_fds[] and write_fds[], GSS_C_NO_PROC for procs[], and GSS_C_NO_SIGNAL for signals[]). The timeout output is a pointer to a struct timeval, set to NULL by the mechanism if it wishes to wait without a timeout (but the application may always impose a timeout of its own).</div>

<div class="standard"><a id='magicparlabel-254' />
If the application does not support waiting for any one event type then the application can pass NULL for that output pointer.</div>
<h3 class="subsection"><span class="subsection_label">2.7</span> <a id='magicparlabel-255' />
<a id="sub_GSS_Report_context_events__" />
GSS_Report_context_events()</h3>
<div class="standard"><a id='magicparlabel-256' />
Inputs:</div>

<dl class='description'><dt class="description_label">context&nbsp;CONTEXT&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-257' />
 Empty security context</dd>
<dt class="description_label">read_handles</dt>
<dd class="description_item"><a id='magicparlabel-258' />
 SEQUENCE OF FILE HANDLE</dd>
<dt class="description_label">write_handles</dt>
<dd class="description_item"><a id='magicparlabel-259' />
 SEQUENCE OF FILE HANDLE</dd>
<dt class="description_label">processes</dt>
<dd class="description_item"><a id='magicparlabel-260' />
 SEQUENCE OF PROCESS ID</dd>
<dt class="description_label">signals</dt>
<dd class="description_item"><a id='magicparlabel-261' />
 SEQUENCE OF SIGNAL</dd>
<dt class="description_label">timedout</dt>
<dd class="description_item"><a id='magicparlabel-262' />
 BOOLEAN</dd>
</dl>
<div class="standard"><a id='magicparlabel-263' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-264' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-265' />
minor_status INTEGER</li>
</ul>
<div class="standard"><a id='magicparlabel-266' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-267' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-268' />
...</li>
<li class="itemize_item"><a id='magicparlabel-269' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<div class="standard"><a id='magicparlabel-270' />
This function is used by the application to report to the mechanism that some or all of the events requested have completed. Only the events that occurred should be reported.</div>
<h4 class="subsubsection"><span class="subsubsection_label">2.7.1</span> <a id='magicparlabel-271' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-272' />
</div>
<div class='float float-listings'><pre> OM_uint32
 gss_indicate_context_events(OM_uint32 *minor_status,
                             gss_ctx_id_t context,
                             const int *read_fds,
                             const int *write_fds,
                             const gss_pid_t *procs,
                             const int *signals,
                             const struct timeval *timeleft);</pre></div>


<div class="standard"><a id='magicparlabel-284' />
The inputs point to variable arrays of file descriptors or process IDs terminated by an invalid value (GSS_C_NO_FILE for read_fds[] and write_fds[], GSS_C_NO_PROC for procs[], and GSS_C_NO_SIGNAL for signals[]), except for timeleft, which is either a NULL pointer (if the application doesn't know how much time was left before timing out) or a pointer to a single struct timeval indicating how much time is left before the mechanism's timeout ({0, 0} to indicate the timeout fired).</div>
<h3 class="subsection"><span class="subsection_label">2.8</span> <a id='magicparlabel-285' />
<a id="sub_GSS_Set_context_role_init__" />
GSS_Set_context_role_init()</h3>
<div class="standard"><a id='magicparlabel-286' />
Inputs:</div>

<dl class='description'><dt class="description_label">context&nbsp;CONTEXT&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-287' />
 Empty security context handle</dd>
<dt class="description_label">mech_type&nbsp;OID</dt>
<dd class="description_item"><a id='magicparlabel-288' />
 Mechanism OID</dd>
<dt class="description_label">target_name&nbsp;NAME</dt>
<dd class="description_item"><a id='magicparlabel-289' />
 Name of target principal</dd>
</dl>
<div class="standard"><a id='magicparlabel-290' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-291' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-292' />
minor_status INTEGER</li>
</ul>
<div class="standard"><a id='magicparlabel-293' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-294' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-295' />
...</li>
<li class="itemize_item"><a id='magicparlabel-296' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<div class="standard"><a id='magicparlabel-297' />
This function sets the security context role to be that of an initiator, with the given mechanism OID (possibly GSS_C_NO_OID), and the given target name (possibly GSS_C_NO_NAME). The difference between an initiator and an acceptor application is that an initiator application calls this function and an acceptor does not; both call GSS_Step_context() (see Section 2.8). </div>
<h4 class="subsubsection"><span class="subsubsection_label">2.8.1</span> <a id='magicparlabel-298' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-299' />
</div>
<div class='float float-listings'><pre> OM_uint32
 gss_set_context_context_role_init(OM_uint32 *minor_status,
                                   gss_ctx_id_t context,
                                   gss_const_OID mech_oid,
                                   gss_const_name_t target_name); </pre></div>

<h3 class="subsection"><span class="subsection_label">2.9</span> <a id='magicparlabel-308' />
<a id="sub_GSS_Step_context__" />
GSS_Step_context()</h3>
<div class="standard"><a id='magicparlabel-309' />
Inputs:</div>

<dl class='description'><dt class="description_label">context&nbsp;CONTEXT&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-310' />
 Empty security context</dd>
<dt class="description_label">input_token&nbsp;OCTET&nbsp;STRING</dt>
<dd class="description_item"><a id='magicparlabel-311' />
 Input security context token, if any</dd>
<dt class="description_label">callback&nbsp;CLOSURE</dt>
<dd class="description_item"><a id='magicparlabel-312' />
 Callback to invoke when mechanism is ready to be called</dd>
</dl>
<div class="standard"><a id='magicparlabel-313' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-314' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-315' />
minor_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-316' />
output_token OCTET STRING &ndash; output security context token, if any</li>
<li class="itemize_item"><a id='magicparlabel-317' />
actual_mech OID &ndash; OID of mechanism used</li>
</ul>
<div class="standard"><a id='magicparlabel-318' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-319' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-320' />
GSS_S_CONTINUE_NEEDED indicates that an output security context token has been produced and an input security context token is needed.</li>
<li class="itemize_item"><a id='magicparlabel-321' />
GSS_S_ASYNC_EVENTS_NEEDED indicates that the mechanism needs to wait for asynchronous events. The application should call GSS_Indicate_context_events() to find out what these events are, wait for them (and possibly other, unrelated events), then report the events that  by calling GSS_Report_context_events().</li>
<li class="itemize_item"><a id='magicparlabel-322' />
All major status codes allowed for GSS_Init_sec_context() and GSS_Accept_sec_context().</li>
<li class="itemize_item"><a id='magicparlabel-323' />
GSS_S_CALLBACK_UNSUPPORTED indicates callbacks are not supported; the application must use GSS_Indicate_context_events().</li>
<li class="itemize_item"><a id='magicparlabel-324' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<div class="standard"><a id='magicparlabel-325' />
This function steps through one step of security context token exchange for the given security context.</div>

<div class="standard"><a id='magicparlabel-326' />
Acceptors call this without having called GSS_Set_context_role_init(); see <a href="#sub_GSS_Set_context_role_init__">2.8</a>.</div>

<div class="standard"><a id='magicparlabel-327' />
If a null closure is passed as the callback then the application must call GSS_Indicate_context_events() <a href="#sub_GSS_Indicate_context_events__">2.6</a> to get the set of events to wait for on behalf of the mechanism, wait for said events, then report the results with GSS_Report_context_events() <a href="#sub_GSS_Report_context_events__">2.7</a>. Else the mechanism must return GSS_S_ASYNC_EVENTS_NEEDED when it needs to wait for asynchronous events, and must call the application back via its closure. The mechanism may not require the use of a callback closure &ndash; the mechanism must support the use of application-managed event loops via GSS_Indicate/Report_context_events().</div>
<h4 class="subsubsection"><span class="subsubsection_label">2.9.1</span> <a id='magicparlabel-328' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-329' />
</div>
<div class='float float-listings'><pre> OM_uint32
 gss_step_context(OM_uint32 *minor_status,
                  gss_ctx_id_t context,
                  gss_const_buffer_t input_token,
                  gss_buffer_t output_token,
                  gss_const_OID *actual_mech
                  void (*callback)(gss_ctx_id_t, void *),
                  void *callback_data);</pre></div>

<h2 class="section"><span class="section_label">3</span> <a id='magicparlabel-341' />
Security Considerations</h2>
<div class="standard"><a id='magicparlabel-342' />
The GSS-API is a security API, however, this document does not modify its semantics in any security-relevant way. There are no security considerations in this document.</div>
<h2 class="section"><span class="section_label">4</span> <a id='magicparlabel-343' />
IANA Considerations</h2>
<div class="standard"><a id='magicparlabel-344' />
[Add registrations for all the above functions, types, and constants.]</div>
<h2 class="section"><span class="section_label">5</span> <a id='magicparlabel-345' />
<a id="sec_References" />
Normative References</h2>
<div class="standard"><a id='magicparlabel-346' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-350' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">rfc2119</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-351' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-355' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2743.xml">rfc2743</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-356' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-360' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2744.xml">rfc2744</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-361' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-365' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5056.xml">rfc5056</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-366' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-370' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5587.xml">rfc5587</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-371' />
<div class="flex_embeddedbibxml"><div class="plain_layout"><a id='magicparlabel-375' />
&lt;reference anchor="I-D.williams-kitten-channel-bound-flag"&gt; &lt;front&gt; &lt;title&gt;Channel Binding Signalling for the Generic Security Services Application Programming Interface&lt;/title&gt; &lt;author initials="N." surname="Williams" fullname="Nicolas Williams"&gt; &lt;organization/&gt; &lt;/author&gt; &lt;date month="February" day="13" year="2013"/&gt; &lt;abstract&gt; &lt;t&gt;Abstract Channel binding is a technique that allows applications to use a secure channel at a lower layer without having to use authentication at that lower layer. The concept of channel binding comes from RFC2743 and its predecessors. It turns out that the semantics implemented are different that those specified in RFC2743, and the specification has a serious bug. This document addresses both, the inconsistency as-implemented and the specification bug.&lt;/t&gt; &lt;t&gt;Abstract This Internet-Draft proposes the addition of a “channel bound” return flag for the GSS_Init_sec_context() and GSS_Accept_sec_context() functions. Two behaviors are specified: a default, safe behavior, and a behavior that is only safe when the application specifically tells the Generic Security Services Application Programming Interface (GSS-API) that it (the applicaiton) supports the new behavior.&lt;/t&gt; &lt;/abstract&gt; &lt;/front&gt; &lt;seriesInfo name="Internet-Draft" value="draft-williams-kitten-channel-bound-flag-02"/&gt; &lt;format type="TXT" target="http://www.ietf.org/internet-drafts/draft-williams-kitten-channel-bound-flag-02.txt"/&gt; &lt;/reference&gt; </div>
</div></div>
<h2 class="section"><span class="section_label">6</span> <a id='magicparlabel-376' />
Informative References</h2>
<div class="standard"><a id='magicparlabel-377' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-381' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5653.xml">rfc5653</a></div>
</div></div>
</body>
</html>
