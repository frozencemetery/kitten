<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "file:///home/nico/I-Ds/kitten/../test/src/../data/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="GENERATOR" content="LyX 2.0.0" />
<meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
<title>Simplified and Asynchronous Security Context Interfaces for the Generic Security Services Application Programming Interface</title>

<!-- Text Class Preamble -->
<style type="text/css">
div.toc {
margin: 2em 0em;
border-style: solid;
border-width: 2px 0px;
padding: 1em 0em;
}
div.tochead { font-size: x-large; font-weight: bold; }
div.lyxtoc-0 {
margin: 2em 0em 0em 0em;
font-size: xx-large;
font-weight: bold;
}
div.lyxtoc-1 {
margin: 1em 0em 0em 0em;
font-size: x-large;
font-weight: bold;
}
div.lyxtoc-2 {
margin: 0em 0em 0em 1em;
font-size: large;
font-weight: normal;
}
div.lyxtoc-3 { margin: 0em 0em 0em 0.5em; font-size: medium; }
div.lyxtoc-4 { margin: 0em 0em 0em 0.5em; }
div.lyxtoc-5 { margin: 0em 0em 0em 0.5em; }
div.lyxtoc-6 { margin: 0em 0em 0em 0.5em; }
a.tocentry {
text-decoration: none;
color: black;
}
a.tocentry:visited { color: black; }
a.tocarrow {
font-weight: bold;
text-decoration: none;
color: #909090;
}
a.tocarrow:visited { color: #C0C0C0; }
</style>

<!-- Preamble Snippets -->

<!-- Layout-provided Styles -->
<style type='text/css'>
h1.title {
font-size: x-large;
margin-bottom: 1ex;
text-align: center;

}
div.standard {
text-align: left;

}
div.plain_layout {
text-align: left;

}
div.author {
font-size: large;
margin-top: 1.3ex;
margin-bottom: 0.7ex;
text-align: center;

}
div.abstract {
font-size: small;
margin-top: 0.7ex;
margin-bottom: 0.7ex;
margin-left: 3ex;
margin-right: 3ex;
text-align: left;

}
div.abstract_label {
font-weight: bold;
font-size: large;
text-align: center;

}

div.abstract {
margin: 4ex;
}
div.abstract_item {
font-size: small;
padding-top: 1ex;
}
div.abstract_label {
font-weight: bold;
}
h2.section {
font-weight: bold;
font-size: x-large;
margin-top: 1.3ex;
margin-bottom: 0.7ex;
text-align: left;

}
h3.subsection {
font-weight: bold;
font-size: large;
margin-top: 0.9ex;
margin-bottom: 0.5ex;
text-align: left;

}
ul.itemize {
margin-top: 0.7ex;
margin-bottom: 0.7ex;
margin-left: 3ex;
text-align: left;

}
h4.subsubsection {
font-weight: bold;
font-size: medium;
margin-top: 0.7ex;
margin-bottom: 0.4ex;
text-align: left;

}
dl.description dt { font-weight: bold; }
div.flex_docname {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_ipr {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_intendedstatus {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_titleabbrev {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_ietfarea {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_xml_rfckeyword {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_updates {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi_toc {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi_symrefs {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi_tocindent {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_authororg {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_authororgabbrev {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_authoremailaddr {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_entityxref {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.listings {
font-family: monospace;
}
div.flex_bibxml {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
</style>
</head>
<body>
<h1 class="title"><a id='magicparlabel-1' />
Simplified and Asynchronous Security Context Interfaces for the Generic Security Services Application Programming Interface</h1>
<div class="standard"><a id='magicparlabel-2' />
<div class="flex_docname"><div class="plain_layout"><a id='magicparlabel-6' />
draft-williams-kitten-ctx-simple-async-00</div>
</div><div class="flex_ipr"><div class="plain_layout"><a id='magicparlabel-10' />
trust200902</div>
</div><div class="flex_intendedstatus"><div class="plain_layout"><a id='magicparlabel-14' />
std</div>
</div><div class="flex_titleabbrev"><div class="plain_layout"><a id='magicparlabel-18' />
Simple GSS</div>
</div><div class="flex_ietfarea"><div class="plain_layout"><a id='magicparlabel-22' />
Security Area</div>
</div><div class="flex_xml_rfckeyword"><div class="plain_layout"><a id='magicparlabel-26' />
Internet-Draft</div>
</div><div class="flex_updates"><div class="plain_layout"><a id='magicparlabel-30' />
RFC2743 RFC2744</div>
</div></div>

<div class="standard"><a id='magicparlabel-31' />
<div class="flex_pi_toc"><div class="plain_layout"><a id='magicparlabel-35' />
yes</div>
</div><div class="flex_pi_symrefs"><div class="plain_layout"><a id='magicparlabel-39' />
yes</div>
</div><div class="flex_pi_tocindent"><div class="plain_layout"><a id='magicparlabel-43' />
no</div>
</div><div class="flex_pi"><div class="plain_layout"><a id='magicparlabel-47' />
comments="yes"</div>
</div><div class="flex_pi"><div class="plain_layout"><a id='magicparlabel-51' />
inline="yes"</div>
</div></div>

<div class="author"><div class="author_item"><a id='magicparlabel-52' />
Nicolas Williams<div class="flex_authororg"><div class="plain_layout"><a id='magicparlabel-56' />
Cryptonector, LLC</div>
</div><div class="flex_authororgabbrev"><div class="plain_layout"><a id='magicparlabel-60' />
Cryptonector</div>
</div><div class="flex_authoremailaddr"><div class="plain_layout"><a id='magicparlabel-64' />
nico@cryptonector.com</div>
</div></div>
</div>

<div class="abstract"><div class="abstract_label">Abstract</div>
<div class="abstract_item"><a id='magicparlabel-65' />
This Internet-Draft proposes extensions to the Generic Security Services Application Programming Interface (GSS-API) for replacing the exiting GSS_Init_sec_context() and GSS_Accept_sec_context() functions with simplified forms that also support asynchrony.</div>
</div>
<div class="standard"><a id='magicparlabel-66' />
</div>
<div class='toc'><div class='tochead part_'>Table of Contents</div>

<div class='lyxtoc-1'><a href='#magicparlabel-67' class='tocentry'>1 Introduction</a> <a href='#magicparlabel-67' class='tocarrow'>&gt;</a>

<div class='lyxtoc-2'><a href='#magicparlabel-69' class='tocentry'>1.1 Conventions used in this document</a> <a href='#magicparlabel-69' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-75' class='tocentry'>2 Simplified API</a> <a href='#magicparlabel-75' class='tocarrow'>&gt;</a>

<div class='lyxtoc-2'><a href='#magicparlabel-89' class='tocentry'>2.1 GSS_Create_sec_context()</a> <a href='#magicparlabel-89' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-101' class='tocentry'>2.1.1 C-Bindings</a> <a href='#magicparlabel-101' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-109' class='tocentry'>2.2 GSS_Set_context_flags()</a> <a href='#magicparlabel-109' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-126' class='tocentry'>2.2.1 C-Bindings</a> <a href='#magicparlabel-126' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-136' class='tocentry'>2.3 GSS_Set_context_credentials()</a> <a href='#magicparlabel-136' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-149' class='tocentry'>2.3.1 C-Bindings</a> <a href='#magicparlabel-149' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-158' class='tocentry'>2.4 GSS_Set_context_channel_bindings()</a> <a href='#magicparlabel-158' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-169' class='tocentry'>2.4.1 C-Bindings</a> <a href='#magicparlabel-169' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-178' class='tocentry'>2.5 GSS_Set_context_lifetime()</a> <a href='#magicparlabel-178' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-189' class='tocentry'>2.5.1 C-Bindings</a> <a href='#magicparlabel-189' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-198' class='tocentry'>2.6 GSS_Set_async_IO_notification()</a> <a href='#magicparlabel-198' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-215' class='tocentry'>2.6.1 C-Bindings</a> <a href='#magicparlabel-215' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-3'><a href='#magicparlabel-244' class='tocentry'>2.6.2 A Word About Event Loops and Threading</a> <a href='#magicparlabel-244' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-247' class='tocentry'>2.7 GSS_Set_context_role_init()</a> <a href='#magicparlabel-247' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-261' class='tocentry'>2.7.1 C-Bindings</a> <a href='#magicparlabel-261' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-271' class='tocentry'>2.8 GSS_Step_context()</a> <a href='#magicparlabel-271' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-289' class='tocentry'>2.8.1 C-Bindings</a> <a href='#magicparlabel-289' class='tocarrow'>&gt;</a></div>
</div>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-300' class='tocentry'>3 Security Considerations</a> <a href='#magicparlabel-300' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-302' class='tocentry'>4 IANA Considerations</a> <a href='#magicparlabel-302' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-304' class='tocentry'>5 Normative References</a> <a href='#magicparlabel-304' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-330' class='tocentry'>6 Informative References</a> <a href='#magicparlabel-330' class='tocarrow'>&gt;</a></div>
</div>

<h2 class="section"><span class="section_label">1</span> <a id='magicparlabel-67' />
Introduction</h2>
<div class="standard"><a id='magicparlabel-68' />
We propose replacing the GSS_Init_sec_context() and GSS_Accept_sec_context() functions with a set of simpler functions: one to create an &ldquo;empty&rdquo; security context, a set of functions to set context parameters, a single function for &ldquo;stepping&rdquo; the security context token exchange, and additional security context inquiry functions. Support for non-blocking stepping of security context token exchange is also included.</div>
<h3 class="subsection"><span class="subsection_label">1.1</span> <a id='magicparlabel-69' />
Conventions used in this document</h3>
<div class="standard"><a id='magicparlabel-70' />
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-74' />
RFC2119</div>
</div>.</div>
<h2 class="section"><span class="section_label">2</span> <a id='magicparlabel-75' />
Simplified API</h2>
<div class="standard"><a id='magicparlabel-76' />
We add a function for creating &ldquo;empty&rdquo; security contexts:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-77' />
GSS_Create_sec_context()</li>
</ul>
<div class="standard"><a id='magicparlabel-78' />
We add the following new mutator functions for empty security contexts:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-79' />
GSS_Set_context_flags()</li>
<li class="itemize_item"><a id='magicparlabel-80' />
GSS_Set_context_credentials()</li>
<li class="itemize_item"><a id='magicparlabel-81' />
GSS_Set_context_role_init()</li>
<li class="itemize_item"><a id='magicparlabel-82' />
GSS_Set_context_channel_bindings()</li>
<li class="itemize_item"><a id='magicparlabel-83' />
GSS_Set_context_lifetime()</li>
<li class="itemize_item"><a id='magicparlabel-84' />
GSS_Set_async_IO_notification()</li>
</ul>
<div class="standard"><a id='magicparlabel-85' />
We add a function for stepping through security context token exchanges:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-86' />
GSS_Step_context()</li>
</ul>
<div class="standard"><a id='magicparlabel-87' />
We add a function for retrieving delegated credentials from a security context token:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-88' />
GSS_Get_context_deleg_cred()</li>
</ul>
<h3 class="subsection"><span class="subsection_label">2.1</span> <a id='magicparlabel-89' />
GSS_Create_sec_context()</h3>
<div class="standard"><a id='magicparlabel-90' />
Inputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-91' />
&lt;none&gt;</li>
</ul>
<div class="standard"><a id='magicparlabel-92' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-93' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-94' />
minor_status INTEGER &ndash; note: mostly useless, but we should keep it</li>
<li class="itemize_item"><a id='magicparlabel-95' />
context SECURITY CONTEXT</li>
</ul>
<div class="standard"><a id='magicparlabel-96' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-97' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-98' />
GSS_S_UNAVAILABLE indicates that memory is not available, for example.</li>
<li class="itemize_item"><a id='magicparlabel-99' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<div class="standard"><a id='magicparlabel-100' />
This function creates an &ldquo;empty&rdquo; security context handle that can be passed to GSS_Init_sec_context() or GSS_Accept_sec_context() where they expect a NULL context. The context can also be passed to the other new security context functions defined in this document.</div>
<h4 class="subsubsection"><span class="subsubsection_label">2.1.1</span> <a id='magicparlabel-101' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-102' />
</div>
<div class='float float-listings'><pre> OM_uint32
 gss_create_sec_context(OM_uint32 *minor_status,
                        gss_ctx_id_t *context);</pre></div>

<h3 class="subsection"><span class="subsection_label">2.2</span> <a id='magicparlabel-109' />
GSS_Set_context_flags()</h3>
<div class="standard"><a id='magicparlabel-110' />
Inputs:</div>

<dl class='description'><dt class="description_label">context&nbsp;CONTEXT&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-111' />
 </dd>
<dt class="description_label">req_flags&nbsp;FLAGS</dt>
<dd class="description_item"><a id='magicparlabel-112' />
 Requested flags. Applicable to acceptors and initiators.</dd>
<dt class="description_label">ret_flags_understood&nbsp;FLAGS</dt>
<dd class="description_item"><a id='magicparlabel-113' />
 Return flags understood by the caller.</dd>
</dl>
<div class="standard"><a id='magicparlabel-114' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-115' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-116' />
minor_status INTEGER</li>
</ul>
<div class="standard"><a id='magicparlabel-117' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-118' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-119' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<div class="standard"><a id='magicparlabel-120' />
This function tells the mechanism (when one is eventually chosen and invoked) that the application requests the given req_flags and undestands the given ret_flags. Initiators can override the req_flags in their GSS_Init_sec_context() call, but if no flags are requested there then the req_flags set on the empty context will be used.</div>

<div class="standard"><a id='magicparlabel-121' />
NOTE: The abstract GSS-API <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-125' />
RFC2743</div>
</div> uses individual elements -one per-flag- instead of a &ldquo;FLAGS&rdquo; type. This is unwieldy, therefore we introduce an abstract type named &ldquo;FLAGS&rdquo; to act as a set of all the request/return flags defined for the abstract GSS-API.</div>
<h4 class="subsubsection"><span class="subsubsection_label">2.2.1</span> <a id='magicparlabel-126' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-127' />
</div>
<div class='float float-listings'><pre> OM_uint32
 gss_set_context_flags(OM_uint32 *minor_status,
                       gss_ctx_id_t context,
                       uint64_t req_flags,
                       uint64_t ret_flags);</pre></div>

<h3 class="subsection"><span class="subsection_label">2.3</span> <a id='magicparlabel-136' />
GSS_Set_context_credentials()</h3>
<div class="standard"><a id='magicparlabel-137' />
Inputs:</div>

<dl class='description'><dt class="description_label">context&nbsp;CONTEXT&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-138' />
 Empty security context</dd>
<dt class="description_label">input_cred_handle&nbsp;CREDENTIAL&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-139' />
 MUST NOT be the default credential.</dd>
</dl>
<div class="standard"><a id='magicparlabel-140' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-141' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-142' />
minor_status INTEGER</li>
</ul>
<div class="standard"><a id='magicparlabel-143' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-144' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-145' />
...</li>
<li class="itemize_item"><a id='magicparlabel-146' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<div class="standard"><a id='magicparlabel-147' />
This function sets the application's credentials. If no credentials are set then the default credentials will be used.</div>

<div class="standard"><a id='magicparlabel-148' />
Multiple credentials may be set on a security context. The mechanism SHOULD allow accepting security contexts for any principals for which credentials had elements for the mechanism used. The mechanism SHOULD allow initiators to have multiple credentials, in which case the mechanism should select the credential most likely to succeed for the given target principal. Where a mechanism does not support multiple credentials it MUST use the first credential handle set by the application.</div>
<h4 class="subsubsection"><span class="subsubsection_label">2.3.1</span> <a id='magicparlabel-149' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-150' />
</div>
<div class='float float-listings'><pre> OM_uint32
 gss_set_context_credentials(OM_uint32 *minor_status,
                             gss_ctx_id_t context,
                             gss_const_cred_id_t input_cred_handle);</pre></div>

<h3 class="subsection"><span class="subsection_label">2.4</span> <a id='magicparlabel-158' />
GSS_Set_context_channel_bindings()</h3>
<div class="standard"><a id='magicparlabel-159' />
Inputs:</div>

<dl class='description'><dt class="description_label">context&nbsp;CONTEXT&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-160' />
 Empty security context</dd>
<dt class="description_label">input_channel_bindings&nbsp;OCTET&nbsp;STRING</dt>
<dd class="description_item"><a id='magicparlabel-161' />
</dd>
</dl>
<div class="standard"><a id='magicparlabel-162' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-163' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-164' />
minor_status INTEGER</li>
</ul>
<div class="standard"><a id='magicparlabel-165' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-166' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-167' />
...</li>
<li class="itemize_item"><a id='magicparlabel-168' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<h4 class="subsubsection"><span class="subsubsection_label">2.4.1</span> <a id='magicparlabel-169' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-170' />
</div>
<div class='float float-listings'><pre> OM_uint32
 gss_set_context_channel_bindings(OM_uint32 *minor_status,
                                  gss_ctx_id_t context,
                                  gss_const_buffer_t input_cb);</pre></div>

<h3 class="subsection"><span class="subsection_label">2.5</span> <a id='magicparlabel-178' />
GSS_Set_context_lifetime()</h3>
<div class="standard"><a id='magicparlabel-179' />
Inputs:</div>

<dl class='description'><dt class="description_label">context&nbsp;CONTEXT&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-180' />
 Empty security context</dd>
<dt class="description_label">lifetime_req&nbsp;INTEGER</dt>
<dd class="description_item"><a id='magicparlabel-181' />
 ...</dd>
</dl>
<div class="standard"><a id='magicparlabel-182' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-183' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-184' />
minor_status INTEGER</li>
</ul>
<div class="standard"><a id='magicparlabel-185' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-186' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-187' />
...</li>
<li class="itemize_item"><a id='magicparlabel-188' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<h4 class="subsubsection"><span class="subsubsection_label">2.5.1</span> <a id='magicparlabel-189' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-190' />
</div>
<div class='float float-listings'><pre> OM_uint32
 gss_set_context_lifetime(OM_uint32 *minor_status,
                          gss_ctx_id_t context,
                          uint64_t lifetime_req);</pre></div>

<h3 class="subsection"><span class="subsection_label">2.6</span> <a id='magicparlabel-198' />
GSS_Set_async_IO_notification()</h3>
<div class="standard"><a id='magicparlabel-199' />
Inputs:</div>

<dl class='description'><dt class="description_label">context&nbsp;CONTEXT&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-200' />
 Empty security context</dd>
<dt class="description_label">async_notification_method&nbsp;UNSPECIFIED</dt>
<dd class="description_item"><a id='magicparlabel-201' />
</dd>
</dl>
<div class="standard"><a id='magicparlabel-202' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-203' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-204' />
minor_status INTEGER</li>
</ul>
<div class="standard"><a id='magicparlabel-205' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-206' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-207' />
...</li>
<li class="itemize_item"><a id='magicparlabel-208' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<div class="standard"><a id='magicparlabel-209' />
This function sets a method for informing the application that the given security context is ready to have GSS_Step_context() called on it. Whenever GSS_Step_context() returns GSS_S_CONTINUE_NEEDED and no output token the application must wait for the async I/O completion notification and then call GSS_Step_context() again (this time with no input token). GSS_Step_context() will only work asynchronously when this function has been used to set a completion notification method.</div>

<div class="standard"><a id='magicparlabel-210' />
The async I/O completion notification method is not specified for the abstract API. In the C bindings we allow for several different notification methods, including:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-211' />
callback function</li>
<li class="itemize_item"><a id='magicparlabel-212' />
file descriptor or file handle into which a single byte (any value) will be written</li>
<li class="itemize_item"><a id='magicparlabel-213' />
a condition variable (and associated mutex) on which a signal will be sent</li>
</ul>
<div class="standard"><a id='magicparlabel-214' />
Other completeion notification methods could be specified as well, but these seem likely to be sufficient and reasonably portable.</div>
<h4 class="subsubsection"><span class="subsubsection_label">2.6.1</span> <a id='magicparlabel-215' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-216' />
</div>
<div class='float float-listings'><pre> typedef void (*gss_async_cb_t)(gss_ctx_id_t context, void *cb_data);
 
 OM_uint32
 gss_set_context_async_io_cb(OM_uint32 *minor_status,
                             gss_ctx_id_t context,
                             gss_async_cb_t cb,
                             void *cb_data);
 
 OM_uint32
 gss_set_context_async_io_fd(OM_uint32 *minor_status,
                             gss_ctx_id_t context,
                             int fd);
 
 
 OM_uint32
 gss_set_context_async_io_handle(OM_uint32 *minor_status,
                                 gss_ctx_id_t context,
                                 HANDLE h);
 
 OM_uint32
 gss_set_context_async_io_condvar(OM_uint32 *minor_status,
                                  gss_ctx_id_t context,
                                  pthread_cond_t cv,
                                  pthread_mutex_t lock);</pre></div>

<h4 class="subsubsection"><span class="subsubsection_label">2.6.2</span> <a id='magicparlabel-244' />
A Word About Event Loops and Threading</h4>
<div class="standard"><a id='magicparlabel-245' />
Note that it is possible for the mechanism to use a standard event loop library loop used by the application without having to tell the mechanism about the event loop. There exists a library specifically for this purpose known as &ldquo;<a href="git://git.fedorahosted.org/libverto.git">verto</a>&rdquo;. The verto library has a lot of clever logic in it to find the event loop that the application might be using, as long as the application uses an event loop library known to verto, including: glib, libev, libevent, and tevent. Verto is portable to Unix and Unix-like systems (including Linux and BSDs) as well as to Windows.</div>

<div class="standard"><a id='magicparlabel-246' />
Given the large number of event loop interfaces and the ability of mechanismst to find a suitable event loop or, if none exists, to create a thread in which to run an event loop, it makes sense to not specify interfaces by which to tell the mechanism which event loop to use. Otherwise we'd either have to make reference to the many event loop APIs in the C bindings, or define an event loop API for the application to implement and pass to the GSS-API. The latter seems much too complicated.</div>
<h3 class="subsection"><span class="subsection_label">2.7</span> <a id='magicparlabel-247' />
<a id="sub_GSS_Set_context_role_init__" />
GSS_Set_context_role_init()</h3>
<div class="standard"><a id='magicparlabel-248' />
Inputs:</div>

<dl class='description'><dt class="description_label">context&nbsp;CONTEXT&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-249' />
 Empty security context</dd>
<dt class="description_label">mech_type&nbsp;OID</dt>
<dd class="description_item"><a id='magicparlabel-250' />
 Mechanism OID</dd>
<dt class="description_label">target&nbsp;NAME</dt>
<dd class="description_item"><a id='magicparlabel-251' />
 Name of target service principal</dd>
</dl>
<div class="standard"><a id='magicparlabel-252' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-253' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-254' />
minor_status INTEGER</li>
</ul>
<div class="standard"><a id='magicparlabel-255' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-256' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-257' />
GSS_S_UNAVAILABLE</li>
<li class="itemize_item"><a id='magicparlabel-258' />
...</li>
<li class="itemize_item"><a id='magicparlabel-259' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<div class="standard"><a id='magicparlabel-260' />
This function sets the security context role to be that of an initiator, with the given mechanism OID (possibly GSS_C_NO_OID), and the given target name (possibly GSS_C_NO_NAME). The difference between an initiator and an acceptor application is that an initiator application calls this function and an acceptor does not; both call GSS_Step_context() (see <a href="#sub_GSS_Step_context__">2.8</a>).</div>
<h4 class="subsubsection"><span class="subsubsection_label">2.7.1</span> <a id='magicparlabel-261' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-262' />
</div>
<div class='float float-listings'><pre> OM_uint32
 gss_set_context_context_role_init(OM_uint32 *minor_status,
                                   gss_ctx_id_t context,
                                   gss_const_OID mech_oid,
                                   gss_const_name_t target_name);</pre></div>

<h3 class="subsection"><span class="subsection_label">2.8</span> <a id='magicparlabel-271' />
<a id="sub_GSS_Step_context__" />
GSS_Step_context()</h3>
<div class="standard"><a id='magicparlabel-272' />
Inputs:</div>

<dl class='description'><dt class="description_label">context&nbsp;CONTEXT&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-273' />
 Empty security context</dd>
<dt class="description_label">input_token&nbsp;OCTET&nbsp;STRING</dt>
<dd class="description_item"><a id='magicparlabel-274' />
 Input security context token, if any</dd>
</dl>
<div class="standard"><a id='magicparlabel-275' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-276' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-277' />
minor_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-278' />
output_token OCTET STRING &ndash; output security context token, if any</li>
<li class="itemize_item"><a id='magicparlabel-279' />
actual_mech OID &ndash; OID of mechanism used</li>
</ul>
<div class="standard"><a id='magicparlabel-280' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-281' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-282' />
GSS_S_CONTINUE_NEEDED ...</li>
<li class="itemize_item"><a id='magicparlabel-283' />
GSS_S_UNAVAILABLE</li>
<li class="itemize_item"><a id='magicparlabel-284' />
...</li>
<li class="itemize_item"><a id='magicparlabel-285' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<div class="standard"><a id='magicparlabel-286' />
This function steps through one step of security context token exchange for the given security context.</div>

<div class="standard"><a id='magicparlabel-287' />
Acceptors call this without having called GSS_Set_context_role_init(); see <a href="#sub_GSS_Set_context_role_init__">2.7</a>.</div>

<div class="standard"><a id='magicparlabel-288' />
Note that if GSS_S_CONTINUE_NEEDED is returned but no security context is output, then the function must be called again upon async I/O completion notification.</div>
<h4 class="subsubsection"><span class="subsubsection_label">2.8.1</span> <a id='magicparlabel-289' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-290' />
</div>
<div class='float float-listings'><pre> OM_uint32
 gss_step_context(OM_uint32 *minor_status,
                  gss_ctx_id_t context,
                  gss_const_buffer_t input_token,
                  gss_buffer_t output_token,
                  gss_const_OID *actual_mech);</pre></div>

<h2 class="section"><span class="section_label">3</span> <a id='magicparlabel-300' />
Security Considerations</h2>
<div class="standard"><a id='magicparlabel-301' />
The GSS-API is a security API, however, this document does not modify its semantics in any security-relevant way. There are no security considerations in this document.</div>
<h2 class="section"><span class="section_label">4</span> <a id='magicparlabel-302' />
IANA Considerations</h2>
<div class="standard"><a id='magicparlabel-303' />
[Add registrations for all the above functions.]</div>
<h2 class="section"><span class="section_label">5</span> <a id='magicparlabel-304' />
<a id="sec_References" />
Normative References</h2>
<div class="standard"><a id='magicparlabel-305' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-309' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">rfc2119</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-310' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-314' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2743.xml">rfc2743</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-315' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-319' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2744.xml">rfc2744</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-320' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-324' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5056.xml">rfc5056</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-325' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-329' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5587.xml">rfc5587</a></div>
</div></div>
<h2 class="section"><span class="section_label">6</span> <a id='magicparlabel-330' />
Informative References</h2>
<div class="standard"><a id='magicparlabel-331' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-335' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5653.xml">rfc5653</a></div>
</div></div>
</body>
</html>
