<?xml version="1.0" encoding="UTF-8"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc tocindent="no"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc tocindent="no"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc1035 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY rfc1123 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1123.xml">
<!ENTITY rfc1964 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1964.xml">
<!ENTITY rfc2743 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2743.xml">
<!ENTITY rfc4556 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4556.xml">
<!ENTITY rfc5890 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5890.xml">
<!ENTITY rfc6680 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6680.xml">
<!ENTITY rfc4120 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4120.xml">
<!ENTITY rfc4121 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4121.xml">
<!ENTITY rfc5280 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml">
]>
<rfc docName="draft-williams-kitten-generic-naming-attributes-01" ipr="trust200902" category="std" updates="1964, 2743, 2744">
  <front>
    <title abbrev="Simple GSS">Generic Naming Attributes for the Generic Security Services Application Programming Interface (GSS-API)</title>
    <author initials="N." surname="Williams" fullname="Nicolas Williams">
      <organization abbrev="Cryptonector">Cryptonector, LLC</organization>
      <address>
        <email>nico@cryptonector.com</email>
      </address>
    </author>
    <date month="February" year="2014"/>
    <area>
Security Area
</area>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>
This document specifies several useful generic naming attributes for use with the Generic Security Services Application Programming Interface (GSS-API) Naming Extensions specified in RFC6680.</t>
      <t>
These attributes allow applications to extract discrete components of a GSS-API “mechanism name” (MN) object: issuer (e.g., realm name, domain name, certification authority name), service and host names (for host-based service names), user names, and others.</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction and Motivation" anchor="d1e329">
      <t>
The Generic Security Services Application Programming Interface (GSS-API) <xref target="RFC2743"/> allows applications -and application protocol specifications- to use various security mechanisms in a generic way. There are some shortcomings of this API that preclude a fully-generic treatment of security mechanisms. This document builds on the naming extensions to the GSS-API <xref target="RFC6680"/> to correct some of those shortcomings.</t>
      <t>
In RFC6680 we introduced an interface by which to access “attributes” of names, but we did not specify any attributes. This document specifies some such attributes. Some of the new attributes are specifically intended to make it possible to use the GSS-API in a mechanism-generic way in common use cases where it is otherwise not possible to do so.</t>
      <t>
For example, some applications need to be able to observe the discrete elements of a peer principal's host-based service name, but they generally could only do so by parsing mechanism-specific display syntaxes or exported name token formats. Such applications are inherently not generic: they can only function correctly when used with security mechanism whose principal naming conventions/formats the applications understand.</t>
      <t>
More generally, we use the the extended naming interface to introduce an attribute model of principal naming.</t>
      <section title="Naming Constraints" anchor="d1e360">
        <t>
This document also introduces a notion of naming constraints, not unlike PKIX's <xref target="RFC5280"/>. Naming constraints apply to “issuers” of principal names and/or their attributes. For example, to Kerberos <xref target="RFC4120"/> realms, to PKIX certification authorities, to identity providers (IdPs), and so on. The goal is allow specification of policies which constrain the set of principal names that a given issuer can issue credentials for.</t>
        <t>
For example, the Kerberos realm FOO.EXAMPLE would generally not be expected to issue credentials to host-based principals in domains other than “foo.example”.</t>
        <t>
For each concrete attribute specified below there are several ways to inquire a NAME's value for that attribute:</t>
        <t>
          <list style="numbers">
            <t>
with naming constraint checking, providing no output if naming constraints are violated;</t>
            <t>
with naming constraint checking, providing an output indicator of naming constraint violations;</t>
            <t>
without naming constraint checking;</t>
            <t>
any of the above with “fast” (no slow I/O involved) naming constraint checking.</t>
          </list>
        </t>
        <t>
(1) is the default behavior. The others are obtained by adding an appropriate prefix to the attribute name.</t>
        <t>
Existing security mechanisms may not have any formal notion of naming constraints, but it is common to have some naming constraint conventions nonetheless. For example, Kerberos realm naming conventions are that realm names should mirror Domain Name System (DNS) <xref target="RFC1035"/> domain names, and that hostnames embedded in Kerberos principal names should a) be fully-qualified, b) within the domain corresponding to the DNS domain name derived from the realm's name. Or a Kerberos implementation might lookup a host's realm and check that it matches the principal's realm. Naming constraints should be formalized for all GSS-API security mechanisms.</t>
      </section>
      <section title="Conventions used in this document" anchor="d1e412">
        <t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
      </section>
    </section>
    <section title="Generic Attributes" anchor="d1e427">
      <t>
We add a number of generic name attributes, to be used via the GSS-API extended naming facility <xref target="RFC6680"/>. Some of these attributes can be used as prefixes of other attributes, that is, they can be used to modify the semantics of other attributes (see section 6 of RFC6680).</t>
      <t>
We also provide C bindings for these attributes, namely, the same symbolic names that we provide for the generic attributes.</t>
      <t>
Note: in all cases the display form of each attribute SHALL consist of text using the character set, codeset, and encoding from the caller's locale.</t>
      <section title="Concrete Attributes" anchor="d1e449">
        <t>
These attributes generally have a single value each. Only one of these attributes can also be used a prefix: the issuer name attribute.</t>
        <section title="Issuer Name" anchor="sub_Issuer_Name">
          <t>
We add an attribute by which to obtain a name of an issuer of a mechanism name (MN) or of an attribute of an MN. The API name for this attribute is GSS_C_ATTR_GENERIC_ISSUERNAME, and it's actual attribute name is “urn:ietf:id:ietf-kitten-name-attrs-00-issuername”.</t>
          <t>
The display form of issuer names is mechanism-specific.</t>
          <t>
The non-display form of issuer names SHALL be the exported name token form of the issuer's name. Not all mechanisms will support issuer names as MNs, therefore implementations MAY output a null non-display value.</t>
          <t>
For example, for the Kerberos mechanism <xref target="RFC4121"/> an issuer name would generally (but not always!) be a Kerberos realm name, probably displayed as just the realm name. (But note that there is not yet a Kerberos realm name as MN specification. We will specify one separately.)</t>
          <t>
This attribute can be used as prefix of other attributes. When used as a prefix, this attribute indicates that the application wishes to know the name of the issuer of the prefixed attribute of the given MN.</t>
        </section>
        <section title="Trust Validation Path" anchor="d1e488">
          <t>
We add an attribute by which to obtain the trust validation path for a given authenticated MN. The API for this attribute is GSS_C_ATTR_GENERIC_TRUST_PATH, and its actual attribute name is urn:ietf:id:ietf-kitten-name-attrs-01-trust-path”.</t>
          <t>
This attribute has zero or more ordered values. The interpretation of the trust validation path will vary somewhat by mechanism. For PKIX-based mechanisms this is the list of issuers in the trust validation path for the given MN's cert. For Kerberos this is the list of realms traversed from the MN to the local name of a security context. The MN's immediate issuer is not included. In the case of Kerberos, the issuer of the local MN is also not included. For Kerberos the trust validation path is the realm transit path of the Ticket used to establish a security context, but may also include PKIX trust validation paths (e.g., if PKINIT is used).</t>
          <t>
The display and non-display forms of trust validation path values is as for issuer names; see  <xref target="sub_Issuer_Name"/>.</t>
        </section>
        <section title="User Name" anchor="d1e506">
          <t>
We add an attribute by which to obtain the component of an MN naming a user. The API name for this attribute is GSS_C_ATTR_GENERIC_USERNAME, and it's actual attribute name is “urn:ietf:id:ietf-kitten-name-attrs-00-username”.</t>
          <t>
The display form of user names is mechanism-specific.</t>
          <t>
The non-display form of user names is mechanism-specific.</t>
        </section>
        <section title="Service Name" anchor="d1e521">
          <t>
We add an attribute by which to obtain the component of an MN naming a service as part of a host- or domain-based service name. The API name for this attribute is GSS_C_ATTR_GENERIC_SERVICENAME, and it's actual attribute name is “urn:ietf:id:ietf-kitten-name-attrs-00-servicename”.</t>
          <t>
The non-display form of the service name SHALL be the UTF-8 encoding of the service name.</t>
        </section>
        <section title="Host Name" anchor="d1e534">
          <t>
We add an attribute by which to obtain the component of an MN naming a host as part of a host- or domain-based service name. The API name for this attribute is GSS_C_ATTR_GENERIC_HOSTNAME, and it's actual attribute name is “urn:ietf:id:ietf-kitten-name-attrs-00-hostname”.</t>
          <t>
The display form of a host name MAY be stylized and SHOULD NOT be A-labels. <xref target="RFC5890"/>.</t>
          <t>
The non-display form of host names SHOULD be a character string as described in <xref target="RFC1123"/>, and SHOULD NOT be U-labels <xref target="RFC5890"/>.</t>
        </section>
        <section title="Domain Name" anchor="d1e567">
          <t>
We add an attribute by which to obtain the component of an MN naming a domain as part of a domain-based service name. The API name for this attribute is GSS_C_ATTR_GENERIC_DOMAINNAME, and it's actual attribute name is “urn:ietf:id:ietf-kitten-name-attrs-00-domainname”.</t>
          <t>
The display form of a domain name MAY be stylized and SHOULD NOT be A-labels. <xref target="RFC5890"/>.</t>
          <t>
The non-display form of domain names SHOULD be a character string as described in <xref target="RFC1123"/>, and SHOULD NOT be U-labels <xref target="RFC5890"/>.</t>
        </section>
      </section>
      <section title="Prefix Attributes" anchor="d1e600">
        <t>
GSS_Get_name_attribute() using attributes described in the preceding section SHALL fail if there are any name constraints that can be applied to the issuers of those names and, in applying those constraints, it is discovered that the issuer was not permitted to issue credentials for the MN.</t>
        <t>
For example, a Kerberos realm named “FOO.EXAMPLE” might not be expected to issue credentials (tickets, keys) to host-based service names for hosts not ending in “.foo.example” or which are not “foo.example”.</t>
        <t>
Several generic attribute prefixes are described below for overriding this behavior.</t>
        <section title="GSS_C_ATTR_GENERIC_UNCONSTRAINED" anchor="d1e616">
          <t>
This attribute prefix, named GSS_C_ATTR_GENERIC_UNCONSTRAINED in the API, and with an actual name of “urn:ietf:id:ietf-kitten-name-attrs-00-gen-unconstrained”, indicates that the application wants the value of the prefixed attribute without any name constraint checking.</t>
        </section>
        <section title="GSS_C_ATTR_GENERIC_UNCONSTRAINED_OK" anchor="d1e625">
          <t>
This attribute prefix, named GSS_C_ATTR_GENERIC_UNCONSTRAINED_OK in the API, and with an actual name of “urn:ietf:id:ietf-kitten-name-attrs-00-gen-unconstrained-ok”, indicates that the application wants the value of the prefixed attribute regardless of any applicable naming constraints, but to indicate the name constraint status via the 'authenticated' output parameter of the GSS_Get_name_attribute() interface.</t>
        </section>
        <section title="GSS_C_ATTR_GENERIC_FAST" anchor="d1e634">
          <t>
This attribute prefix, named GSS_C_ATTR_GENERIC_FAST in the API, and with an actual name of “urn:ietf:id:ietf-kitten-name-attrs-00-gen-fast”, indicates that the application requires that the mechanism not perform any slow operations (e.g., connecting to a directory for the purposes of name constraint validation) in obtaining the prefixed attribute of the given MN.</t>
        </section>
      </section>
    </section>
    <section title="Local Name Attributes" anchor="d1e643">
      <t>
Normally an Internet specification would not be expected to specify any local name attributes of GSS names. However, there is one common and very useful local name attribute, which we specify below. Implementations are free to use different names for this attribute or exclude it altogether -- it is a local name attribute, after all.</t>
      <section title="GSS_C_ATTR_LOCAL_LOGIN_USER" anchor="d1e652">
        <t>
This attribute, with suggested API symbolic name GSS_C_ATTR_LOCAL_LOGIN_USER, and suggested actual name “local-login-user”, requests a local user name corresponding to the given MN, if any.</t>
        <t>
Obtaining the local user name corresponding to an MN may require complex name mapping or lookup operations that are completely implementation-defined.</t>
      </section>
    </section>
    <section title="Suggested Mechanism-Specific Name Attributes (INFORMATIONAL)" anchor="d1e665">
      <t>
        <cref>
This section should really be split out into separate Internet-Drafts. It is here only because the author lacks the time at the moment of writing to create such separate I-Ds.</cref>
      </t>
      <t>
        <cref>
Actually, we should probably make this section normative. It's easier than publishing a larger number of RFCs...</cref>
      </t>
      <section title="Suggested Kerberos-Specific Name Attributes" anchor="d1e677">
        <t>
          <list style="symbols">
            <t>
realm (corresponding to issuer name)</t>
            <t>
component 0 (first component of a principal name)</t>
            <t>
component 1 (second component of a principal name)</t>
            <t>
..</t>
            <t>
component 9 (tenth component of a principal name; ten is enough)</t>
            <t>
components (ordered set of all components of a principal name)</t>
            <t>
specific authorization data elements</t>
            <t>
PKINIT client certificate</t>
            <t>
session key enctype</t>
            <t>
enctypes involved in transit path (this would only be available to initiators)</t>
          </list>
        </t>
        <section title="Kerberos Transit Path Constraint Semantics" anchor="d1e714">
          <t>
For initiator MNs obtained by acceptors from established security contexts, the trust path SHALL be the uncompressed domain- and X.500-style realm names from the initiator's Ticket's 'transited' field, plus the issuer names from the AD-INITIAL-VERIFIED-CAS authorization-data element (if it's in an AD-KDC-ISSUED or similar) if PKINIT <xref target="RFC4556"/> was used.</t>
          <t>
For acceptor MNs obtained by initiators from established security contexts, the trust path SHALL be the realms traversed -including realms issuing referrals- to obtain a service ticket for the target acceptor.</t>
          <t>
For MNs for the local end of a security context, the trust path SHALL be empty. This means that GSS_Get_name_attribute() will return empty value sets; for the C bindings the gss_get_name_attribute() function will return zero in the 'more' output parameter and empty values.</t>
          <t>
For initiator MNs as seen by acceptors, if the initiator's Ticket has the TRANSIT-POLICY-CHECKED flag set, and if local transit path policy is missing, then the GSS_C_ATTR_GENERIC_TRUST_PATH attribute will be considered authenticated -- the trust path will be considered to meet constraints.</t>
          <t>
Otherwise, if the acceptor has local transit path policy then the GSS_C_ATTR_GENERIC_TRUST_PATH attribute will be considered authenticated -- the trust path will be considered to meet constraints.</t>
          <t>
In all other cases the GSS_C_ATTR_GENERIC_TRUST_PATH attribute will be considered not authenticated.</t>
        </section>
      </section>
      <section title="Suggested PKU2U-Specific Name Attributes" anchor="d1e745">
        <t>
          <cref>
Add reference to PKU2U.</cref>
        </t>
        <t>
          <list style="symbols">
            <t>
issuer CA name</t>
            <t>
certificate trust validation path to a trust anchor</t>
            <t>
certificate</t>
            <t>
certificate subject public key</t>
            <t>
certificate subject public key algorithm</t>
            <t>
certificate subject name</t>
            <t>
certificate subject alternate names</t>
            <t>
specific certificate extensions</t>
            <t>
certificate algorithm names</t>
            <t>
session key enctype</t>
          </list>
        </t>
      </section>
    </section>
    <section title="Generic Issuer Name Type" anchor="d1e785">
      <t>
We add a GSS name-type for use in representing issuer names, designated symbolically as GSS_C_NT_ISSUER. Its query syntax is unspecified and mechanism-specific.</t>
      <t>
At least initially the common use of this name-type will be for representation of issuer names using the GSS_C_ATTR_GENERIC_ISSUERNAME GSS name attribute (see  <xref target="sub_Issuer_Name"/>).</t>
      <section title="Kerberos Realm Name Type" anchor="d1e800">
        <t>
No name-type is needed in the Kerberos protocol for realm names. Because all three forms of Kerberos realm-names (DOMAIN, X.500, and OTHER) and unambiguously distinguishable from each other, we also do not add a Kerberos-specific GSS name-type.</t>
        <t>
The query and display syntax of GSS_C_NT_ISSUER names for Kerberos is just a realm name prefixed with an '@'. We prefix the realm name with '@' to take advantage of an otherwise useless ambiguity in the query and display form of Kerberos mechanism principal names <xref target="RFC1964"/>, namely that zero-component, and one-zero-length component principal names display identically, therefore those are useless name forms in Kerberos (they would be useless anyways); we appropriate this otherwise useless name form as the query and display syntax of Kerberos realm names. For example, “@FOO.EXAMPLE”.</t>
        <t>
In the unlikely event that a name of GSS_C_NT_ISSUER type is used as a GSS initiator or acceptor principal, the actual Kerberos principal name should be an appropriate TGS principal name. More specific information for such use-cases will be provided by any future application protocol specifications that use them.</t>
      </section>
      <section title="PKIX Issuer Name Type" anchor="d1e822">
        <t>
          <cref>
A name type for PKIX issuers is needed, even when dealing with Kerberos, since X.500-style realm names may be involved, as well as real PKIX CA names from PKINIT/PKCROSS. We'll need a mechanism OID for a generic PKIX mechanism (even if it isn't specified!) for the exported name tokens! One that Kerberos, PKU2U and other PKIX mechanisms can share.</cref>
        </t>
      </section>
    </section>
    <section title="Security Considerations" anchor="d1e831">
      <t>
[Add text regarding name constraint checking and explaining the default-to-safe design of the generic name attributes defined in section 2.]</t>
    </section>
    <section title="IANA Considerations" anchor="d1e840">
      <t>
[Add text regarding the registration and assignment of the name attributes described in the preceding sections. In particular we should want these attributes' names to not reflect an Internet-Draft name, but an RFC number.]</t>
    </section>
  </middle>
  <back>
    <references title="Normative References">&rfc2119;
&rfc1035;
&rfc1123;
&rfc1964;
&rfc2743;
&rfc4556;
&rfc5890;
&rfc6680;
</references>
    <references title="Informative References">&rfc4120;
&rfc4121;
&rfc5280;
</references>
  </back>
</rfc>
