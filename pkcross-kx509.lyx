#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass docbook
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
Format 31

InsetLayout Flex:PI_Strict
    LyXType Custom
    HTMLTag div
    LabelString PI_Strict
End

InsetLayout Flex:PI
    LyXType Custom
    HTMLTag div
    LabelString PI
End

InsetLayout Flex:PI_SymRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SymRefs
End

InsetLayout Flex:PI_SortRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SortRefs
End

InsetLayout Flex:PI_TOC
    LyXType Custom
    HTMLTag div
    LabelString PI_TOC
End

InsetLayout Flex:PI_TOCIndent
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCIndent
End

InsetLayout Flex:PI_TOCDepth
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCDepth
End

InsetLayout Flex:PI_TOCNarrow
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCNarrow
End

InsetLayout Flex:PI_TOCCompact
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCCompact
End

InsetLayout Flex:PI_TOCAppendix
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCAppendix
End

InsetLayout Flex:DocName
    LyXType Custom
    HTMLTag div
    LabelString DocName
End

InsetLayout Flex:IntendedStatus
    LyXType Custom
    HTMLTag div
    LabelString IntendedStatus
End

InsetLayout Flex:Updates
    LyXType Custom
    HTMLTag div
    LabelString Updates
End

InsetLayout Flex:Obsoletes
    LyXType Custom
    HTMLTag div
    LabelString Obsoletes
End

InsetLayout Flex:SeriesNo
    LyXType Custom
    HTMLTag div
    LabelString SeriesNo
End

InsetLayout Flex:RFCNumber
    LyXType Custom
    HTMLTag div
    LabelString RFCNumber
End

InsetLayout Flex:IPR
    LyXType Custom
    HTMLTag div
    LabelString IPR
End

InsetLayout Flex:IETFArea
    LyXType Custom
    HTMLTag div
    LabelString IETFArea
End

InsetLayout Flex:IETFWorkingGroup
    LyXType Custom
    HTMLTag div
    LabelString IETFWorkingGroup
End

InsetLayout Flex:XML2RFCKeyword
    LyXType Custom
    HTMLTag div
    LabelString XML2RFCKeyword
End

InsetLayout Flex:TitleAbbrev
    LyXType Custom
    HTMLTag div
    LabelString TitleAbbrev
End

InsetLayout Flex:AuthorRole
    LyXType Custom
    HTMLTag div
    LabelString AuthRole
End

InsetLayout Flex:AuthorInitials
    LyXType Custom
    HTMLTag div
    LabelString AuthInitials
End

InsetLayout Flex:AuthorSurname
    LyXType Custom
    HTMLTag div
    LabelString AuthSurname
End

InsetLayout Flex:AuthorOrg
    LyXType Custom
    HTMLTag div
    LabelString AuthOrg
End

InsetLayout Flex:AuthorOrgAbbrev
    LyXType Custom
    HTMLTag div
    LabelString AuthOrgAbbrev
End

InsetLayout Flex:AuthorEmailAddr
    LyXType Custom
    HTMLTag div
    LabelString AuthEmailAddr
End

InsetLayout Flex:AuthorAddrStreet
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrStreet
End

InsetLayout Flex:AuthorAddrCity
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCity
End

InsetLayout Flex:AuthorAddrRegion
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrRegion
End

InsetLayout Flex:AuthorAddrCode
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCode
End

InsetLayout Flex:AuthorAddrCountry
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCountry
End

InsetLayout Flex:EntityXRef
    LyXType Custom
    HTMLTag div
    LabelString EntityXRef
End

InsetLayout Flex:BibXML
    LyXType Custom
    HTMLTag div
    LabelString BibXML
End

InsetLayout Flex:EmbeddedBibXML
    LyXType Custom
    HTMLTag div
    LabelString EmbeddedBibXML
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman cmr
\font_sans cmss
\font_typewriter cmtt
\font_default_family ttdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Public Key-Based Kerberos Cross Realm Path Traversal Protocol Using Kerberized
 Certification Authorities (kx509) and PKINIT
\end_layout

\begin_layout Standard
\begin_inset Flex DocName
status open

\begin_layout Plain Layout
draft-williams-kitten-krb5-pkcross-03
\end_layout

\end_inset


\begin_inset Flex IPR
status open

\begin_layout Plain Layout
trust200902
\end_layout

\end_inset


\begin_inset Flex IntendedStatus
status open

\begin_layout Plain Layout
std
\end_layout

\end_inset


\begin_inset Flex TitleAbbrev
status open

\begin_layout Plain Layout
PKCROSS
\end_layout

\end_inset


\begin_inset Flex IETFArea
status open

\begin_layout Plain Layout
Security Area
\end_layout

\end_inset


\begin_inset Flex XML2RFCKeyword
status open

\begin_layout Plain Layout
Internet-Draft
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI TOC
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\begin_inset Flex PI SymRefs
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\begin_inset Flex PI TOCIndent
status open

\begin_layout Plain Layout
no
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
comments="yes"
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
inline="yes"
\end_layout

\end_inset


\end_layout

\begin_layout Author
Nicolas Williams
\begin_inset Flex AuthorOrg
status open

\begin_layout Plain Layout
Cryptonector, LLC
\end_layout

\end_inset


\begin_inset Flex AuthorOrgAbbrev
status open

\begin_layout Plain Layout
Cryptonector
\end_layout

\end_inset


\begin_inset Flex AuthorEmailAddr
status open

\begin_layout Plain Layout
nico@cryptonector.com
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
This document specifies a protocol for obtaining cross-realm Kerberos tickets
 using existing, related protocols: kerberized certification authorities
 (kx509) and public key cryptography initial authentication in Kerberos
 (PKINIT).
 The resulting protocol has a number of desirable security properties, including
 privacy protection for the user relative to their home realm's infrastructure,
 as well a support for leap-of-faith trust establishment, and automated
 cross-realm keying.
 This protocol allows Kerberos to scale to large numbers of realms.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Kerberos 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4120
\end_layout

\end_inset

 supports meshes of many realms.
 The individual relationships between realms must be manually keyed, usually
 with keys derived from passwords.
 These keys are very difficult to rollover, and when they are changed the
 result is often outages -- controlled outages where foreseen, but outages
 nonetheless.
 This method of cross-realm keying does not scale, and has very poor security
 properties.
 We seek to remediate this.
\end_layout

\begin_layout Standard
Many years ago there was a proposal for exchanging cross-realm keys using
 a public key infrastructure (PKI) 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5280
\end_layout

\end_inset

; that proposal went by the name 
\begin_inset Quotes eld
\end_inset

PKCROSS
\begin_inset Quotes erd
\end_inset

.
 We appropriate that long-dead proposal's name, but the protocol specified
 here is very different from the original proposal.
\end_layout

\begin_layout Subsection
Conventions used in this document
\end_layout

\begin_layout Standard
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
 "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are
 to be interpreted as described in 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2119
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
The Protocol
\end_layout

\begin_layout Standard
A Kerberos client in with a ticket-granting ticket (TGT) for any one source
 realm (usually but not necessarily the client's own realm) wishing to acquire
 a TGT for a destination realm may use this protocol instead of the traditional
 cross-realm ticket-granting service (TGS) exchanges as follows:
\end_layout

\begin_layout Enumerate
Generate private key to a public key cryptosystem;
\end_layout

\begin_layout Enumerate
Generate a certificate signing request (CSR) 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC2986
\end_layout

\end_inset

, such that the resulting certificate has an id-pkinit-san subject alternative
 name (SAN) corresponding to the client's principal name and realm;
\end_layout

\begin_layout Enumerate
Request a certificate from the kx509 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC6717
\end_layout

\end_inset

 service run by the source realm;
\end_layout

\begin_layout Enumerate
Request a TGT from the destination realm using PKINIT 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4556
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
If the destination realm issues the requested Ticket then it SHOULD include
 the client's certificate in an AD-CLIENT-CERTIFICATE authorization-data
 element, and it MUST do so if it does not validate the client's certificate
 to an acceptable trust anchor.
\end_layout

\begin_layout Standard
The destination realm MUST NOT set the TRANSIT-POLICY-CHECKED flag on the
 tickets they issue to clients whose foreign realm certificates are not
 validated by the KDC.
 Destination realm administrators may configure their realms to know specific
 foreign realm clients' certificates.
\end_layout

\begin_layout Standard
The destination MUST include the trust path of the client's certificate,
 if validated, in the 'transited' field of the issued Ticket, using a mapping
 of the issuer names to the X.500 realm naming style.
\end_layout

\begin_layout Subsection
Exchange of Long-Term Cross-Realm Symmetric Keys
\end_layout

\begin_layout Standard
When the client principal is a TGS principal and its PKINIT AS-REQ protocol
 data unit (PDU) has the USE-SESSION-KEY-AS-REALM-KEY KDCOptions flag set
 then the client is requesting that the session key of the ticket issued
 by the destination realm become the long-term key for the corresponding
 krbtgt/DESTINATION@SOURCE principal.
 The destination realm MUST validate the client principal's certificate,
 building a trust path if need be, and validating it to a trust anchor.
 The source and destination realm MAY have previously exchange fingerprints
 of their respective key distribution service (KDC) public keys and/or certifica
tes and/or the source realm's kx509 root or intermediate certification authority
 (CA), and such previously exchanged material, if any, MUST be used for
 certificate trust validation.
\end_layout

\begin_layout Standard
Realm administrators should use the procedure to setup symmetric cross-realm
 keys as necessary to save clients from having to frequently use kx509 and
 PKINIT as described in the preceding section.
\end_layout

\begin_layout Standard
Where public key infrastructure (PKI) exists allowing this to happen automatical
ly, realms' KDCs MAY be configured to automatically key cross-realm principals
 for any realms that their source realms' clients request cross-realm TGTs
 for, but note that this presents a denial of service (DoS) opportunity
 to the source realm's clients.
 Source realm KDCs SHOULD only do this when a) they are configured to do
 so, b) the requesting client principal is in the same realm, and c) the
 KDC has not spent too much effort recently providing this service (i.e.,
 KDCs should throttle attempts to establish symmetric cross-realm keys in
 this manner).
 See also the next section.
\end_layout

\begin_layout Subsubsection
Caching of PKCROSS Symmetrically-Keyed Cross-Realm Principals
\end_layout

\begin_layout Standard
Realms whose KDCs automatically setup symmetrically-keyed cross-realm principals
 SHOULD treat these principals as a cache, and SHOULD implement a cache
 eviction policy.
 For example, a least-recently-used (LRU) or least-frequently-used (LFU)
 policy.
 Otherwise a resource exhaustion DoS attack may be possible.
 See also the preceding section.
\end_layout

\begin_layout Subsection
Indication of Preference for/ Required Use of Symmetrically-Keyed Cross-Realm
 Principals
\end_layout

\begin_layout Standard
A KDC MAY reject a PKINIT/PKCROSS request with a KRB-ERROR indicating that
 the use of a symmetrically-keyed cross-realm relation is required.
 This is done using the following error code: <TBD>.
 The following e-data TD type is used to hold a SEQUENCE OF Realm: <TBD>.
\end_layout

\begin_layout Standard
A KDC MAY accept a PKINIT/PKCROSS request but indicate to the client that
 a symmetrically-keyed cross-realm relation is preferred.
 The KDC does this by including a PA-DATA containing a SEQUENCE OF Realm,
 with the following pa-type: <TBD>.
\end_layout

\begin_layout RevisionRemark
Add an ASN.1 module, even though it will contain only one untagged type consistin
g of a SEQUENCE OF Realm, and the IANA-assigned values for error code, e-data
 TD type, and pa-type, plus the import of the RFC4120 module (to get the
 Realm type).
\end_layout

\begin_layout Section
Security Properties
\end_layout

\begin_layout Standard
The proposed PKCROSS protocol has several useful properties described below.
\end_layout

\begin_layout Subsection
Automated Cross-Realm Keying
\end_layout

\begin_layout Standard
No more manual keying of cross-realm principals via exchanging passwords
 on a telephone call (or similar).
\end_layout

\begin_layout Subsection
Scalability and Vulnerability to Trusted Third Parties (TTPs)
\end_layout

\begin_layout Standard
Kerberos with commonplace symmetrically-keyed hierarchical cross-real trusts
 can scale to a large universe of realms, but only if there are top-level
 realms that are willing to pair-wise trust and 
\begin_inset Quotes eld
\end_inset

child
\begin_inset Quotes erd
\end_inset

 realms.
 Such top-level realms do not exist in practice, leading to an O(N^2) scaling
 problem for most two-label realms.
 Leveraging a PKI, such as a PKIX PKI 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5280
\end_layout

\end_inset

 or a DNSSEC PKI 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4033
\end_layout

\end_inset

 removes the need for either top-level realms (which are not likely to ever
 be operated as commercial or even non-profit entities) or O(N^2) pair-wise
 cross-realm symmetric keying.
 The cost of this is having to add PKI trust paths to Kerberos trust paths
 (though the resulting trust path length need not be much different than
 before).
 Another cost is that having one (or many) top-level / root trusted third
 party (TTP), makes Kerberos susceptible to attack by those TTPs -- this
 was, and is, always a problem with any TTP protocol -such as Kerberos and
 PKI- anyways.
\end_layout

\begin_layout Subsection
Privacy Protection relative to home realm
\end_layout

\begin_layout Standard
This protocol protects the privacy of client principals vis-a-vis their
 home realms: client principals' home realms need not know what destination
 realms the clients are speaking to because client principals need not ask
 their home realms.
\end_layout

\begin_layout Standard
This feature is generally and naturally available in PKI, and as this protocol
 is based on a kerberized certification authority, this protocol inherits
 this privacy feature from PKI.
\end_layout

\begin_layout Standard
The realms visited by the client may, of course, inform the client's home
 realm, but in the event that they don't, the client does gain this small
 measure of privacy.
 Of course, the client SHOULD attach an OCSP Response 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC6960
\end_layout

\end_inset

 to its PKINIT request, per 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4557
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Leap-of-Faith (LoF) / Trust-On-First-Use (TOFU)
\end_layout

\begin_layout Standard
Clients need not validate the certificate trust path of destination realms.
 When they do not, the services used through those destination realms are
 as good as anonymous authentication.
 If the client saves the root or intermediate or end entity certificates
 of the destination realms that it cannot or does not validate, then the
 client can check that on future occasions the destination realm's certificate
 has not changed, and it may warn the user if it has.
 This quite similar to how clients using the secure shell (SSH) protocol
 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4251
\end_layout

\end_inset

 handle server authentication, and is commonly known as 
\begin_inset Quotes eld
\end_inset

leap-of-faith
\begin_inset Quotes erd
\end_inset

 (LoF) or trust-on-first-use (TOFU).
 The result is pseudonymous authentication.
\end_layout

\begin_layout Standard
Destination services too may apply apply LoF/TOFU: by not validating the
 transit path of the client (e.g., if it's not in a white-list of realms whose
 clients must have valid transit paths) and accepting tickets without the
 TRANSITED-POLICY-CHECKED ticket flag set.
 The destination service can save the client's certificate, if found in
 an AD-CLIENT-CERTIFICATE authorization-data element in the client's Ticket,
 and may use it later to ensure that it is talking to the same client.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Requirements-for-LoF/TOFU"

\end_inset

Requirements and Recommendations for LoF/TOFU Authentication
\end_layout

\begin_layout Itemize
Implementations MUST NOT use LoF/TOFU to authenticate a target service's
 realm without the approval of the user or without making it clear that
 the realm is not fully authenticated (perhaps by replacing the realm's
 name with a fingerprint of its public key / certificate).
\end_layout

\begin_layout Itemize
Implementations MAY allow users and/or service administrators to establish
 user-friendly aliases for peer principal names that include public key
 fingerprint material.
\end_layout

\begin_layout Itemize
Implementations MAY provide a way to automatically learn realm name <->
 public key / certificate bindings.
 Pinning [add reference to HSTS] SHOULD be supported in that case.
 The user MUST approve of each such mapping.
\end_layout

\begin_layout Section
Using DANE (DNSSEC) for Realm Certificate Validation
\end_layout

\begin_layout Standard
It is possible to use DNS-Based Authentication of Named Entities (DANE)
 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC6698
\end_layout

\end_inset

 to authenticate the KDC certificates of realms with domain-style names.
 To do this simply format the realm's DOMAIN-style name as a DNS domainname
 (no case folding is necessary), then format the DANE TLSA resource record
 set's (RRset) domainname per-DANE, using the KDC's port number.
 Note that the KDCs will usually not speak TLS, though there is an extension
 for using TLS in the KDC over TCP protocol 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC6251
\end_layout

\end_inset

.
 For example, the TLSA RRset for any KDC for the DESTINATION.EXAMPLE realm
 might be named _88._tcp.destination.example.
 Follow DANE TLSA certificate validation procedures to validate the KDC's
 certificate regardless of whether the certificate was obtained by using
 PKINIT or TLS.
\end_layout

\begin_layout Standard
Normal PKINIT KDC certificate validation rules MAY also be used in addition
 to DANE rules.
\end_layout

\begin_layout Section
Application Programming Interface Considerations
\end_layout

\begin_layout Standard
For non-LoF/TOFU uses the main security consideration for applications is
 that improved scalability for Kerberos realm traversal implies larger Kerberos
 universes, and the larger a universe of trust the more important it is
 to have useful and expressive local policy for evaluating the trustworthiness
 of any given transit path.
 Because in most applications local policy should be a component external
 to the application, there is little impact on APIs here.
 However, an implementation may wish to provide applications with interfaces
 for specifying policies, either named or by value.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:API-Considerations-for"

\end_inset

API Considerations for LoF/TOFU Authentication
\end_layout

\begin_layout Standard
For LoF/TOFU uses there is a critical requirement that APIs not permit accidenta
l aliasing of principal names as a result of LoF/TOFU being used.
 The simplest way to do this is to use a fingerprint of the peer principal's
 public key as their principal, and/or a fingerprint of the peer principal's
 realm's public key as their realm.
\end_layout

\begin_layout RevisionRemark
For interoperability and compatibility we might want to specify what fingerprint
 algorithm to use, perhaps one of the SSHv2 fingerprint algorithms, such
 as in RFC4255, but those use weaker hashes...
\end_layout

\begin_layout Subsection
GSS-API Naming Considerations
\end_layout

\begin_layout Standard
There are no GSS-API-specific considerations.
 The naming considerations described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:API-Considerations-for"

\end_inset

 and the naming attributes defined in 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
I-D.williams-kitten-generic-naming-attributes
\end_layout

\end_inset

 are sufficient.
 Note however that information about how PKCROSS was used to establish symmetric
ally-keyed cross-realm principals is lost and will not appear in the transit
 path in tickets issued by KDCs reached via such cross-realm principals.
\end_layout

\begin_layout RevisionRemark
Actually, we may need to specify some interfaces by which to indicate that
 the user wishes to alias a pseudonymous name.
 Perhaps we can do so by applying GSS_Set_name_attribute() to a peer MN
 obtained from GSS_Inquire_context()?
\end_layout

\begin_layout Subsection
Representation of LoF/TOFU Principal and Realm Names
\end_layout

\begin_layout Standard
If there is no acceptable or verifiable trust path for validating a peer's
 principal's and/or realm's certificate, then the local end-point MUST locally
 output the peer's principal (or realm) name as a fingerprint of one of:
\end_layout

\begin_layout Enumerate
peer's EE certificate's subject public key;
\end_layout

\begin_layout Enumerate
a subject Name or GeneralName from the peer's EE certificate and the peer's
 certificate issuer's subjectPublicKey.
\end_layout

\begin_layout Standard
The choice of which of the above to fingerprint is a local choice.
 The default SHOULD be (1).
 (2) allows for key rollover.
\end_layout

\begin_layout Standard
The fingerprints MUST be computed as follows:
\end_layout

\begin_layout Itemize
First format a byte string as follows:
\end_layout

\begin_deeper
\begin_layout Itemize
for (1) take the subjectPublicKey's DER [add ref to x.690] encoding (this
 is a BIT STRING), with no additional tagging
\end_layout

\begin_layout Itemize
for (2) take the DER encoding of the ASN.1 type 
\begin_inset Quotes eld
\end_inset

nameAndIssuerFPInput ::= SEQUENCE { subjectName GeneralName, issuerPublicKey
 BIT STRING}
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Then apply SHA-256 to the octet string from the first step, then take the
 most significant 192 bits of that hash and base64-encode using the 
\begin_inset Quotes eld
\end_inset

URL- and filename-safe alphabet
\begin_inset Quotes erd
\end_inset

 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4648
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Prefix 
\begin_inset Quotes eld
\end_inset

:spk:
\begin_inset Quotes erd
\end_inset

 if using (1) or 
\begin_inset Quotes eld
\end_inset

:nai:
\begin_inset Quotes erd
\end_inset

 if using (2).
 This is the fingerprint to use as either the principal name's single component,
 or as the principal's realm name.
 If the name is a realm name then the colons (':') in the prefix are to
 be removed so as to produce valid Kerberos realm names.
\end_layout

\begin_layout Standard
For example, 
\begin_inset Quotes eld
\end_inset

:spk:MjNhNjM0YTM4NDFiZDdhNjVkODQ5YTdi
\begin_inset Quotes erd
\end_inset

@FOO.EXAMPLE or 
\begin_inset Quotes eld
\end_inset

HTTP/someserver.foo.example@spkMmE1M2RiMjc1Nzk5ODFjNWQwYjk0OTAw
\begin_inset Quotes erd
\end_inset

.
 Note that all such realm names have no period character ('.') in them and
 will too long to match top-level domainnames in use in the DNS, and no
 such principal names have a forward slash ('/') character in them.
 Note also that interpretation of such principal names as usernames on POSIX
 systems will either produce an empty string (due to implementation issues
 regarding the use of colons (':' as separators in POSIX user databases)
 or the full string, either way not likely ti collide with valid usernames.
\end_layout

\begin_layout Subsection
GSS-API Name-Type for Pseudonymous Principals
\end_layout

\begin_layout Standard
We add a new GSS-API name-type: GSS_C_NT_PSEUDONYMOUS.
 This represents principals whose names are pseudonymous.
\end_layout

\begin_layout Subsubsection
Kerberos Name-Type for Pseudonymous Principals
\end_layout

\begin_layout Standard
At this time pseudonymous principal names should not appear in Kerberos
 PDUs, thus no name-type need be assigned.
 If a pseudonymous name must be appear in a Kerberos PDU for any reason
 then the NT-UNKNOWN name-type should be used.
\end_layout

\begin_layout Section
Security Considerations
\end_layout

\begin_layout RevisionRemark
All the security considerations of Kerberos and PKI apply.
 Security considerations are discussed throughout this document.
\end_layout

\begin_layout Standard
Scaling up the universe of realms reachable via any trust path necessarily
 dilutes trust overall, but not for specific paths.
 On the other hand, by shortening transit path lengths trust can be improved,
 though some short transit paths will have been symmetrically keyed using
 this PKCROSS protocol and therefore will be longer than they appear to
 be.
 These are subjective notions of trust, of course.
\end_layout

\begin_layout Subsection
Loss of Cross-Realm Principal Trust Establishment Information
\end_layout

\begin_layout Standard
Note that once a cross-realm principal is symmetrically keyed no information
 about how that keying operation took place will appear in tickets issued
 by that TGS principal.
\end_layout

\begin_layout Standard
Note also that the Kebreros transit path encodes only realm names (including
 X.500-style names, thus PKIX certificate subject and issuer names), and
 lacks any public key information that might be useful for pinning.
 However, the certificate validation path for each realm in a transit path
 SHOULD be included in the transit path.
\end_layout

\begin_layout Subsection
Security Considerations for LoF/TOFU
\end_layout

\begin_layout Standard
LoF/TOFU has additional security considerations.
 To start there is the obvious susceptibility to peer impersonation / man-in-the
-middle (MITM) attacks on initial contact, which is mitigated by the attacker's
 need to always remain in the middle in order to avoid detection.
\end_layout

\begin_layout Standard
LoF/TOFU require the ability to remember peers' pseudonymous identities
 -- their public keys (or certificates), otherwise one remains vulnerable
 to peer impersonation / MITM attacks at all times.
 This requires synchronization of peer pseudonym databases across multiple
 devices (where users have multiple devices), which may not always be possible
 or performed.
\end_layout

\begin_layout Standard
It is critical that existing applications not be broken by the ability to
 use LoF/TOFU in new Kerberos implementations when those applications are
 re-linked with newer Kerberos implementations.
 To ensure this we require the use of public key fingerprints as principal
 and/or realm names; local mappings of learned pseudonym mappings onto semantica
lly meaningful names are permitted where the user can validate the mapping.
 But keep in mind that most users never actually do much to verify peers'
 public keys in any application/protocol that provides LoF/TOFU [references
 for this would be nice -Nico].
\end_layout

\begin_layout Standard
See 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Requirements-for-LoF/TOFU"

\end_inset

 for additional requirements for LoF/TOFU authentication.
\end_layout

\begin_layout Subsection
On the Need for a Common Transit Path Policy Language
\end_layout

\begin_layout Standard
There are no standard ways to express authorization policies for trust transit
 paths for either Kerberos nor PKI.
 A standard language for this would be extremely useful.
 Such a language should allow for the expression of policies for both, clients
 and services.
 Such a language should allow for the expression of complex realm/domain/other
 naming, and should allow for HSTS-style pinning [add references -Nico].
 Such a language should allow for multiple paths where desired, and should
 allow for more than path rejection: it should also allow for reducing the
 entitlements assigned to a peer/realm for authorization purposes.
\end_layout

\begin_layout Standard
The need for a standard transit path policy expression language is not new,
 and such a language is broadly and generally needed.
 Therefore such a language is outside this document's scope.
\end_layout

\begin_layout Section
IANA Considerations
\end_layout

\begin_layout RevisionRemark
Allocate the new KDCOptions flag (USE-SESSION-KEY-AS-REALM-KEY) and authorizatio
n-data element (AD-CLIENT-CERTIFICATE).
\end_layout

\begin_layout Section
Acknowledgements
\end_layout

\begin_layout Standard
Although the author arrived at this 
\begin_inset Quotes eld
\end_inset

kx509 + PKINIT == PKCROSS
\begin_inset Quotes erd
\end_inset

 idea independently, it is not an original idea.
 Henry Hotz and Jeffrey Altman each conceived the same idea years earlier.
 It is a relatively obvious idea when taking into account efforts to bridge
 disparate security mechanisms and credentials infrastructures.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:References"

\end_inset

Normative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2119"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2986"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2986.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4120"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4120.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4556"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4556.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4557"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4557.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4648"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5280"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc6698"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6698.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc6717"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6717.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "I-D.williams-kitten-generic-naming-attributes"
target "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.williams-kitten-generic-naming-attributes.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Informative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4033"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4033.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4251"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4251.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc6251"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6251.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc6960"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6960.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
