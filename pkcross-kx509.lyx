#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass docbook
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
Format 31

InsetLayout Flex:PI_Strict
    LyXType Custom
    HTMLTag div
    LabelString PI_Strict
End

InsetLayout Flex:PI
    LyXType Custom
    HTMLTag div
    LabelString PI
End

InsetLayout Flex:PI_SymRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SymRefs
End

InsetLayout Flex:PI_SortRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SortRefs
End

InsetLayout Flex:PI_TOC
    LyXType Custom
    HTMLTag div
    LabelString PI_TOC
End

InsetLayout Flex:PI_TOCIndent
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCIndent
End

InsetLayout Flex:PI_TOCDepth
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCDepth
End

InsetLayout Flex:PI_TOCNarrow
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCNarrow
End

InsetLayout Flex:PI_TOCCompact
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCCompact
End

InsetLayout Flex:PI_TOCAppendix
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCAppendix
End

InsetLayout Flex:DocName
    LyXType Custom
    HTMLTag div
    LabelString DocName
End

InsetLayout Flex:IntendedStatus
    LyXType Custom
    HTMLTag div
    LabelString IntendedStatus
End

InsetLayout Flex:Updates
    LyXType Custom
    HTMLTag div
    LabelString Updates
End

InsetLayout Flex:Obsoletes
    LyXType Custom
    HTMLTag div
    LabelString Obsoletes
End

InsetLayout Flex:SeriesNo
    LyXType Custom
    HTMLTag div
    LabelString SeriesNo
End

InsetLayout Flex:RFCNumber
    LyXType Custom
    HTMLTag div
    LabelString RFCNumber
End

InsetLayout Flex:IPR
    LyXType Custom
    HTMLTag div
    LabelString IPR
End

InsetLayout Flex:IETFArea
    LyXType Custom
    HTMLTag div
    LabelString IETFArea
End

InsetLayout Flex:IETFWorkingGroup
    LyXType Custom
    HTMLTag div
    LabelString IETFWorkingGroup
End

InsetLayout Flex:XML2RFCKeyword
    LyXType Custom
    HTMLTag div
    LabelString XML2RFCKeyword
End

InsetLayout Flex:TitleAbbrev
    LyXType Custom
    HTMLTag div
    LabelString TitleAbbrev
End

InsetLayout Flex:AuthorRole
    LyXType Custom
    HTMLTag div
    LabelString AuthRole
End

InsetLayout Flex:AuthorInitials
    LyXType Custom
    HTMLTag div
    LabelString AuthInitials
End

InsetLayout Flex:AuthorSurname
    LyXType Custom
    HTMLTag div
    LabelString AuthSurname
End

InsetLayout Flex:AuthorOrg
    LyXType Custom
    HTMLTag div
    LabelString AuthOrg
End

InsetLayout Flex:AuthorOrgAbbrev
    LyXType Custom
    HTMLTag div
    LabelString AuthOrgAbbrev
End

InsetLayout Flex:AuthorEmailAddr
    LyXType Custom
    HTMLTag div
    LabelString AuthEmailAddr
End

InsetLayout Flex:AuthorAddrStreet
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrStreet
End

InsetLayout Flex:AuthorAddrCity
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCity
End

InsetLayout Flex:AuthorAddrRegion
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrRegion
End

InsetLayout Flex:AuthorAddrCode
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCode
End

InsetLayout Flex:AuthorAddrCountry
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCountry
End

InsetLayout Flex:EntityXRef
    LyXType Custom
    HTMLTag div
    LabelString EntityXRef
End

InsetLayout Flex:BibXML
    LyXType Custom
    HTMLTag div
    LabelString BibXML
End

InsetLayout Flex:EmbeddedBibXML
    LyXType Custom
    HTMLTag div
    LabelString EmbeddedBibXML
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman cmr
\font_sans cmss
\font_typewriter cmtt
\font_default_family ttdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Public Key-Based Kerberos Cross Realm Path Traversal Protocol Using Kerberized
 Certification Authorities (kx509) and PKINIT
\end_layout

\begin_layout Standard
\begin_inset Flex DocName
status open

\begin_layout Plain Layout
draft-williams-kitten-krb5-pkcross-04
\end_layout

\end_inset


\begin_inset Flex IPR
status open

\begin_layout Plain Layout
trust200902
\end_layout

\end_inset


\begin_inset Flex IntendedStatus
status open

\begin_layout Plain Layout
std
\end_layout

\end_inset


\begin_inset Flex TitleAbbrev
status open

\begin_layout Plain Layout
PKCROSS
\end_layout

\end_inset


\begin_inset Flex IETFArea
status open

\begin_layout Plain Layout
Security Area
\end_layout

\end_inset


\begin_inset Flex XML2RFCKeyword
status open

\begin_layout Plain Layout
Internet-Draft
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI TOC
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\begin_inset Flex PI SymRefs
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\begin_inset Flex PI TOCIndent
status open

\begin_layout Plain Layout
no
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
comments="yes"
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
inline="yes"
\end_layout

\end_inset


\end_layout

\begin_layout Author
Nicolas Williams
\begin_inset Flex AuthorOrg
status open

\begin_layout Plain Layout
Cryptonector, LLC
\end_layout

\end_inset


\begin_inset Flex AuthorOrgAbbrev
status open

\begin_layout Plain Layout
Cryptonector
\end_layout

\end_inset


\begin_inset Flex AuthorEmailAddr
status open

\begin_layout Plain Layout
nico@cryptonector.com
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
This document specifies a protocol for obtaining cross-realm Kerberos tickets
 using existing, related protocols: kerberized certification authorities
 (kx509) and public key cryptography initial authentication in Kerberos
 (PKINIT).
 The resulting protocol has a number of desirable properties, primarily
 that it allows Kerberos to scale to large numbers of realms.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Kerberos 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4120
\end_layout

\end_inset

 supports meshes of many realms.
 The individual relationships between realms must be manually keyed, usually
 with keys derived from passwords.
 A full mesh wouldn't scale, therefore the protocol calls for hierarchical
 trust hierarchies.
 In practice non-hierarchical but also non-fully-meshed relationships are
 used.
\end_layout

\begin_layout Standard
These manually-exchanged keys are very difficult to rollover safely, and
 when they are changed the result is often outages -- controlled outages
 where foreseen, but outages nonetheless.
\end_layout

\begin_layout Standard
Manual cross-realm keying does not scale, and has very poor security properties.
 We seek to remediate this using public key cryptography, building on existing
 Kerberos specifications.
\end_layout

\begin_layout Standard
Many years ago there was a proposal for exchanging cross-realm keys using
 a public key infrastructure (PKI) 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5280
\end_layout

\end_inset

; that proposal went by the name 
\begin_inset Quotes eld
\end_inset

PKCROSS
\begin_inset Quotes erd
\end_inset

.
 We appropriate that long-dead proposal's name, but the protocol specified
 here is very different from the original proposal.
\end_layout

\begin_layout Subsection
Conventions used in this document
\end_layout

\begin_layout Standard
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
 "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are
 to be interpreted as described in 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2119
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
The PKCROSS Protocol
\end_layout

\begin_layout Standard
We provide two variants of the PKCROSS protocol: one that is client-driven,
 and another that is driven by a Ticket Granting Service (TGS) on behalf
 of its clients.
 The latter is based on the former, with the TGS acting as a client.
 We begin with the client-driven case.
 DNS-Based Authentication of Named Entities (DANE) 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC6698
\end_layout

\end_inset

 can and should be used for realm CA certificate validation.
\end_layout

\begin_layout Subsection
Client-Driven PKCROSS
\end_layout

\begin_layout Standard
A Kerberos client in with a ticket-granting ticket (TGT) for any one source
 realm (usually but not necessarily the client's own realm) wishing to acquire
 a TGT for a destination realm may use this protocol instead of the traditional
 cross-realm ticket-granting service (TGS) exchanges as follows:
\end_layout

\begin_layout Enumerate
Generate private key to a public key cryptosystem;
\end_layout

\begin_layout Enumerate
Request a certificate from the kx509 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC6717
\end_layout

\end_inset

 service run by the source realm;
\end_layout

\begin_layout Enumerate
Request a TGT from the destination realm using PKINIT 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4556
\end_layout

\end_inset

 and the client certificate obtained in step #2.
\end_layout

\begin_layout Standard
If the destination realm issues the requested Ticket then it SHOULD include
 the client's certificate in an AD-CLIENT-CERTIFICATE authorization-data
 element, and it MUST do so if it does not validate the client's certificate
 to an acceptable trust anchor.
 The AD-CLIENT-CERTIFICATE authorization-data MUST be in a KDC-signed authorizat
ion-data container [XXX add reference to CAMMAC].
\end_layout

\begin_layout RevisionRemark
QUESTION: Should the PKINIT request in step #3 be a TGS-REQ with PKINIT
 pre-auth data?
\end_layout

\begin_layout RevisionRemark
QUESTION: Should the PKINIT request in step #3 be required to be used within
 a FAST tunnel?
\end_layout

\begin_layout Subsection
TGS-Driven PKCROSS
\end_layout

\begin_layout Standard
A TGS can bootstrap ephemeral cross-realm trust principals on behalf of
 its clients.
 This allows the cost of PKCROSS to be amortized over many clients, and
 it allows participation by clients that do not support client-driven PKCROSS
 (or whose PKCROSS requests are rejected by the target).
\end_layout

\begin_layout Standard
In this mode the TGS uses the client-driven PKCROSS protocol, modified as
 follows:
\end_layout

\begin_layout Itemize
the TGS's client certificate MUST have an id-pkinit-san Subject Alternative
 Name (SAN) identifying the source TGS as krbtgt/SOURCE@SOURCE
\end_layout

\begin_layout Itemize
the TGS's client certificate MUST have an Extended Key Usage (EKU) of id-pkcross
-issuer (TBD)
\end_layout

\begin_layout Standard
The resulting TGT -which we shall term an 
\begin_inset Quotes eld
\end_inset

issuer TGT
\begin_inset Quotes erd
\end_inset

 (ITGT)- and its session key can then be used by the source TGS to create
 cross-realm TGTs for the source-to-target trust principal (
\begin_inset Quotes eld
\end_inset

krbtgt/TARGET@SOURCE
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Standard
This ITGT will be used to mint tickets as described below.
\end_layout

\begin_layout Subsubsection
Issuing cross-realm TGTs issued for PKCROSS-keyed cross-realm TGS principals
\end_layout

\begin_layout Standard
Cross-realm TGTs issued by a source TGS using an ITGT will not be quite
 like normal Kerberos Tickets: their encrypted part contains an AP-REQ using
 the ITGT acquired by the source TGS, and this AP-REQ is 
\begin_inset Quotes eld
\end_inset

encrypted
\begin_inset Quotes erd
\end_inset

 with the null enctype, The AP-REQ's Authenitcator MUST contain an authorization
-data element that carries a) the name of the client principal, b) the session
 key that the client should be using with the cross-realm TGTs issued.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 AD-PKCROSS-TGT-INFO ::= SEQUENCE {
\end_layout

\begin_layout Plain Layout

     cname [0] Principal,    -- the client's realm is the
\end_layout

\begin_layout Plain Layout

                             -- crealm from the ITGT's EncTicketPart
\end_layout

\begin_layout Plain Layout

     key   [1] EncryptionKey
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
AD-PKCROSS-TGT-INFO
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Handling impatient clients
\end_layout

\begin_layout Standard
Because the process of acquiring an ITGT might be slow, a TGS doing so on
 behalf of a client could use a mechanism for instructing the client to
 be patient.
 Existing clients would not handler a new error code by waiting, therefore
 there is not much that can be done to keep an impatient client from retrying
 at another KDC.
\end_layout

\begin_layout Standard
The existing KDC_ERR_SVC_UNAVAILABLE error code cannot be used as often
 this causes the client to immediately retry the request at another KDC.
 A new error code for indicating estimated time to completion of request
 would be handy, but out of scope for this document.
\end_layout

\begin_layout Standard
Note that there is a denial of service (DoS) attack by clients on willing
 source KDCs: the clients can ask the KDCs to acquire cross-realm ITGTs
 for many target realms.
 Ideally the quality of service for the Kerberos authentication service
 (AS) with PKINIT (and/or other slow pre-authentication mechanisms) should
 be separate from that of the Kerberos TGS co-located with it, and the PKCROSS-c
apable TGS as well, so as to be able to throttle low-priority requests when
 under load.
\end_layout

\begin_layout Subsection
Stapled DANE
\end_layout

\begin_layout RevisionRemark
TBD.
 We should use Google's serialization of DNS RRsets needed for DANE validation.
 We will need a label for the TLSA RRs for kx509 issuers.
\end_layout

\begin_layout Subsection
Validation
\end_layout

\begin_layout Standard
KDCs processing PKINIT requests crossing realms MUST apply either or both
 of:
\end_layout

\begin_layout Itemize
PKIX certificate validation
\end_layout

\begin_layout Itemize
DANE certificate validation
\end_layout

\begin_layout Standard
KDCs MUST reject PKINIT requests from clients of foreign realms whose certificat
es cannot be validated, unless the client request the anonymous principal
 name in the target's realm.
\end_layout

\begin_layout Subsection
Transit Path
\end_layout

\begin_layout Standard
The combined Kerberos/PKIX/DNSSEC transit path MUST be represented in any
 tickets issued using PKCROSS (see below).
 As usual, each realm's KDCs in the mix can set the transit policy checked
 flag if a client's transit path is acceptable per the realm's KDCs' local
 policy.
\end_layout

\begin_layout Standard
Two validation mechanisms are available: all PKIX 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5280
\end_layout

\end_inset

 validation methods, and DANE 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC6698
\end_layout

\end_inset

.
 DANE validation records SHOULD be stapled onto the client certificates
 by the issuing kx509 CA; alternatively clients can staple DANE validation
 records onto their PKINIT requests using an authorization-data element,
 AD-PKINIT-CLIENT-DANE.
\end_layout

\begin_layout Standard
Additionally, when PKIX certificate validation is used, the trust path should
 be encoded in an AD-INITIAL-VERIFIED-CAS authorization data element, per-PKINIT.
\end_layout

\begin_layout Subsubsection
Transit path representation
\end_layout

\begin_layout Standard
The notional transit path for a ticket issued by a target realm's KDCs includes:
\end_layout

\begin_layout Itemize
the source realm (never expressed in the 'transited' field of Kerberos Tickets)
\end_layout

\begin_layout Itemize
all realms in the ITGT's transited field (in the TGS-driven PKCROSS case)
\end_layout

\begin_layout Itemize
all issuers in the validation path for the kx509-issued certificate, which
 are
\end_layout

\begin_deeper
\begin_layout Itemize
all issuers in the certificate's PKIX validation path when PKIX validation
 is used
\end_layout

\begin_layout Itemize
all DNS zone domainnames transited from the source realm's domainname to
 the root zone
\end_layout

\end_deeper
\begin_layout Itemize
the target realm (also never expressed in the 'transited' field)
\end_layout

\begin_layout Standard
When using DANE for validation of the issuer's certificate the target SHOULD
 represent the transit path as hierarchical from the source realm's domain
 to the root domain, then direct from there to the target's realm.
\end_layout

\begin_layout Standard
The notional transit path for a given client principal MUST be encoded as
 usual, using the Kerberos X.500 and domain-style representations of PKIX
 issuer names and DNS domainnames as faithfully to the original as possible.
\end_layout

\begin_layout RevisionRemark
QUESTION: Do we need a 100% faithful representation of the transit path?
\end_layout

\begin_layout Subsection
Exchange of Long-Term Cross-Realm Symmetric Keys
\end_layout

\begin_layout Standard
A KDC can acquire a TGT using PKCROSS whose session key then becomes the
 long-lived, persistent symmetric key for a cross-realm principal from the
 source realm to the target realm (
\begin_inset Quotes eld
\end_inset

krbtgt/TARGET@SOURCE
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Standard
To do this the KDC MUST set the USE-SESSION-KEY-AS-REALM-KEY KDCOptions
 flag (TBD) in its request for an ITGT from the target realm.
 As usual, the target realm's KDC MUST validate the client principal's certifica
te.
 The target realm's KDC MUST NOT return a TGS-REP until the new principal
 is committed to its principal database, and MUST set the endtime of the
 ITGT to the time at which the source realm may begin using the new symmetricall
y-keyed principal.
\end_layout

\begin_layout Standard
The source realm's KDC MUST commit the new principal to its principal database
 and MUST NOT begin using the new principal's long-term keys until the new
 principal is available to all KDCs for the source realm and the endtime
 of the ITGT passes.
\end_layout

\begin_layout Standard
Target KDCs SHOULD require manual pre-approval of such new cross-realm principal
s.
 In small, isolated environments a KDC MAY be configured to pre-approve
 all such new principals.
\end_layout

\begin_layout Standard
By default, source KDCs SHOULD NOT automatically request long-term keying
 of cross-realm principals.
\end_layout

\begin_layout Section
Security Properties
\end_layout

\begin_layout Standard
The proposed PKCROSS protocol has several useful properties described below.
\end_layout

\begin_layout Subsection
Automatic Cross-Realm Keying
\end_layout

\begin_layout Standard
No more manual keying of cross-realm principals via exchanging passwords
 in-person on a telephone call (or similar).
\end_layout

\begin_layout Subsection
Scalability
\end_layout

\begin_layout Standard
Kerberos with commonplace symmetrically-keyed hierarchical cross-real trusts
 can scale to a large universe of realms, but only if there are top-level
 realms that are willing to pair-wise trust and 
\begin_inset Quotes eld
\end_inset

child
\begin_inset Quotes erd
\end_inset

 realms.
 Such top-level realms do not exist in practice, leading to an O(N^2) scaling
 problem for most two-label realms.
\end_layout

\begin_layout Standard
Leveraging a PKI, such as a PKIX PKI 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5280
\end_layout

\end_inset

 or a DNSSEC PKI 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4033
\end_layout

\end_inset

 removes the need for either top-level realms (which are not likely to ever
 be operated as commercial or even non-profit entities) or O(N^2) pair-wise
 cross-realm symmetric keying.
\end_layout

\begin_layout Standard
The cost of this is having to add PKI trust paths to Kerberos trust paths
 (though the resulting trust path length need not be much different than
 before).
\end_layout

\begin_layout Subsection
Privacy Protection relative to home realm
\end_layout

\begin_layout Standard
This protocol protects the privacy of client principals vis-a-vis their
 home realms, when the clients use the client-driven PKCROSS protocol.
\end_layout

\begin_layout Standard
This feature is generally and naturally available in PKI, and as this protocol
 is based on a kerberized certification authority, this protocol inherits
 this privacy feature from PKI.
\end_layout

\begin_layout Standard
The realms visited by the client may, of course, inform the client's home
 realm, but in the event that they don't, the client does gain this small
 measure of privacy.
 Of course, the privacy-conscious client SHOULD attach an OCSP Response
 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC6960
\end_layout

\end_inset

 to its PKINIT request, per 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4557
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Application Programming Interface Considerations
\end_layout

\begin_layout Standard
Improved scalability for Kerberos realm traversal implies larger Kerberos
 universes, and the larger a universe of trust the more important it is
 to have useful and expressive local policy for evaluating the trustworthiness
 of any given transit path.
 Because in most applications local policy should be a component external
 to the application, there is mostly no impact on APIs here.
 However, an implementation may wish to provide applications with interfaces
 for specifying policies, either named or by value.
\end_layout

\begin_layout Subsection
GSS-API Considerations
\end_layout

\begin_layout Standard
The naming attributes 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC6680
\end_layout

\end_inset

 defined in 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
I-D.williams-kitten-generic-naming-attributes
\end_layout

\end_inset

 provide access to information about transit paths.
\end_layout

\begin_layout Standard
Note that information about how PKCROSS was used to establish symmetrically-keye
d cross-realm principals is lost and will not appear in the transit path
 in tickets issued by KDCs reached via such cross-realm principals.
\end_layout

\begin_layout Section
Security Considerations
\end_layout

\begin_layout RevisionRemark
All the security considerations of Kerberos and PKI apply.
 Security considerations are discussed throughout this document.
\end_layout

\begin_layout Standard
Scaling up the universe of realms reachable via any trust path necessarily
 dilutes trust overall, but not for specific paths.
 On the other hand, by shortening transit path lengths trust can be improved,
 though some short transit paths will have been symmetrically keyed using
 this PKCROSS protocol and therefore will be longer than they appear to
 be.
 These are subjective notions of trust, of course.
\end_layout

\begin_layout Subsection
Loss of Cross-Realm Principal Trust Establishment Information
\end_layout

\begin_layout Standard
Once a cross-realm principal is symmetrically keyed the transit path used
 to automatically key that principal will no longer appear in subsequent
 cross-realm tickets issued by the target.
\end_layout

\begin_layout Standard
The Kerberos transit path encodes only realm names (including X.500-style
 names, thus PKIX certificate subject and issuer names), and lacks any public
 key information that might be useful for pinning.
 However, the certificate validation path for each realm in a transit path
 SHOULD be included in the transit path.
\end_layout

\begin_layout Subsection
On the Need for a Common Transit Path Policy Language
\end_layout

\begin_layout Standard
There are no standard ways to express authorization policies for trust transit
 paths for either Kerberos nor PKI.
 A standard language for this would be extremely useful.
 Such a language should allow for the expression of policies for both, clients
 and services.
 Such a language should allow for the expression of complex realm/domain/other
 naming, and should allow for HSTS-style pinning [add references -Nico].
 Such a language should allow for multiple paths where desired, and should
 allow for more than path rejection: it should also allow for reducing the
 entitlements assigned to a peer/realm for authorization purposes.
\end_layout

\begin_layout Standard
The need for a standard transit path policy expression language is not new,
 and such a language is broadly and generally needed.
 Therefore such a language is outside this document's scope.
\end_layout

\begin_layout Section
IANA Considerations
\end_layout

\begin_layout RevisionRemark
Allocate the new KDCOptions flag (USE-SESSION-KEY-AS-REALM-KEY) and authorizatio
n-data element (AD-CLIENT-CERTIFICATE), as well as the new EKU id-pkcross-issuer.
\end_layout

\begin_layout Section
Acknowledgements
\end_layout

\begin_layout Standard
Although the author arrived at this 
\begin_inset Quotes eld
\end_inset

kx509 + PKINIT == PKCROSS
\begin_inset Quotes erd
\end_inset

 idea independently, it is not an original idea.
 Henry Hotz and Jeffrey Altman each conceived the same idea years earlier.
 It is a relatively obvious idea when taking into account efforts to bridge
 disparate security mechanisms and credentials infrastructures.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:References"

\end_inset

Normative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2119"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4120"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4120.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4556"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4556.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4557"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4557.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5280"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc6680"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6680.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc6698"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6698.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc6717"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6717.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "I-D.williams-kitten-generic-naming-attributes"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.williams-kitten-generic-naming-attributes.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Informative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4033"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc6960"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6960.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
