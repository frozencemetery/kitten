#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass docbook
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
Format 31

InsetLayout Flex:PI_Strict
    LyXType Custom
    HTMLTag div
    LabelString PI_Strict
End

InsetLayout Flex:PI
    LyXType Custom
    HTMLTag div
    LabelString PI
End

InsetLayout Flex:PI_SymRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SymRefs
End

InsetLayout Flex:PI_SortRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SortRefs
End

InsetLayout Flex:PI_TOC
    LyXType Custom
    HTMLTag div
    LabelString PI_TOC
End

InsetLayout Flex:PI_TOCIndent
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCIndent
End

InsetLayout Flex:PI_TOCDepth
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCDepth
End

InsetLayout Flex:PI_TOCNarrow
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCNarrow
End

InsetLayout Flex:PI_TOCCompact
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCCompact
End

InsetLayout Flex:PI_TOCAppendix
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCAppendix
End

InsetLayout Flex:DocName
    LyXType Custom
    HTMLTag div
    LabelString DocName
End

InsetLayout Flex:IntendedStatus
    LyXType Custom
    HTMLTag div
    LabelString IntendedStatus
End

InsetLayout Flex:Updates
    LyXType Custom
    HTMLTag div
    LabelString Updates
End

InsetLayout Flex:Obsoletes
    LyXType Custom
    HTMLTag div
    LabelString Obsoletes
End

InsetLayout Flex:SeriesNo
    LyXType Custom
    HTMLTag div
    LabelString SeriesNo
End

InsetLayout Flex:RFCNumber
    LyXType Custom
    HTMLTag div
    LabelString RFCNumber
End

InsetLayout Flex:IPR
    LyXType Custom
    HTMLTag div
    LabelString IPR
End

InsetLayout Flex:IETFArea
    LyXType Custom
    HTMLTag div
    LabelString IETFArea
End

InsetLayout Flex:IETFWorkingGroup
    LyXType Custom
    HTMLTag div
    LabelString IETFWorkingGroup
End

InsetLayout Flex:XML2RFCKeyword
    LyXType Custom
    HTMLTag div
    LabelString XML2RFCKeyword
End

InsetLayout Flex:TitleAbbrev
    LyXType Custom
    HTMLTag div
    LabelString TitleAbbrev
End

InsetLayout Flex:AuthorRole
    LyXType Custom
    HTMLTag div
    LabelString AuthRole
End

InsetLayout Flex:AuthorInitials
    LyXType Custom
    HTMLTag div
    LabelString AuthInitials
End

InsetLayout Flex:AuthorSurname
    LyXType Custom
    HTMLTag div
    LabelString AuthSurname
End

InsetLayout Flex:AuthorOrg
    LyXType Custom
    HTMLTag div
    LabelString AuthOrg
End

InsetLayout Flex:AuthorOrgAbbrev
    LyXType Custom
    HTMLTag div
    LabelString AuthOrgAbbrev
End

InsetLayout Flex:AuthorEmailAddr
    LyXType Custom
    HTMLTag div
    LabelString AuthEmailAddr
End

InsetLayout Flex:AuthorAddrStreet
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrStreet
End

InsetLayout Flex:AuthorAddrCity
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCity
End

InsetLayout Flex:AuthorAddrRegion
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrRegion
End

InsetLayout Flex:AuthorAddrCode
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCode
End

InsetLayout Flex:AuthorAddrCountry
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCountry
End

InsetLayout Flex:EntityXRef
    LyXType Custom
    HTMLTag div
    LabelString EntityXRef
End

InsetLayout Flex:BibXML
    LyXType Custom
    HTMLTag div
    LabelString BibXML
End

InsetLayout Flex:EmbeddedBibXML
    LyXType Custom
    HTMLTag div
    LabelString EmbeddedBibXML
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman cmr
\font_sans cmss
\font_typewriter cmtt
\font_default_family ttdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Negotiation of Extra Security Context Tokens for Kerberos V5 Generic Security
 Services Mechanism
\end_layout

\begin_layout Standard
\begin_inset Flex DocName
status open

\begin_layout Plain Layout
draft-williams-kitten-krb5-extra-rt-02
\end_layout

\end_inset


\begin_inset Flex IPR
status open

\begin_layout Plain Layout
trust200902
\end_layout

\end_inset


\begin_inset Flex IntendedStatus
status open

\begin_layout Plain Layout
std
\end_layout

\end_inset


\begin_inset Flex TitleAbbrev
status open

\begin_layout Plain Layout
Kerberos Extra AP
\end_layout

\end_inset


\begin_inset Flex IETFArea
status open

\begin_layout Plain Layout
Security Area
\end_layout

\end_inset


\begin_inset Flex XML2RFCKeyword
status open

\begin_layout Plain Layout
Internet-Draft
\end_layout

\end_inset


\begin_inset Flex Updates
status open

\begin_layout Plain Layout
4121
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI TOC
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\begin_inset Flex PI SymRefs
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\begin_inset Flex PI TOCIndent
status open

\begin_layout Plain Layout
no
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
comments="yes"
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
inline="yes"
\end_layout

\end_inset


\end_layout

\begin_layout Author
Nicolas Williams
\begin_inset Flex AuthorOrg
status open

\begin_layout Plain Layout
Cryptonector, LLC
\end_layout

\end_inset


\begin_inset Flex AuthorOrgAbbrev
status open

\begin_layout Plain Layout
Cryptonector
\end_layout

\end_inset


\begin_inset Flex AuthorEmailAddr
status open

\begin_layout Plain Layout
nico@cryptonector.com
\end_layout

\end_inset


\end_layout

\begin_layout Author
Roland Charles Dowdeswell
\begin_inset Flex AuthorOrg
status open

\begin_layout Plain Layout
Dowdeswell Security Architecture
\end_layout

\end_inset


\begin_inset Flex AuthorOrgAbbrev
status open

\begin_layout Plain Layout
Dowdeswell Security Architecture
\end_layout

\end_inset


\begin_inset Flex AuthorEmailAddr
status open

\begin_layout Plain Layout
elric@imrryr.org
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
This Internet-Draft proposes an extension to the Kerberos V5 security mechanism
 for the Generic Security Services Application Programming Interface (GSS-API)
 for using extra security context tokens in order to recover from certain
 errors.
 Other benefits include: user-to-user authentication, authenticated errors,
 replay cache avoidance, and others.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The Kerberos V5 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4120
\end_layout

\end_inset

 AP protocol, and therefore the Kerberos V5 GSS mechanism 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4121
\end_layout

\end_inset

 security context token exchange, is a one-round trip protocol.
 Occasionally there are errors that the protocol could recover from by using
 an additional round trip, but until now there was no way to execute such
 an additional round trip.
 For many application protocols the failure of the Kerberos AP protocol
 is fatal, requiring closing TCP connections and starting over; often there
 is no automatic recovery.
 This document proposes a negotiation of additional security context tokens
 for automatic recovery from certain errors.
 This is done in a backwards-compatible way, thus retaining the existing
 mechanism OID for the Kerberos V5 GSS mechanism.
 Additionally we add support for user-to-user authentication and authenticated
 errors, and provide a way to avoid the need for replay caching.
\end_layout

\begin_layout Subsection
Conventions used in this document
\end_layout

\begin_layout Standard
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
 "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are
 to be interpreted as described in 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2119
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Negotiation
\end_layout

\begin_layout Standard
We introduce the following new protocol elements.
 A partial ASN.1 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
CCITT.X680.2002
\end_layout

\end_inset

 module (for inclusion in the base Kerberos ASN.1 module) is given in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:ASN.1-for-New"

\end_inset

, and references to its contents are made below.
\end_layout

\begin_layout Itemize
a new ap-options flag for use in the clear-text part of AP-REQs to indicate
 the desire for an extra round trip if need be;
\end_layout

\begin_layout Itemize
a new Authorization-Data element for use in Authenticators for quoting back
 a challenge nonce from the acceptor;
\end_layout

\begin_layout Itemize
a new PDU: KRB-ERROR2, with additional fields and support for authenticated
 errors.
\end_layout

\begin_layout Standard
No new interface is needed for GSS-API applications to use this feature.
\end_layout

\begin_layout Standard
To use this feature, the Kerberos GSS mechanism MUST act as follows:
\end_layout

\begin_layout Itemize
To request this feature, initiators SHALL add the new ap-options flag to
 their AP-REQs.
\end_layout

\begin_layout Itemize
Acceptors that wish to request an additional security context token can
 only do so when initiators indicate support for it, and MUST do so by returning
 a KRB-ERROR2.
 The encrypted part of the KRB-ERROR2 SHALL be encrypted in one of the following
 keys: the sub-session key from the AP-REQ's Authenticator if it could be
 decrypted, else the session key from the Ticket, if it could be decrypted,
 else the null enc-type/key.
\end_layout

\begin_layout Itemize
The KRB-ERROR2 in this case SHALL have a the continue-needed e-flag set
 when the acceptor is willing to consume another security context token
 from the initiator; the acceptor SHALL also return GSS_S_CONTINUE_NEEDED
 to the application in this case.
\end_layout

\begin_layout Itemize
Initiators that request this feature and receive a KRB-ERROR2 SHOULD attempt
 to recover.
\end_layout

\begin_layout Itemize
Initiators that request this feature and receive a KRB-ERROR2 with the continue-
needed e-flag set SHOULD attempt to recover and MAY produce a token to send
 to the acceptor: either a KRB-ERROR2 if the initiator failed to recover,
 or a new AP-REQ (with the traditional GSS-API pseudo-ASN.1 mechanism OID
 header).
\end_layout

\begin_deeper
\begin_layout Itemize
In the successful recovery case the initiator MUST quote the nonce from
 the KRB-ERROR2 using an AD-CHALLENGE-RESPONSE-NONCE (see below) authorization
 data element.
\end_layout

\end_deeper
\begin_layout Itemize
When it consumes a KRB-ERROR2, GSS_Init_sec_context() can return an error
 (GSS_S_FAILURE), or attempt recovery and output a new AP-REQ security context
 token.
\end_layout

\begin_deeper
\begin_layout Itemize
When GSS_Init_sec_context() outputs a new AP-REQ security context token,
 it SHALL return GSS_S_CONTINUE_NEEDED if the application requested mutual
 authentication, else it SHALL return GSS_S_COMPLETE.
\end_layout

\begin_layout Itemize
When GSS_Init_sec_context() returns an error and the acceptor is awaiting
 a security context token, GSS_Init_sec_context() MAY generate a KRB-ERROR
 to send to the acceptor.
\end_layout

\end_deeper
\begin_layout Itemize
Acceptors MUST reject additional AP-REQs which do not have a challenge response
 nonce matching the one sent by the acceptor in the previous KRB-ERROR2.
\end_layout

\begin_layout Itemize
Acceptors MUST reject initial security context tokens that contain a challenge
 response nonce.
\end_layout

\begin_layout Subsection
Error Recovery
\end_layout

\begin_layout Standard
The following Kerberos errors can be recovered from automatically using
 this protocol:
\end_layout

\begin_layout Itemize
KRB_AP_ERR_TKT_EXPIRED: the initiator should get a new service ticket;
\end_layout

\begin_layout Itemize
KRB_AP_ERR_TKT_NYV: the initiator should get a new service ticket;
\end_layout

\begin_layout Itemize
KRB_AP_ERR_REPEAT: the initiator should build a new AP-REQ;
\end_layout

\begin_layout Itemize
KRB_AP_ERR_SKEW: the initiator should build a new AP-REQ with time corrected
 for the offset between the initiator's and acceptor's clocks;
\end_layout

\begin_layout Itemize
KRB_AP_ERR_BADKEYVER: the initiator should get a new service ticket;
\end_layout

\begin_layout Itemize
KRB_AP_PATH_NOT_ACCEPTED: the initiator should get a new service ticket
 using a different transit path;
\end_layout

\begin_layout Itemize
KRB_AP_ERR_INAPP_CKSUM: the initiator should try again with a different
 checksum type.
\end_layout

\begin_layout Standard
Error codes that denote PDU corruption (and/or an active attack) can also
 be recovered from by attempting a new AP-REQ:
\end_layout

\begin_layout Itemize
KRB_AP_ERR_BAD_INTEGRITY
\end_layout

\begin_layout Itemize
KRB_AP_ERR_BADVERSION
\end_layout

\begin_layout Itemize
KRB_AP_ERR_BADMATCH
\end_layout

\begin_layout Itemize
KRB_AP_ERR_MSG_TYPE
\end_layout

\begin_layout Itemize
KRB_AP_ERR_MODIFIED
\end_layout

\begin_layout Standard
Other error codes that may be recovered from:
\end_layout

\begin_layout Itemize
KRB_AP_ERR_BADADDR; the acceptor SHOULD include a list of one or more client
 network addresses as reported by the operating system, but if the acceptor
 does not then the continue-needed e-flag MUST NOT be included and the error
 must be final.
\end_layout

\begin_layout Subsection
Number of Security Context Tokens
\end_layout

\begin_layout Standard
The first AP-REQ may well result in an error; the second should not.
 Therefore acceptors SHOULD return a fatal error when a second error results
 in one security context establishment attempt, except when the first error
 is that the initiator should use user-to-user authentication.
 This limits the maximum number of round trips to two (not user-to-user)
 or three (user-to-user).
\end_layout

\begin_layout Standard
Initiators and acceptors MUST impose some limit on the maximum number of
 security context tokens.
 For the time being that limit is six.
\end_layout

\begin_layout Standard
An initiator that rejects an additional round trip MUST respond with a KRB-ERROR
2.
\end_layout

\begin_layout Standard
Note that in the user-to-user cases (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:User-to-User-Authentication"

\end_inset

) it's possible to have up to three round trips under normal conditions
 if, for example, the acceptor wishes to avoid the use of replay caches
 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Replay-Cache-Avoidance"

\end_inset

), or if the initiator's clock is too skewed, for example.
\end_layout

\begin_layout Subsection
PROT_READY
\end_layout

\begin_layout Standard
It is REQUIRED that each AP-REQ in a security context token exchange replace
 the sub-session key to be used for PROT_READY per-message tokens.
 This can conceivably cause failure-to-verify/unwrap errors for some application
s (e.g., using datagram transports), but none that they shouldn't have been
 prepared to handle.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sub:ASN.1-for-New"

\end_inset

ASN.1 for New Protocol Elements
\end_layout

\begin_layout Standard
A partial ASN.1 module appears below.
 This ASN.1 is to be used as if it were part of the base Kerberos ASN.1 module
 (see RFC4120), therefore the encoding rules to be used are the Distinguished
 Encoding Rules (DER) 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
CCITT.X690.2002
\end_layout

\end_inset

, and the environment is one of explicit tagging.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 APOptions       ::= KerberosFlags
\end_layout

\begin_layout Plain Layout

         -- reserved(0),
\end_layout

\begin_layout Plain Layout

         -- use-session-key(1),
\end_layout

\begin_layout Plain Layout

         -- mutual-required(2) 
\end_layout

\begin_layout Plain Layout

         -- continue-needed-ok(TBD)
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 ad-continue-nonce     Int32 ::= <TBD>
\end_layout

\begin_layout Plain Layout

        -- ad-value is challenge nonce from KRB-ERROR2
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 KrbErrorEncPartFlags ::= KerberosFlags
\end_layout

\begin_layout Plain Layout

         -- reserved(0)  [XXX cargo cult!]
\end_layout

\begin_layout Plain Layout

         -- use-initiator-subkey(1)
\end_layout

\begin_layout Plain Layout

         -- use-ticket-session-key(2)
\end_layout

\begin_layout Plain Layout

         -- use-null-enctype(3)
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 KRB-ERROR2          ::= [APPLICATION <TBD>] SEQUENCE {
\end_layout

\begin_layout Plain Layout

         pvno            [0] INTEGER (5),
\end_layout

\begin_layout Plain Layout

         msg-type        [1] INTEGER (<TBD>),
\end_layout

\begin_layout Plain Layout

         enc-part-key    [2] KrbErrorEncPartFlags,
\end_layout

\begin_layout Plain Layout

         enc-part        [3] EncryptedData -- EncKRBErrorPart
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 ErrorFlags ::= KerberosFlags
\end_layout

\begin_layout Plain Layout

         -- reserved(0)  [XXX sounds like cargo cult!]
\end_layout

\begin_layout Plain Layout

         -- continue-needed(1)
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 EncKRBErrorPart    ::= [APPLICATION <TBD>] SEQUENCE {
\end_layout

\begin_layout Plain Layout

         challenge-nonce [0] OCTET STRING (16),
\end_layout

\begin_layout Plain Layout

         stime           [1] KerberosTime,
\end_layout

\begin_layout Plain Layout

         susec           [2] Microseconds,
\end_layout

\begin_layout Plain Layout

         error-code      [3] Int32,
\end_layout

\begin_layout Plain Layout

         e-flags         [4] ErrorFlags,
\end_layout

\begin_layout Plain Layout

         e-text          [5] KerberosString OPTIONAL,
\end_layout

\begin_layout Plain Layout

         e-data          [6] OCTET STRING OPTIONAL,
\end_layout

\begin_layout Plain Layout

         e-typed-data    [7] TYPED-DATA OPTIONAL,
\end_layout

\begin_layout Plain Layout

         tgt             [8] Ticket OPTIONAL, -- for user2user
\end_layout

\begin_layout Plain Layout

         ...
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
ASN.1 module (with explicit tagging)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sub:Replay-Cache-Avoidance"

\end_inset

Replay Cache Avoidance
\end_layout

\begin_layout Standard
By using an additional AP-REQ and a challenge/response nonce, this protocol
 is immune to replays of AP-REQ PDUs and does not need a replay cache.
 Acceptor implementations MUST not insert Authenticators from extra round
 trips into a replay cache when there are no other old implementations on
 the same host (and with access to the same acceptor credentials) that ignore
 critical authorization data or which don't know to reject initial AP-REQs
 that contain a challenge response nonce.
\end_layout

\begin_layout Standard
In the replay cache avoidance case where there's no actual error (e.g., time
 skew) the acceptor's KRB-ERROR2 will have KDC_ERR_NONE as the error code,
 with the continue-needed e-flag.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sub:User-to-User-Authentication"

\end_inset

User-to-User Authentication
\end_layout

\begin_layout Standard
There are two user2user authentication cases:
\end_layout

\begin_layout Enumerate
the KDC only allows a service principal to use user2user authentication,
\end_layout

\begin_layout Enumerate
the service principal does not know its long-term keys or otherwise wants
 to use user2user authentication even though the KDC vended a service ticket.
\end_layout

\begin_layout Standard
In the first case the initiator knows this because the KDC returns KDC_ERR_MUST_
USE_USER2USER.
 The initiator cannot make a valid AP-REQ in this case, yet it must send
 an AP-REQ or fail to make even an initial security context token.
 For this case we propose that the initiator make an AP-REQ with a Ticket
 with zero-length enc-part (and null enctype) and a zero-length authenticator
 (and null enctype).
 The acceptor will fail to process the AP-REQ, of course, and SHOULD respond
 with a continue-needed KRB-ERROR2 (using the null enc-type for the enc-part)
 that includes a TGT for the acceptor.
\end_layout

\begin_layout Standard
In the second case the initiator does manage to get a real service ticket
 for the acceptor but the acceptor nonetheless wishes to use user2user authentic
ation.
\end_layout

\begin_layout Standard
In both cases the acceptor responds with a KRB-ERROR2 with the KRB_AP_ERR_USER_T
O_USER_REQUIRED error code and including a TGT for itself.
\end_layout

\begin_layout Standard
In both cases the initiator then does a TGS request with a second ticket
 to get a new, user2user Ticket.
 Then the initiator makes a new AP-REQ using the new Ticket, and proceeds.
\end_layout

\begin_layout Subsubsection
Negotiation Issues for User-to-User Authentication
\end_layout

\begin_layout Standard
Initiator applications that can negotiate security mechanisms and which
 have available an existing user-to-user mechanism 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
I-D.swift-win2k-krb-user2user
\end_layout

\end_inset

 as well as the Kerberos V5 GSS mechanism with the user-to-user extension
 defined here will have a problem: they may end up negotiating the use of
 the Kerberos V5 GSS mechanism and fail to establish a security context
 because the acceptor does not support the features defined in this document,
 but the application might have succeeded if it had selected the user-to-user
 mechanism.
\end_layout

\begin_layout RevisionRemark
Question: how should we address this? We could say 
\begin_inset Quotes eld
\end_inset

give priority to the user-to-user mechanism
\begin_inset Quotes erd
\end_inset

, but in some cases that might require changes to the acceptor side.
\end_layout

\begin_layout Section
Other Requirements, Recommendations, and Non-Requirements
\end_layout

\begin_layout Standard
All error PDUs in an AP exchange where the AP-REQ has the continue-needed-ok
 ap-options flag MUST be KRB-ERROR2 PDUs.
\end_layout

\begin_layout Standard
Whenever an acceptor is able to decrypt the Ticket from an AP-REQ and yet
 wishes or has to output a KRB-ERROR2, then the enc-part of the KRB-ERROR2
 MUST be encrypted in either the initiator's sub-session key (from the Authentic
ator) or the Ticket's session key (if the acceptor could not decrypt the
 Authenticator).
\end_layout

\begin_layout Section
Security Considerations
\end_layout

\begin_layout Standard
This document deals with security.
\end_layout

\begin_layout Standard
There are a number of unauthenticated protocol elements: the continue-needed-ok
 flag that the initiator uses to indicate its willingness to have more than
 one round trip, and some errors.
 This is unavoidable.
\end_layout

\begin_layout Standard
The new KRB-ERROR2 PDU is cryptographically distinguished from the original
 mechanism's acceptor success security context token (AP-REQ).
\end_layout

\begin_layout Standard
Not every KRB-ERROR2 can be integrity protected.
\end_layout

\begin_layout Standard
Because in the base Kerberos V5 GSS-API security mechanism all errors are
 unauthenticated, and because even with this specification some elements
 are unauthenticated, it is possible for an attacker to cause one peer to
 think that the security context token exchange has failed while the other
 thinks it will continue.
 This can cause an acceptor to waste resources while waiting for additional
 security context tokens from the initiator.
 This is not really a new problem, however: acceptor applications should
 already have suitable timeouts on security context establishment.
\end_layout

\begin_layout Section
IANA Considerations
\end_layout

\begin_layout RevisionRemark
Various allocations are required...
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:References"

\end_inset

Normative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2119"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2743"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2743.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2744"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2744.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4120"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4120.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4121"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4121.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "x680"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml2/reference.CCITT.X680.2002.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "x690"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml2/reference.CCITT.X690.2002.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Informative References
\end_layout

\begin_layout Standard
\begin_inset Flex EmbeddedBibXML
status open

\begin_layout Plain Layout
<reference anchor='I-D.swift-win2k-krb-user2user'> <front> <title>User to
 User Kerberos Authentication using GSS-API</title> <author initials='M.'
 surname='Swift' fullname='Michael Swift'> <organization/> </author> <author
 initials='J.' surname='Brezak' fullname='John Brezak'> <organization/> </author>
 <author initials='P.' surname='Moore' fullname='Patrick Moore'> <organization/>
 </author> <date month='February' day='21' year='2011' /> <abstract><t>The
 security model of the web platform has evolved over time to meet the needs
 of new applications and to correct earlier mistakes.
 Although web security has evolved largely organically, the security model
 has converged towards a handful of key concepts.
 This document presents those concepts and provides advice to designers
 of new pieces of the web platform.</t></abstract> </front> <seriesInfo name='Int
ernet-Draft' value='draft-swift-win2k-krb-user2user-03' /> <format type='TXT'
 target='http://www.ietf.org/internet-drafts/draft-swift-win2k-krb-user2user-03.txt
' /> </reference>
\end_layout

\end_inset


\end_layout

\end_body
\end_document
