<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/TR/2001/REC-MathML2-20010221/dtd/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="GENERATOR" content="LyX 2.0.6" />
<meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
<title>Public Key-Based Kerberos Cross Realm Path Traversal Protocol Using Kerberized Certification Authorities (kx509) and PKINIT</title>

<!-- Text Class Preamble -->
<style type="text/css">
div.toc {
margin: 2em 0em;
border-style: solid;
border-width: 2px 0px;
padding: 1em 0em;
}
div.tochead { font-size: x-large; font-weight: bold; }
div.lyxtoc-0 {
margin: 2em 0em 0em 0em;
font-size: xx-large;
font-weight: bold;
}
div.lyxtoc-1 {
margin: 1em 0em 0em 0em;
font-size: x-large;
font-weight: bold;
}
div.lyxtoc-2 {
margin: 0em 0em 0em 1em;
font-size: large;
font-weight: normal;
}
div.lyxtoc-3 { margin: 0em 0em 0em 0.5em; font-size: medium; }
div.lyxtoc-4 { margin: 0em 0em 0em 0.5em; }
div.lyxtoc-5 { margin: 0em 0em 0em 0.5em; }
div.lyxtoc-6 { margin: 0em 0em 0em 0.5em; }
a.tocentry {
text-decoration: none;
color: black;
}
a.tocentry:visited { color: black; }
a.tocarrow {
font-weight: bold;
text-decoration: none;
color: #909090;
}
a.tocarrow:visited { color: #C0C0C0; }
</style>

<!-- Preamble Snippets -->

<!-- Layout-provided Styles -->
<style type='text/css'>
h1.title {
font-size: x-large;
margin-bottom: 1ex;
text-align: center;

}
div.standard {
text-align: left;

}
div.plain_layout {
text-align: left;

}
div.author {
font-size: large;
margin-top: 1.3ex;
margin-bottom: 0.7ex;
text-align: center;

}
div.abstract {
font-size: small;
margin-top: 0.7ex;
margin-bottom: 0.7ex;
margin-left: 3ex;
margin-right: 3ex;
text-align: left;

}
div.abstract_label {
font-weight: bold;
font-size: large;
text-align: center;

}

div.abstract {
margin: 4ex;
}
div.abstract_item {
font-size: small;
padding-top: 1ex;
}
div.abstract_label {
font-weight: bold;
}
h2.section {
font-weight: bold;
font-size: x-large;
margin-top: 1.3ex;
margin-bottom: 0.7ex;
text-align: left;

}
h3.subsection {
font-weight: bold;
font-size: large;
margin-top: 0.9ex;
margin-bottom: 0.5ex;
text-align: left;

}
ol.enumerate {
margin-top: 0.7ex;
margin-bottom: 0.7ex;
margin-left: 3ex;
text-align: left;

}
div.revisionremark {
text-align: left;

}
ul.itemize {
margin-top: 0.7ex;
margin-bottom: 0.7ex;
margin-left: 3ex;
text-align: left;

}
h4.subsubsection {
font-weight: bold;
font-size: medium;
margin-top: 0.7ex;
margin-bottom: 0.4ex;
text-align: left;

}
div.flex_docname {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_ipr {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_intendedstatus {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_titleabbrev {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_ietfarea {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_xml_rfckeyword {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi_toc {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi_symrefs {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi_tocindent {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_authororg {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_authororgabbrev {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_authoremailaddr {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_entityxref {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.float {
border: 2px solid black;
text-align: center;
}
div.listings {
font-family: monospace;
}
div.float-caption {
text-align: center;
border: 2px solid black;
padding: 1ex;
margin: 1ex;
}
div.flex_bibxml {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
</style>
</head>
<body>
<h1 class="title"><a id='magicparlabel-1' />
Public Key-Based Kerberos Cross Realm Path Traversal Protocol Using Kerberized Certification Authorities (kx509) and PKINIT</h1>
<div class="standard"><a id='magicparlabel-2' />
<div class="flex_docname"><div class="plain_layout"><a id='magicparlabel-6' />
draft-williams-kitten-krb5-pkcross-03</div>
</div><div class="flex_ipr"><div class="plain_layout"><a id='magicparlabel-10' />
trust200902</div>
</div><div class="flex_intendedstatus"><div class="plain_layout"><a id='magicparlabel-14' />
std</div>
</div><div class="flex_titleabbrev"><div class="plain_layout"><a id='magicparlabel-18' />
PKCROSS</div>
</div><div class="flex_ietfarea"><div class="plain_layout"><a id='magicparlabel-22' />
Security Area</div>
</div><div class="flex_xml_rfckeyword"><div class="plain_layout"><a id='magicparlabel-26' />
Internet-Draft</div>
</div></div>

<div class="standard"><a id='magicparlabel-27' />
<div class="flex_pi_toc"><div class="plain_layout"><a id='magicparlabel-31' />
yes</div>
</div><div class="flex_pi_symrefs"><div class="plain_layout"><a id='magicparlabel-35' />
yes</div>
</div><div class="flex_pi_tocindent"><div class="plain_layout"><a id='magicparlabel-39' />
no</div>
</div><div class="flex_pi"><div class="plain_layout"><a id='magicparlabel-43' />
comments="yes"</div>
</div><div class="flex_pi"><div class="plain_layout"><a id='magicparlabel-47' />
inline="yes"</div>
</div></div>

<div class="author"><div class="author_item"><a id='magicparlabel-48' />
Nicolas Williams<div class="flex_authororg"><div class="plain_layout"><a id='magicparlabel-52' />
Cryptonector, LLC</div>
</div><div class="flex_authororgabbrev"><div class="plain_layout"><a id='magicparlabel-56' />
Cryptonector</div>
</div><div class="flex_authoremailaddr"><div class="plain_layout"><a id='magicparlabel-60' />
nico@cryptonector.com</div>
</div></div>
</div>

<div class="abstract"><div class="abstract_label">Abstract</div>
<div class="abstract_item"><a id='magicparlabel-61' />
This document specifies a protocol for obtaining cross-realm Kerberos tickets using existing, related protocols: kerberized certification authorities (kx509) and public key cryptography initial authentication in Kerberos (PKINIT). The resulting protocol has a number of desirable properties, primarily that it allows Kerberos to scale to large numbers of realms.</div>
</div>
<div class="standard"><a id='magicparlabel-62' />
</div>
<div class='toc'><div class='tochead part_'>Table of Contents</div>

<div class='lyxtoc-1'><a href='#magicparlabel-63' class='tocentry'>1 Introduction</a> <a href='#magicparlabel-63' class='tocarrow'>&gt;</a>

<div class='lyxtoc-2'><a href='#magicparlabel-76' class='tocentry'>1.1 Conventions used in this document</a> <a href='#magicparlabel-76' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-82' class='tocentry'>2 The PKCROSS Protocol</a> <a href='#magicparlabel-82' class='tocarrow'>&gt;</a>

<div class='lyxtoc-2'><a href='#magicparlabel-88' class='tocentry'>2.1 Client-Driven PKCROSS</a> <a href='#magicparlabel-88' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-104' class='tocentry'>2.2 TGS-Driven PKCROSS</a> <a href='#magicparlabel-104' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-111' class='tocentry'>2.2.1 Issuing cross-realm TGTs issued for PKCROSS-keyed cross-realm TGS principals</a> <a href='#magicparlabel-111' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-3'><a href='#magicparlabel-132' class='tocentry'>2.2.2 Handling impatient clients</a> <a href='#magicparlabel-132' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-136' class='tocentry'>2.3 Stapled DANE</a> <a href='#magicparlabel-136' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-138' class='tocentry'>2.4 Validation</a> <a href='#magicparlabel-138' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-143' class='tocentry'>2.5 Transit Path</a> <a href='#magicparlabel-143' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-155' class='tocentry'>2.5.1 Transit path representation</a> <a href='#magicparlabel-155' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-166' class='tocentry'>2.6 Exchange of Long-Term Cross-Realm Symmetric Keys</a> <a href='#magicparlabel-166' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-172' class='tocentry'>3 Security Properties</a> <a href='#magicparlabel-172' class='tocarrow'>&gt;</a>

<div class='lyxtoc-2'><a href='#magicparlabel-174' class='tocentry'>3.1 Automatic Cross-Realm Keying</a> <a href='#magicparlabel-174' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-176' class='tocentry'>3.2 Scalability</a> <a href='#magicparlabel-176' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-188' class='tocentry'>3.3 Privacy Protection relative to home realm</a> <a href='#magicparlabel-188' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-200' class='tocentry'>3.4 Leap-of-Faith (LoF) / Trust-On-First-Use (TOFU)</a> <a href='#magicparlabel-200' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-207' class='tocentry'>3.4.1 Requirements and Recommendations for LoF/TOFU Authentication</a> <a href='#magicparlabel-207' class='tocarrow'>&gt;</a></div>
</div>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-210' class='tocentry'>4 Application Programming Interface Considerations</a> <a href='#magicparlabel-210' class='tocarrow'>&gt;</a>

<div class='lyxtoc-2'><a href='#magicparlabel-212' class='tocentry'>4.1 API Considerations for LoF/TOFU Authentication</a> <a href='#magicparlabel-212' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-215' class='tocentry'>4.2 GSS-API Naming Considerations</a> <a href='#magicparlabel-215' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-222' class='tocentry'>4.3 Representation of LoF/TOFU Principal and Realm Names</a> <a href='#magicparlabel-222' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-238' class='tocentry'>4.4 GSS-API Name-Type for Pseudonymous Principals</a> <a href='#magicparlabel-238' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-240' class='tocentry'>4.4.1 Kerberos Name-Type for Pseudonymous Principals</a> <a href='#magicparlabel-240' class='tocarrow'>&gt;</a></div>
</div>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-242' class='tocentry'>5 Security Considerations</a> <a href='#magicparlabel-242' class='tocarrow'>&gt;</a>

<div class='lyxtoc-2'><a href='#magicparlabel-245' class='tocentry'>5.1 Loss of Cross-Realm Principal Trust Establishment Information</a> <a href='#magicparlabel-245' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-248' class='tocentry'>5.2 Security Considerations for LoF/TOFU</a> <a href='#magicparlabel-248' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-253' class='tocentry'>5.3 On the Need for a Common Transit Path Policy Language</a> <a href='#magicparlabel-253' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-256' class='tocentry'>6 IANA Considerations</a> <a href='#magicparlabel-256' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-258' class='tocentry'>7 Acknowledgements</a> <a href='#magicparlabel-258' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-260' class='tocentry'>8 Normative References</a> <a href='#magicparlabel-260' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-306' class='tocentry'>9 Informative References</a> <a href='#magicparlabel-306' class='tocarrow'>&gt;</a></div>
</div>

<h2 class="section"><span class="section_label">1</span> <a id='magicparlabel-63' />
Introduction</h2>
<div class="standard"><a id='magicparlabel-64' />
Kerberos <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-68' />
RFC4120</div>
</div> supports meshes of many realms. The individual relationships between realms must be manually keyed, usually with keys derived from passwords. A full mesh wouldn't scale, therefore the protocol calls for hierarchical trust hierarchies. In practice non-hierarchical but also non-fully-meshed relationships are used.</div>

<div class="standard"><a id='magicparlabel-69' />
These manually-exchanged keys are very difficult to rollover safely, and when they are changed the result is often outages &ndash; controlled outages where foreseen, but outages nonetheless.</div>

<div class="standard"><a id='magicparlabel-70' />
Manual cross-realm keying does not scale, and has very poor security properties. We seek to remediate this using public key cryptography, building on existing Kerberos specifications.</div>

<div class="standard"><a id='magicparlabel-71' />
Many years ago there was a proposal for exchanging cross-realm keys using a public key infrastructure (PKI) <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-75' />
RFC5280</div>
</div>; that proposal went by the name &ldquo;PKCROSS&rdquo;. We appropriate that long-dead proposal's name, but the protocol specified here is very different from the original proposal.</div>
<h3 class="subsection"><span class="subsection_label">1.1</span> <a id='magicparlabel-76' />
Conventions used in this document</h3>
<div class="standard"><a id='magicparlabel-77' />
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-81' />
RFC2119</div>
</div>.</div>
<h2 class="section"><span class="section_label">2</span> <a id='magicparlabel-82' />
The PKCROSS Protocol</h2>
<div class="standard"><a id='magicparlabel-83' />
We provide two variants of the PKCROSS protocol: one that is client-driven, and another that is driven by a Ticket Granting Service (TGS) on behalf of its clients. The latter is based on the former, with the TGS acting as a client. We begin with the client-driven case. DNS-Based Authentication of Named Entities (DANE) <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-87' />
RFC6698</div>
</div> can and should be used for realm CA certificate validation.</div>
<h3 class="subsection"><span class="subsection_label">2.1</span> <a id='magicparlabel-88' />
Client-Driven PKCROSS</h3>
<div class="standard"><a id='magicparlabel-89' />
A Kerberos client in with a ticket-granting ticket (TGT) for any one source realm (usually but not necessarily the client's own realm) wishing to acquire a TGT for a destination realm may use this protocol instead of the traditional cross-realm ticket-granting service (TGS) exchanges as follows:</div>

<ol class="enumerate"><li class="enumerate_item"><a id='magicparlabel-90' />
Generate private key to a public key cryptosystem;</li>
<li class="enumerate_item"><a id='magicparlabel-91' />
Request a certificate from the kx509 <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-95' />
RFC6717</div>
</div> service run by the source realm;</li>
<li class="enumerate_item"><a id='magicparlabel-96' />
Request a TGT from the destination realm using PKINIT <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-100' />
RFC4556</div>
</div> and the client certificate obtained in step #2.</li>
</ol>
<div class="standard"><a id='magicparlabel-101' />
If the destination realm issues the requested Ticket then it SHOULD include the client's certificate in an AD-CLIENT-CERTIFICATE authorization-data element, and it MUST do so if it does not validate the client's certificate to an acceptable trust anchor. The AD-CLIENT-CERTIFICATE authorization-data MUST be in a KDC-signed authorization-data container [XXX add reference to CAMMAC].</div>

<div class="revisionremark"><a id='magicparlabel-102' />
QUESTION: Should the PKINIT request in step #3 be a TGS-REQ with PKINIT pre-auth data?</div>

<div class="revisionremark"><a id='magicparlabel-103' />
QUESTION: Should the PKINIT request in step #3 be required to be used within a FAST tunnel?</div>
<h3 class="subsection"><span class="subsection_label">2.2</span> <a id='magicparlabel-104' />
TGS-Driven PKCROSS</h3>
<div class="standard"><a id='magicparlabel-105' />
A TGS can bootstrap ephemeral cross-realm trust principals on behalf of its clients. This allows the cost of PKCROSS to be amortized over many clients, and it allows participation by clients that do not support client-driven PKCROSS (or whose PKCROSS requests are rejected by the target).</div>

<div class="standard"><a id='magicparlabel-106' />
In this mode the TGS uses the client-driven PKCROSS protocol, modified as follows:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-107' />
the TGS's client certificate MUST have an id-pkinit-san Subject Alternative Name (SAN) identifying the source TGS as krbtgt/SOURCE@SOURCE</li>
<li class="itemize_item"><a id='magicparlabel-108' />
the TGS's client certificate MUST have an Extended Key Usage (EKU) of id-pkcross-issuer (TBD)</li>
</ul>
<div class="standard"><a id='magicparlabel-109' />
The resulting TGT -which we shall term an &ldquo;issuer TGT&rdquo; (ITGT)- and its session key can then be used by the source TGS to create cross-realm TGTs for the source-to-target trust principal (&ldquo;krbtgt/TARGET@SOURCE&rdquo;).</div>

<div class="standard"><a id='magicparlabel-110' />
This ITGT will be used to mint tickets as described below.</div>
<h4 class="subsubsection"><span class="subsubsection_label">2.2.1</span> <a id='magicparlabel-111' />
Issuing cross-realm TGTs issued for PKCROSS-keyed cross-realm TGS principals</h4>
<div class="standard"><a id='magicparlabel-112' />
Cross-realm TGTs issued by a source TGS using an ITGT will not be quite like normal Kerberos Tickets: their encrypted part contains an AP-REQ using the ITGT acquired by the source TGS, and this AP-REQ is &ldquo;encrypted&rdquo; with the null enctype, The AP-REQ's Authenitcator MUST contain an authorization-data element that carries a) the name of the client principal, b) the session key that the client should be using with the cross-realm TGTs issued.</div>

<div class="standard"><a id='magicparlabel-113' />
</div>
<div class='float float-figure'><div class="plain_layout"><a id='magicparlabel-117' />
</div>
<div class='float float-listings'><pre> AD-PKCROSS-TGT-INFO ::= SEQUENCE {
     cname [0] Principal,    -- the client's realm is the
                             -- crealm from the ITGT's EncTicketPart
     key   [1] EncryptionKey
 }</pre></div>


<div class="plain_layout"><a id='magicparlabel-126' />
<div class='float-caption float-caption-figure'>Figure 1:<div class="plain_layout"><a id='magicparlabel-130' />
AD-PKCROSS-TGT-INFO</div>
</div></div>

<div class="plain_layout"><a id='magicparlabel-131' />
</div>
</div>

<h4 class="subsubsection"><span class="subsubsection_label">2.2.2</span> <a id='magicparlabel-132' />
Handling impatient clients</h4>
<div class="standard"><a id='magicparlabel-133' />
Because the process of acquiring an ITGT might be slow, a TGS doing so on behalf of a client could use a mechanism for instructing the client to be patient. Existing clients would not handler a new error code by waiting, therefore there is not much that can be done to keep an impatient client from retrying at another KDC.</div>

<div class="standard"><a id='magicparlabel-134' />
The existing KDC_ERR_SVC_UNAVAILABLE error code cannot be used as often this causes the client to immediately retry the request at another KDC. A new error code for indicating estimated time to completion of request would be handy, but out of scope for this document.</div>

<div class="standard"><a id='magicparlabel-135' />
Note that there is a denial of service (DoS) attack by clients on willing source KDCs: the clients can ask the KDCs to acquire cross-realm ITGTs for many target realms. Ideally the quality of service for the Kerberos authentication service (AS) with PKINIT (and/or other slow pre-authentication mechanisms) should be separate from that of the Kerberos TGS co-located with it, and the PKCROSS-capable TGS as well, so as to be able to throttle low-priority requests when under load.</div>
<h3 class="subsection"><span class="subsection_label">2.3</span> <a id='magicparlabel-136' />
Stapled DANE</h3>
<div class="revisionremark"><a id='magicparlabel-137' />
TBD. We should use Google's serialization of DNS RRsets needed for DANE validation. We will need a label for the TLSA RRs for kx509 issuers.</div>
<h3 class="subsection"><span class="subsection_label">2.4</span> <a id='magicparlabel-138' />
Validation</h3>
<div class="standard"><a id='magicparlabel-139' />
KDCs processing PKINIT requests crossing realms MUST apply either or both of:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-140' />
PKIX certificate validation</li>
<li class="itemize_item"><a id='magicparlabel-141' />
DANE certificate validation</li>
</ul>
<div class="standard"><a id='magicparlabel-142' />
KDCs MUST reject PKINIT requests from clients of foreign realms whose certificates cannot be validated, unless the client request the anonymous principal name in the target's realm.</div>
<h3 class="subsection"><span class="subsection_label">2.5</span> <a id='magicparlabel-143' />
Transit Path</h3>
<div class="standard"><a id='magicparlabel-144' />
The combined Kerberos/PKIX/DNSSEC transit path MUST be represented in any tickets issued using PKCROSS (see below). As usual, each realm's KDCs in the mix can set the transit policy checked flag if a client's transit path is acceptable per the realm's KDCs' local policy.</div>

<div class="standard"><a id='magicparlabel-145' />
Two validation mechanisms are available: all PKIX <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-149' />
RFC5280</div>
</div> validation methods, and DANE <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-153' />
RFC6698</div>
</div>. DANE validation records SHOULD be stapled onto the client certificates by the issuing kx509 CA; alternatively clients can staple DANE validation records onto their PKINIT requests using an authorization-data element, AD-PKINIT-CLIENT-DANE.</div>

<div class="standard"><a id='magicparlabel-154' />
Additionally, when PKIX certificate validation is used, the trust path should be encoded in an AD-INITIAL-VERIFIED-CAS authorization data element, per-PKINIT.</div>
<h4 class="subsubsection"><span class="subsubsection_label">2.5.1</span> <a id='magicparlabel-155' />
Transit path representation</h4>
<div class="standard"><a id='magicparlabel-156' />
The notional transit path for a ticket issued by a target realm's KDCs includes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-157' />
the source realm (never expressed in the 'transited' field of Kerberos Tickets)</li>
<li class="itemize_item"><a id='magicparlabel-158' />
all realms in the ITGT's transited field (in the TGS-driven PKCROSS case)</li>
<li class="itemize_item"><a id='magicparlabel-159' />
all issuers in the validation path for the kx509-issued certificate, which are

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-160' />
all issuers in the certificate's PKIX validation path when PKIX validation is used</li>
<li class="itemize_item"><a id='magicparlabel-161' />
all DNS zone domainnames transited from the source realm's domainname to the root zone</li>
</ul>
</li><li class="itemize_item"><a id='magicparlabel-162' />
the target realm (also never expressed in the 'transited' field)</li>
</ul>
<div class="standard"><a id='magicparlabel-163' />
When using DANE for validation of the issuer's certificate the target SHOULD represent the transit path as hierarchical from the source realm's domain to the root domain, then direct from there to the target's realm.</div>

<div class="standard"><a id='magicparlabel-164' />
The notional transit path for a given client principal MUST be encoded as usual, using the Kerberos X.500 and domain-style representations of PKIX issuer names and DNS domainnames as faithfully to the original as possible.</div>

<div class="revisionremark"><a id='magicparlabel-165' />
QUESTION: Do we need a 100% faithful representation of the transit path?</div>
<h3 class="subsection"><span class="subsection_label">2.6</span> <a id='magicparlabel-166' />
Exchange of Long-Term Cross-Realm Symmetric Keys</h3>
<div class="standard"><a id='magicparlabel-167' />
A KDC can acquire a TGT using PKCROSS whose session key then becomes the long-lived, persistent symmetric key for a cross-realm principal from the source realm to the target realm (&ldquo;krbtgt/TARGET@SOURCE&rdquo;).</div>

<div class="standard"><a id='magicparlabel-168' />
To do this the KDC MUST set the USE-SESSION-KEY-AS-REALM-KEY KDCOptions flag (TBD) in its request for an ITGT from the target realm. As usual, the target realm's KDC MUST validate the client principal's certificate. The target realm's KDC MUST NOT return a TGS-REP until the new principal is committed to its principal database, and MUST set the endtime of the ITGT to the time at which the source realm may begin using the new symmetrically-keyed principal.</div>

<div class="standard"><a id='magicparlabel-169' />
The source realm's KDC MUST commit the new principal to its principal database and MUST NOT begin using the new principal's long-term keys until the new principal is available to all KDCs for the source realm and the endtime of the ITGT passes.</div>

<div class="standard"><a id='magicparlabel-170' />
Target KDCs SHOULD require manual pre-approval of such new cross-realm principals. In small, isolated environments a KDC MAY be configured to pre-approve all such new principals.</div>

<div class="standard"><a id='magicparlabel-171' />
By default, source KDCs SHOULD NOT automatically request long-term keying of cross-realm principals.</div>
<h2 class="section"><span class="section_label">3</span> <a id='magicparlabel-172' />
Security Properties</h2>
<div class="standard"><a id='magicparlabel-173' />
The proposed PKCROSS protocol has several useful properties described below.</div>
<h3 class="subsection"><span class="subsection_label">3.1</span> <a id='magicparlabel-174' />
Automatic Cross-Realm Keying</h3>
<div class="standard"><a id='magicparlabel-175' />
No more manual keying of cross-realm principals via exchanging passwords in-person on a telephone call (or similar).</div>
<h3 class="subsection"><span class="subsection_label">3.2</span> <a id='magicparlabel-176' />
Scalability</h3>
<div class="standard"><a id='magicparlabel-177' />
Kerberos with commonplace symmetrically-keyed hierarchical cross-real trusts can scale to a large universe of realms, but only if there are top-level realms that are willing to pair-wise trust and &ldquo;child&rdquo; realms. Such top-level realms do not exist in practice, leading to an O(N^2) scaling problem for most two-label realms.</div>

<div class="standard"><a id='magicparlabel-178' />
Leveraging a PKI, such as a PKIX PKI <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-182' />
RFC5280</div>
</div> or a DNSSEC PKI <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-186' />
RFC4033</div>
</div> removes the need for either top-level realms (which are not likely to ever be operated as commercial or even non-profit entities) or O(N^2) pair-wise cross-realm symmetric keying.</div>

<div class="standard"><a id='magicparlabel-187' />
The cost of this is having to add PKI trust paths to Kerberos trust paths (though the resulting trust path length need not be much different than before).</div>
<h3 class="subsection"><span class="subsection_label">3.3</span> <a id='magicparlabel-188' />
Privacy Protection relative to home realm</h3>
<div class="standard"><a id='magicparlabel-189' />
This protocol protects the privacy of client principals vis-a-vis their home realms, when the clients use the client-driven PKCROSS protocol.</div>

<div class="standard"><a id='magicparlabel-190' />
This feature is generally and naturally available in PKI, and as this protocol is based on a kerberized certification authority, this protocol inherits this privacy feature from PKI.</div>

<div class="standard"><a id='magicparlabel-191' />
The realms visited by the client may, of course, inform the client's home realm, but in the event that they don't, the client does gain this small measure of privacy. Of course, the privacy-conscious client SHOULD attach an OCSP Response <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-195' />
RFC6960</div>
</div> to its PKINIT request, per <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-199' />
RFC4557</div>
</div>.</div>
<h3 class="subsection"><span class="subsection_label">3.4</span> <a id='magicparlabel-200' />
Leap-of-Faith (LoF) / Trust-On-First-Use (TOFU)</h3>
<div class="standard"><a id='magicparlabel-201' />
Clients need not validate the certificate trust path of destination realms. When they do not, the services used through those destination realms are as good as anonymous authentication. If the client saves the root or intermediate or end entity certificates of the destination realms that it cannot or does not validate, then the client can check that on future occasions the destination realm's certificate has not changed, and it may warn the user if it has. This quite similar to how clients using the secure shell (SSH) protocol <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-205' />
RFC4251</div>
</div> handle server authentication, and is commonly known as &ldquo;leap-of-faith&rdquo; (LoF) or trust-on-first-use (TOFU). The result is pseudonymous authentication.</div>

<div class="standard"><a id='magicparlabel-206' />
Destination services too may apply LoF/TOFU: by using the subjectPublicKey of the certificate in the ticket's AD-CLIENT-CERTIFICATE KDC-issued authorization-data as the client's name instead of validating the transit path of the client.</div>
<h4 class="subsubsection"><span class="subsubsection_label">3.4.1</span> <a id='magicparlabel-207' />
<a id="sub_Requirements_for_LoF_TOFU" />
Requirements and Recommendations for LoF/TOFU Authentication</h4>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-208' />
Implementations MUST NOT use LoF/TOFU to authenticate a target service's realm without the approval of the user or without making it clear that the realm is not fully authenticated (perhaps by replacing the realm's name with a fingerprint of its public key / certificate).</li>
<li class="itemize_item"><a id='magicparlabel-209' />
Implementations MAY allow users and/or service administrators to establish user-friendly aliases for peer principal names that include public key fingerprint material.</li>
</ul>
<h2 class="section"><span class="section_label">4</span> <a id='magicparlabel-210' />
Application Programming Interface Considerations</h2>
<div class="standard"><a id='magicparlabel-211' />
For non-LoF/TOFU uses the main security consideration for applications is that improved scalability for Kerberos realm traversal implies larger Kerberos universes, and the larger a universe of trust the more important it is to have useful and expressive local policy for evaluating the trustworthiness of any given transit path. Because in most applications local policy should be a component external to the application, there is no impact on APIs here. However, an implementation may wish to provide applications with interfaces for specifying policies, either named or by value.</div>
<h3 class="subsection"><span class="subsection_label">4.1</span> <a id='magicparlabel-212' />
<a id="sub_API_Considerations_for" />
API Considerations for LoF/TOFU Authentication</h3>
<div class="standard"><a id='magicparlabel-213' />
For LoF/TOFU uses there is a critical requirement that APIs not permit accidental aliasing of principal names as a result of LoF/TOFU being used. The simplest way to do this is to use a fingerprint of the peer principal's public key as their principal, and/or a fingerprint of the peer principal's realm's public key as their realm.</div>

<div class="revisionremark"><a id='magicparlabel-214' />
For interoperability and compatibility we might want to specify what fingerprint algorithm to use, perhaps one of the SSHv2 fingerprint algorithms, such as in RFC4255, but those use weaker hashes...</div>
<h3 class="subsection"><span class="subsection_label">4.2</span> <a id='magicparlabel-215' />
GSS-API Naming Considerations</h3>
<div class="standard"><a id='magicparlabel-216' />
There are no GSS-API-specific considerations. The naming considerations described in <a href="#sub_API_Considerations_for">4.1</a> and the naming attributes defined in <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-220' />
I-D.williams-kitten-generic-naming-attributes</div>
</div> are sufficient. Note however that information about how PKCROSS was used to establish symmetrically-keyed cross-realm principals is lost and will not appear in the transit path in tickets issued by KDCs reached via such cross-realm principals.</div>

<div class="revisionremark"><a id='magicparlabel-221' />
Actually, we may need to specify some interfaces by which to indicate that the user wishes to alias a pseudonymous name. Perhaps we can do so by applying GSS_Set_name_attribute() to a peer MN obtained from GSS_Inquire_context()?</div>
<h3 class="subsection"><span class="subsection_label">4.3</span> <a id='magicparlabel-222' />
Representation of LoF/TOFU Principal and Realm Names</h3>
<div class="standard"><a id='magicparlabel-223' />
If there is no acceptable or verifiable trust path for validating a peer's principal's and/or realm's certificate, then the local end-point MUST locally output the peer's principal (or realm) name as a fingerprint of one of:</div>

<ol class="enumerate"><li class="enumerate_item"><a id='magicparlabel-224' />
peer's EE certificate's subject public key;</li>
<li class="enumerate_item"><a id='magicparlabel-225' />
a subject Name or GeneralName from the peer's EE certificate and the peer's certificate issuer's subjectPublicKey.</li>
</ol>
<div class="standard"><a id='magicparlabel-226' />
The choice of which of the above to fingerprint is a local choice. The default SHOULD be (1). (2) allows for key rollover.</div>

<div class="standard"><a id='magicparlabel-227' />
The fingerprints MUST be computed as follows:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-228' />
First format a byte string as follows:

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-229' />
for (1) take the subjectPublicKey's DER [add ref to x.690] encoding (this is a BIT STRING), with no additional tagging</li>
<li class="itemize_item"><a id='magicparlabel-230' />
for (2) take the DER encoding of the ASN.1 type &ldquo;nameAndIssuerFPInput ::= SEQUENCE { subjectName GeneralName, issuerPublicKey BIT STRING}&rdquo;</li>
</ul>
</li><li class="itemize_item"><a id='magicparlabel-231' />
Then apply SHA-256 to the octet string from the first step, then take the most significant 192 bits of that hash and base64-encode using the &ldquo;URL- and filename-safe alphabet&rdquo; <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-235' />
RFC4648</div>
</div>.</li>
<li class="itemize_item"><a id='magicparlabel-236' />
Prefix &ldquo;:spk:&rdquo; if using (1) or &ldquo;:nai:&rdquo; if using (2). This is the fingerprint to use as either the principal name's single component, or as the principal's realm name. If the name is a realm name then the colons (':') in the prefix are to be removed so as to produce valid Kerberos realm names.</li>
</ul>
<div class="standard"><a id='magicparlabel-237' />
For example, &ldquo;:spk:MjNhNjM0YTM4NDFiZDdhNjVkODQ5YTdi&rdquo;@FOO.EXAMPLE or &ldquo;HTTP/someserver.foo.example@spkMmE1M2RiMjc1Nzk5ODFjNWQwYjk0OTAw&rdquo;. Note that all such realm names have no period character ('.') in them and will too long to match top-level domainnames in use in the DNS, and no such principal names have a forward slash ('/') character in them. Note also that interpretation of such principal names as usernames on POSIX systems will either produce an empty string (due to implementation issues regarding the use of colons (':' as separators in POSIX user databases) or the full string, either way not likely ti collide with valid usernames.</div>
<h3 class="subsection"><span class="subsection_label">4.4</span> <a id='magicparlabel-238' />
GSS-API Name-Type for Pseudonymous Principals</h3>
<div class="standard"><a id='magicparlabel-239' />
We add a new GSS-API name-type: GSS_C_NT_PSEUDONYMOUS. This represents principals whose names are pseudonymous.</div>
<h4 class="subsubsection"><span class="subsubsection_label">4.4.1</span> <a id='magicparlabel-240' />
Kerberos Name-Type for Pseudonymous Principals</h4>
<div class="standard"><a id='magicparlabel-241' />
At this time pseudonymous principal names should not appear in Kerberos PDUs, thus no name-type need be assigned. If a pseudonymous name must be appear in a Kerberos PDU for any reason then the NT-UNKNOWN name-type should be used.</div>
<h2 class="section"><span class="section_label">5</span> <a id='magicparlabel-242' />
Security Considerations</h2>
<div class="revisionremark"><a id='magicparlabel-243' />
All the security considerations of Kerberos and PKI apply. Security considerations are discussed throughout this document.</div>

<div class="standard"><a id='magicparlabel-244' />
Scaling up the universe of realms reachable via any trust path necessarily dilutes trust overall, but not for specific paths. On the other hand, by shortening transit path lengths trust can be improved, though some short transit paths will have been symmetrically keyed using this PKCROSS protocol and therefore will be longer than they appear to be. These are subjective notions of trust, of course.</div>
<h3 class="subsection"><span class="subsection_label">5.1</span> <a id='magicparlabel-245' />
Loss of Cross-Realm Principal Trust Establishment Information</h3>
<div class="standard"><a id='magicparlabel-246' />
Once a cross-realm principal is symmetrically keyed the transit path used to automatically key that principal will no longer appear in subsequent cross-realm tickets issued by the target.</div>

<div class="standard"><a id='magicparlabel-247' />
The Kerberos transit path encodes only realm names (including X.500-style names, thus PKIX certificate subject and issuer names), and lacks any public key information that might be useful for pinning. However, the certificate validation path for each realm in a transit path SHOULD be included in the transit path.</div>
<h3 class="subsection"><span class="subsection_label">5.2</span> <a id='magicparlabel-248' />
Security Considerations for LoF/TOFU</h3>
<div class="standard"><a id='magicparlabel-249' />
LoF/TOFU has additional security considerations. To start there is the obvious susceptibility to peer impersonation / man-in-the-middle (MITM) attacks on initial contact, which is mitigated by the attacker's need to always remain in the middle in order to avoid detection.</div>

<div class="standard"><a id='magicparlabel-250' />
LoF/TOFU require the ability to remember peers' pseudonymous identities &ndash; their public keys (or certificates), otherwise one remains vulnerable to peer impersonation / MITM attacks at all times. This requires synchronization of peer pseudonym databases across multiple devices (where users have multiple devices), which may not always be possible or performed.</div>

<div class="standard"><a id='magicparlabel-251' />
It is critical that existing applications not be broken by the ability to use LoF/TOFU in new Kerberos implementations when those applications are re-linked with newer Kerberos implementations. To ensure this we require the use of public key fingerprints as principal and/or realm names; local mappings of learned pseudonym mappings onto semantically meaningful names are permitted where the user can validate the mapping. But keep in mind that most users never actually do much to verify peers' public keys in any application/protocol that provides LoF/TOFU [references for this would be nice -Nico].</div>

<div class="standard"><a id='magicparlabel-252' />
See <a href="#sub_Requirements_for_LoF_TOFU">3.4.1</a> for additional requirements for LoF/TOFU authentication.</div>
<h3 class="subsection"><span class="subsection_label">5.3</span> <a id='magicparlabel-253' />
On the Need for a Common Transit Path Policy Language</h3>
<div class="standard"><a id='magicparlabel-254' />
There are no standard ways to express authorization policies for trust transit paths for either Kerberos nor PKI. A standard language for this would be extremely useful. Such a language should allow for the expression of policies for both, clients and services. Such a language should allow for the expression of complex realm/domain/other naming, and should allow for HSTS-style pinning [add references -Nico]. Such a language should allow for multiple paths where desired, and should allow for more than path rejection: it should also allow for reducing the entitlements assigned to a peer/realm for authorization purposes.</div>

<div class="standard"><a id='magicparlabel-255' />
The need for a standard transit path policy expression language is not new, and such a language is broadly and generally needed. Therefore such a language is outside this document's scope.</div>
<h2 class="section"><span class="section_label">6</span> <a id='magicparlabel-256' />
IANA Considerations</h2>
<div class="revisionremark"><a id='magicparlabel-257' />
Allocate the new KDCOptions flag (USE-SESSION-KEY-AS-REALM-KEY) and authorization-data element (AD-CLIENT-CERTIFICATE), as well as the new EKU id-pkcross-issuer.</div>
<h2 class="section"><span class="section_label">7</span> <a id='magicparlabel-258' />
Acknowledgements</h2>
<div class="standard"><a id='magicparlabel-259' />
Although the author arrived at this &ldquo;kx509 + PKINIT == PKCROSS&rdquo; idea independently, it is not an original idea. Henry Hotz and Jeffrey Altman each conceived the same idea years earlier. It is a relatively obvious idea when taking into account efforts to bridge disparate security mechanisms and credentials infrastructures.</div>
<h2 class="section"><span class="section_label">8</span> <a id='magicparlabel-260' />
<a id="sec_References" />
Normative References</h2>
<div class="standard"><a id='magicparlabel-261' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-265' />
<a href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">rfc2119</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-266' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-270' />
<a href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4120.xml">rfc4120</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-271' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-275' />
<a href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4556.xml">rfc4556</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-276' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-280' />
<a href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4557.xml">rfc4557</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-281' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-285' />
<a href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4648.xml">rfc4648</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-286' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-290' />
<a href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">rfc5280</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-291' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-295' />
<a href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6698.xml">rfc6698</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-296' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-300' />
<a href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6717.xml">rfc6717</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-301' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-305' />
<a href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.williams-kitten-generic-naming-attributes.xml">I-D.williams-kitten-generic-naming-attributes</a></div>
</div></div>
<h2 class="section"><span class="section_label">9</span> <a id='magicparlabel-306' />
Informative References</h2>
<div class="standard"><a id='magicparlabel-307' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-311' />
<a href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml">rfc4033</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-312' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-316' />
<a href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4251.xml">rfc4251</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-317' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-321' />
<a href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6960.xml">rfc6960</a></div>
</div></div>
</body>
</html>
