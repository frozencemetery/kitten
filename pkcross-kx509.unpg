


Network Working Group                                        N. Williams
Internet-Draft                                              Cryptonector
Intended status: Standards Track                         August 23, 2013
Expires: February 24, 2014


  Public Key-Based Kerberos Cross Realm Path Traversal Protocol Using
        Kerberized Certification Authorities (kx509) and PKINIT
                 draft-williams-kitten-krb5-pkcross-03

Abstract

   This document specifies a protocol for obtaining cross-realm Kerberos
   tickets using existing, related protocols: kerberized certification
   authorities (kx509) and public key cryptography initial
   authentication in Kerberos (PKINIT).  The resulting protocol has a
   number of desirable security properties, including privacy protection
   for the user relative to their home realm's infrastructure, as well a
   support for leap-of-faith trust establishment, and automated cross-
   realm keying.  This protocol allows Kerberos to scale to large
   numbers of realms.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on February 24, 2014.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   1.      Introduction
   1.1.    Conventions used in this document
   2.      The Protocol
   2.1.    Exchange of Long-Term Cross-Realm Symmetric Keys
   2.1.1.  Caching of PKCROSS Symmetrically-Keyed Cross-Realm
           Principals
   2.2.    Indication of Preference for/ Required Use of
           Symmetrically-Keyed Cross-Realm Principals
   3.      Security Properties
   3.1.    Automated Cross-Realm Keying
   3.2.    Scalability and Vulnerability to Trusted Third Parties
           (TTPs)
   3.3.    Privacy Protection relative to home realm
   3.4.    Leap-of-Faith (LoF) / Trust-On-First-Use (TOFU)
   3.4.1.  Requirements and Recommendations for LoF/TOFU
           Authentication
   4.      Using DANE (DNSSEC) for Realm Certificate Validation
   5.      Application Programming Interface Considerations
   5.1.    API Considerations for LoF/TOFU Authentication
   5.2.    GSS-API Naming Considerations
   5.3.    Representation of LoF/TOFU Principal and Realm Names
   5.4.    GSS-API Name-Type for Pseudonymous Principals
   5.4.1.  Kerberos Name-Type for Pseudonymous Principals
   6.      Security Considerations
   6.1.    Loss of Cross-Realm Principal Trust Establishment
           Information
   6.2.    Security Considerations for LoF/TOFU
   6.3.    On the Need for a Common Transit Path Policy Language
   7.      IANA Considerations
   8.      Acknowledgements
   9.      References
   9.1.    Normative References
   9.2.    Informative References
           Author's Address


1.  Introduction

   Kerberos [RFC4120] supports meshes of many realms.  The individual
   relationships between realms must be manually keyed, usually with
   keys derived from passwords.  These keys are very difficult to
   rollover, and when they are changed the result is often outages --
   controlled outages where foreseen, but outages nonetheless.  This
   method of cross-realm keying does not scale, and has very poor
   security properties.  We seek to remediate this.

   Many years ago there was a proposal for exchanging cross-realm keys
   using a public key infrastructure (PKI) [RFC5280]; that proposal went
   by the name "PKCROSS".  We appropriate that long-dead proposal's
   name, but the protocol specified here is very different from the
   original proposal.

1.1.  Conventions used in this document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].


2.  The Protocol

   A Kerberos client in with a ticket-granting ticket (TGT) for any one
   source realm (usually but not necessarily the client's own realm)
   wishing to acquire a TGT for a destination realm may use this
   protocol instead of the traditional cross-realm ticket-granting
   service (TGS) exchanges as follows:

   1.  Generate private key to a public key cryptosystem;

   2.  Generate a certificate signing request (CSR) [RFC2986], such that
       the resulting certificate has an id-pkinit-san subject
       alternative name (SAN) corresponding to the client's principal
       name and realm;

   3.  Request a certificate from the kx509 [RFC6717] service run by the
       source realm;

   4.  Request a TGT from the destination realm using PKINIT [RFC4556].

   If the destination realm issues the requested Ticket then it SHOULD
   include the client's certificate in an AD-CLIENT-CERTIFICATE
   authorization-data element, and it MUST do so if it does not validate
   the client's certificate to an acceptable trust anchor.

   The destination realm MUST NOT set the TRANSIT-POLICY-CHECKED flag on
   the tickets they issue to clients whose foreign realm certificates
   are not validated by the KDC.  Destination realm administrators may
   configure their realms to know specific foreign realm clients'
   certificates.

   The destination MUST include the trust path of the client's
   certificate, if validated, in the 'transited' field of the issued
   Ticket, using a mapping of the issuer names to the X.500 realm naming
   style.

2.1.  Exchange of Long-Term Cross-Realm Symmetric Keys

   When the client principal is a TGS principal and its PKINIT AS-REQ
   protocol data unit (PDU) has the USE-SESSION-KEY-AS-REALM-KEY
   KDCOptions flag set then the client is requesting that the session
   key of the ticket issued by the destination realm become the long-
   term key for the corresponding krbtgt/DESTINATION@SOURCE principal.
   The destination realm MUST validate the client principal's
   certificate, building a trust path if need be, and validating it to a
   trust anchor.  The source and destination realm MAY have previously
   exchange fingerprints of their respective key distribution service
   (KDC) public keys and/or certificates and/or the source realm's kx509
   root or intermediate certification authority (CA), and such
   previously exchanged material, if any, MUST be used for certificate
   trust validation.

   Realm administrators should use the procedure to setup symmetric
   cross-realm keys as necessary to save clients from having to
   frequently use kx509 and PKINIT as described in the preceding
   section.

   Where public key infrastructure (PKI) exists allowing this to happen
   automatically, realms' KDCs MAY be configured to automatically key
   cross-realm principals for any realms that their source realms'
   clients request cross-realm TGTs for, but note that this presents a
   denial of service (DoS) opportunity to the source realm's clients.
   Source realm KDCs SHOULD only do this when a) they are configured to
   do so, b) the requesting client principal is in the same realm, and
   c) the KDC has not spent too much effort recently providing this
   service (i.e., KDCs should throttle attempts to establish symmetric
   cross-realm keys in this manner).  See also the next section.

2.1.1.  Caching of PKCROSS Symmetrically-Keyed Cross-Realm Principals

   Realms whose KDCs automatically setup symmetrically-keyed cross-realm
   principals SHOULD treat these principals as a cache, and SHOULD
   implement a cache eviction policy.  For example, a least-recently-
   used (LRU) or least-frequently-used (LFU) policy.  Otherwise a
   resource exhaustion DoS attack may be possible.  See also the
   preceding section.

2.2.  Indication of Preference for/ Required Use of Symmetrically-Keyed
      Cross-Realm Principals

   A KDC MAY reject a PKINIT/PKCROSS request with a KRB-ERROR indicating
   that the use of a symmetrically-keyed cross-realm relation is
   required.  This is done using the following error code: <TBD>.  The
   following e-data TD type is used to hold a SEQUENCE OF Realm: <TBD>.

   A KDC MAY accept a PKINIT/PKCROSS request but indicate to the client
   that a symmetrically-keyed cross-realm relation is preferred.  The
   KDC does this by including a PA-DATA containing a SEQUENCE OF Realm,
   with the following pa-type: <TBD>.

   [[anchor1: Add an ASN.1 module, even though it will contain only one
   untagged type consisting of a SEQUENCE OF Realm, and the IANA-
   assigned values for error code, e-data TD type, and pa-type, plus the
   import of the RFC4120 module (to get the Realm type).]]


3.  Security Properties

   The proposed PKCROSS protocol has several useful properties described
   below.

3.1.  Automated Cross-Realm Keying

   No more manual keying of cross-realm principals via exchanging
   passwords on a telephone call (or similar).

3.2.  Scalability and Vulnerability to Trusted Third Parties (TTPs)

   Kerberos with commonplace symmetrically-keyed hierarchical cross-real
   trusts can scale to a large universe of realms, but only if there are
   top-level realms that are willing to pair-wise trust and "child"
   realms.  Such top-level realms do not exist in practice, leading to
   an O(N^2) scaling problem for most two-label realms.  Leveraging a
   PKI, such as a PKIX PKI [RFC5280] or a DNSSEC PKI [RFC4033] removes
   the need for either top-level realms (which are not likely to ever be
   operated as commercial or even non-profit entities) or O(N^2) pair-
   wise cross-realm symmetric keying.  The cost of this is having to add
   PKI trust paths to Kerberos trust paths (though the resulting trust
   path length need not be much different than before).  Another cost is
   that having one (or many) top-level / root trusted third party (TTP),
   makes Kerberos susceptible to attack by those TTPs -- this was, and
   is, always a problem with any TTP protocol -such as Kerberos and PKI-
   anyways.

3.3.  Privacy Protection relative to home realm

   This protocol protects the privacy of client principals vis-a-vis
   their home realms: client principals' home realms need not know what
   destination realms the clients are speaking to because client
   principals need not ask their home realms.

   This feature is generally and naturally available in PKI, and as this
   protocol is based on a kerberized certification authority, this
   protocol inherits this privacy feature from PKI.

   The realms visited by the client may, of course, inform the client's
   home realm, but in the event that they don't, the client does gain
   this small measure of privacy.  Of course, the client SHOULD attach
   an OCSP Response [RFC6960] to its PKINIT request, per [RFC4557].

3.4.  Leap-of-Faith (LoF) / Trust-On-First-Use (TOFU)

   Clients need not validate the certificate trust path of destination
   realms.  When they do not, the services used through those
   destination realms are as good as anonymous authentication.  If the
   client saves the root or intermediate or end entity certificates of
   the destination realms that it cannot or does not validate, then the
   client can check that on future occasions the destination realm's
   certificate has not changed, and it may warn the user if it has.
   This quite similar to how clients using the secure shell (SSH)
   protocol [RFC4251] handle server authentication, and is commonly
   known as "leap-of-faith" (LoF) or trust-on-first-use (TOFU).  The
   result is pseudonymous authentication.

   Destination services too may apply apply LoF/TOFU: by not validating
   the transit path of the client (e.g., if it's not in a white-list of
   realms whose clients must have valid transit paths) and accepting
   tickets without the TRANSITED-POLICY-CHECKED ticket flag set.  The
   destination service can save the client's certificate, if found in an
   AD-CLIENT-CERTIFICATE authorization-data element in the client's
   Ticket, and may use it later to ensure that it is talking to the same
   client.

3.4.1.  Requirements and Recommendations for LoF/TOFU Authentication

   o  Implementations MUST NOT use LoF/TOFU to authenticate a target
      service's realm without the approval of the user or without making
      it clear that the realm is not fully authenticated (perhaps by
      replacing the realm's name with a fingerprint of its public key /
      certificate).

   o  Implementations MAY allow users and/or service administrators to
      establish user-friendly aliases for peer principal names that
      include public key fingerprint material.

   o  Implementations MAY provide a way to automatically learn realm
      name <-> public key / certificate bindings.  Pinning [add
      reference to HSTS] SHOULD be supported in that case.  The user
      MUST approve of each such mapping.


4.  Using DANE (DNSSEC) for Realm Certificate Validation

   It is possible to use DNS-Based Authentication of Named Entities
   (DANE) [RFC6698] to authenticate the KDC certificates of realms with
   domain-style names.  To do this simply format the realm's DOMAIN-
   style name as a DNS domainname (no case folding is necessary), then
   format the DANE TLSA resource record set's (RRset) domainname per-
   DANE, using the KDC's port number.  Note that the KDCs will usually
   not speak TLS, though there is an extension for using TLS in the KDC
   over TCP protocol [RFC6251].  For example, the TLSA RRset for any KDC
   for the DESTINATION.EXAMPLE realm might be named
   _88._tcp.destination.example.  Follow DANE TLSA certificate
   validation procedures to validate the KDC's certificate regardless of
   whether the certificate was obtained by using PKINIT or TLS.

   Normal PKINIT KDC certificate validation rules MAY also be used in
   addition to DANE rules.


5.  Application Programming Interface Considerations

   For non-LoF/TOFU uses the main security consideration for
   applications is that improved scalability for Kerberos realm
   traversal implies larger Kerberos universes, and the larger a
   universe of trust the more important it is to have useful and
   expressive local policy for evaluating the trustworthiness of any
   given transit path.  Because in most applications local policy should
   be a component external to the application, there is little impact on
   APIs here.  However, an implementation may wish to provide
   applications with interfaces for specifying policies, either named or
   by value.

5.1.  API Considerations for LoF/TOFU Authentication

   For LoF/TOFU uses there is a critical requirement that APIs not
   permit accidental aliasing of principal names as a result of LoF/TOFU
   being used.  The simplest way to do this is to use a fingerprint of
   the peer principal's public key as their principal, and/or a
   fingerprint of the peer principal's realm's public key as their
   realm.

   [[anchor2: For interoperability and compatibility we might want to
   specify what fingerprint algorithm to use, perhaps one of the SSHv2
   fingerprint algorithms, such as in RFC4255, but those use weaker
   hashes...]]

5.2.  GSS-API Naming Considerations

   There are no GSS-API-specific considerations.  The naming
   considerations described in Section 5.1 and the naming attributes
   defined in [I-D.williams-kitten-generic-naming-attributes] are
   sufficient.  Note however that information about how PKCROSS was used
   to establish symmetrically-keyed cross-realm principals is lost and
   will not appear in the transit path in tickets issued by KDCs reached
   via such cross-realm principals.

   [[anchor3: Actually, we may need to specify some interfaces by which
   to indicate that the user wishes to alias a pseudonymous name.
   Perhaps we can do so by applying GSS_Set_name_attribute() to a peer
   MN obtained from GSS_Inquire_context()?]]

5.3.  Representation of LoF/TOFU Principal and Realm Names

   If there is no acceptable or verifiable trust path for validating a
   peer's principal's and/or realm's certificate, then the local end-
   point MUST locally output the peer's principal (or realm) name as a
   fingerprint of one of:

   1.  peer's EE certificate's subject public key;

   2.  a subject Name or GeneralName from the peer's EE certificate and
       the peer's certificate issuer's subjectPublicKey.

   The choice of which of the above to fingerprint is a local choice.
   The default SHOULD be (1). (2) allows for key rollover.

   The fingerprints MUST be computed as follows:

   o  First format a byte string as follows:

      *  for (1) take the subjectPublicKey's DER [add ref to x.690]
         encoding (this is a BIT STRING), with no additional tagging

      *  for (2) take the DER encoding of the ASN.1 type
         "nameAndIssuerFPInput ::= SEQUENCE { subjectName GeneralName,
         issuerPublicKey BIT STRING}"

   o  Then apply SHA-256 to the octet string from the first step, then
      take the most significant 192 bits of that hash and base64-encode
      using the "URL- and filename-safe alphabet" [RFC4648].

   o  Prefix ":spk:" if using (1) or ":nai:" if using (2).  This is the
      fingerprint to use as either the principal name's single
      component, or as the principal's realm name.  If the name is a
      realm name then the colons (':') in the prefix are to be removed
      so as to produce valid Kerberos realm names.

   For example, ":spk:MjNhNjM0YTM4NDFiZDdhNjVkODQ5YTdi"@FOO.EXAMPLE or
   "HTTP/someserver.foo.example@spkMmE1M2RiMjc1Nzk5ODFjNWQwYjk0OTAw".
   Note that all such realm names have no period character ('.') in them
   and will too long to match top-level domainnames in use in the DNS,
   and no such principal names have a forward slash ('/') character in
   them.  Note also that interpretation of such principal names as
   usernames on POSIX systems will either produce an empty string (due
   to implementation issues regarding the use of colons (':' as
   separators in POSIX user databases) or the full string, either way
   not likely ti collide with valid usernames.

5.4.  GSS-API Name-Type for Pseudonymous Principals

   We add a new GSS-API name-type: GSS_C_NT_PSEUDONYMOUS.  This
   represents principals whose names are pseudonymous.

5.4.1.  Kerberos Name-Type for Pseudonymous Principals

   At this time pseudonymous principal names should not appear in
   Kerberos PDUs, thus no name-type need be assigned.  If a pseudonymous
   name must be appear in a Kerberos PDU for any reason then the NT-
   UNKNOWN name-type should be used.


6.  Security Considerations

   [[anchor4: All the security considerations of Kerberos and PKI apply.
   Security considerations are discussed throughout this document.]]

   Scaling up the universe of realms reachable via any trust path
   necessarily dilutes trust overall, but not for specific paths.  On
   the other hand, by shortening transit path lengths trust can be
   improved, though some short transit paths will have been
   symmetrically keyed using this PKCROSS protocol and therefore will be
   longer than they appear to be.  These are subjective notions of
   trust, of course.

6.1.  Loss of Cross-Realm Principal Trust Establishment Information

   Note that once a cross-realm principal is symmetrically keyed no
   information about how that keying operation took place will appear in
   tickets issued by that TGS principal.

   Note also that the Kebreros transit path encodes only realm names
   (including X.500-style names, thus PKIX certificate subject and
   issuer names), and lacks any public key information that might be
   useful for pinning.  However, the certificate validation path for
   each realm in a transit path SHOULD be included in the transit path.

6.2.  Security Considerations for LoF/TOFU

   LoF/TOFU has additional security considerations.  To start there is
   the obvious susceptibility to peer impersonation / man-in-the-middle
   (MITM) attacks on initial contact, which is mitigated by the
   attacker's need to always remain in the middle in order to avoid
   detection.

   LoF/TOFU require the ability to remember peers' pseudonymous
   identities -- their public keys (or certificates), otherwise one
   remains vulnerable to peer impersonation / MITM attacks at all times.
   This requires synchronization of peer pseudonym databases across
   multiple devices (where users have multiple devices), which may not
   always be possible or performed.

   It is critical that existing applications not be broken by the
   ability to use LoF/TOFU in new Kerberos implementations when those
   applications are re-linked with newer Kerberos implementations.  To
   ensure this we require the use of public key fingerprints as
   principal and/or realm names; local mappings of learned pseudonym
   mappings onto semantically meaningful names are permitted where the
   user can validate the mapping.  But keep in mind that most users
   never actually do much to verify peers' public keys in any
   application/protocol that provides LoF/TOFU [references for this
   would be nice -Nico].

   See Section 3.4.1 for additional requirements for LoF/TOFU
   authentication.

6.3.  On the Need for a Common Transit Path Policy Language

   There are no standard ways to express authorization policies for
   trust transit paths for either Kerberos nor PKI.  A standard language
   for this would be extremely useful.  Such a language should allow for
   the expression of policies for both, clients and services.  Such a
   language should allow for the expression of complex realm/domain/
   other naming, and should allow for HSTS-style pinning [add references
   -Nico].  Such a language should allow for multiple paths where
   desired, and should allow for more than path rejection: it should
   also allow for reducing the entitlements assigned to a peer/realm for
   authorization purposes.

   The need for a standard transit path policy expression language is
   not new, and such a language is broadly and generally needed.
   Therefore such a language is outside this document's scope.


7.  IANA Considerations

   [[anchor5: Allocate the new KDCOptions flag (USE-SESSION-KEY-AS-
   REALM-KEY) and authorization-data element (AD-CLIENT-CERTIFICATE).]]


8.  Acknowledgements

   Although the author arrived at this "kx509 + PKINIT == PKCROSS" idea
   independently, it is not an original idea.  Henry Hotz and Jeffrey
   Altman each conceived the same idea years earlier.  It is a
   relatively obvious idea when taking into account efforts to bridge
   disparate security mechanisms and credentials infrastructures.


9.  References

9.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2986]  Nystrom, M. and B. Kaliski, "PKCS #10: Certification
              Request Syntax Specification Version 1.7", RFC 2986,
              November 2000.

   [RFC4120]  Neuman, C., Yu, T., Hartman, S., and K. Raeburn, "The
              Kerberos Network Authentication Service (V5)", RFC 4120,
              July 2005.

   [RFC4556]  Zhu, L. and B. Tung, "Public Key Cryptography for Initial
              Authentication in Kerberos (PKINIT)", RFC 4556, June 2006.

   [RFC4557]  Zhu, L., Jaganathan, K., and N. Williams, "Online
              Certificate Status Protocol (OCSP) Support for Public Key
              Cryptography for Initial Authentication in Kerberos
              (PKINIT)", RFC 4557, June 2006.

   [RFC4648]  Josefsson, S., "The Base16, Base32, and Base64 Data
              Encodings", RFC 4648, October 2006.

   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
              Housley, R., and W. Polk, "Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 5280, May 2008.

   [RFC6698]  Hoffman, P. and J. Schlyter, "The DNS-Based Authentication
              of Named Entities (DANE) Transport Layer Security (TLS)
              Protocol: TLSA", RFC 6698, August 2012.

   [RFC6717]  Hotz, H. and R. Allbery, "kx509 Kerberized Certificate
              Issuance Protocol in Use in 2012", RFC 6717, August 2012.

   [I-D.williams-kitten-generic-naming-attributes]
              Williams, N., "Generic Naming Attributes for the Generic
              Security Services Application Programming Interface (GSS-
              API)", draft-williams-kitten-generic-naming-attributes-01
              (work in progress), August 2013.

9.2.  Informative References

   [RFC4033]  Arends, R., Austein, R., Larson, M., Massey, D., and S.
              Rose, "DNS Security Introduction and Requirements",
              RFC 4033, March 2005.

   [RFC4251]  Ylonen, T. and C. Lonvick, "The Secure Shell (SSH)
              Protocol Architecture", RFC 4251, January 2006.

   [RFC6251]  Josefsson, S., "Using Kerberos Version 5 over the
              Transport Layer Security (TLS) Protocol", RFC 6251,
              May 2011.

   [RFC6960]  Santesson, S., Myers, M., Ankney, R., Malpani, A.,
              Galperin, S., and C. Adams, "X.509 Internet Public Key
              Infrastructure Online Certificate Status Protocol - OCSP",
              RFC 6960, June 2013.


Author's Address

   Nicolas Williams
   Cryptonector, LLC

   Email: nico@cryptonector.com

