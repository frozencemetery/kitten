#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass docbook
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
Format 31

InsetLayout Flex:PI_Strict
    LyXType Custom
    HTMLTag div
    LabelString PI_Strict
End

InsetLayout Flex:PI
    LyXType Custom
    HTMLTag div
    LabelString PI
End

InsetLayout Flex:PI_SymRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SymRefs
End

InsetLayout Flex:PI_SortRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SortRefs
End

InsetLayout Flex:PI_TOC
    LyXType Custom
    HTMLTag div
    LabelString PI_TOC
End

InsetLayout Flex:PI_TOCIndent
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCIndent
End

InsetLayout Flex:PI_TOCDepth
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCDepth
End

InsetLayout Flex:PI_TOCNarrow
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCNarrow
End

InsetLayout Flex:PI_TOCCompact
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCCompact
End

InsetLayout Flex:PI_TOCAppendix
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCAppendix
End

InsetLayout Flex:DocName
    LyXType Custom
    HTMLTag div
    LabelString DocName
End

InsetLayout Flex:IntendedStatus
    LyXType Custom
    HTMLTag div
    LabelString IntendedStatus
End

InsetLayout Flex:Updates
    LyXType Custom
    HTMLTag div
    LabelString Updates
End

InsetLayout Flex:Obsoletes
    LyXType Custom
    HTMLTag div
    LabelString Obsoletes
End

InsetLayout Flex:SeriesNo
    LyXType Custom
    HTMLTag div
    LabelString SeriesNo
End

InsetLayout Flex:RFCNumber
    LyXType Custom
    HTMLTag div
    LabelString RFCNumber
End

InsetLayout Flex:IPR
    LyXType Custom
    HTMLTag div
    LabelString IPR
End

InsetLayout Flex:IETFArea
    LyXType Custom
    HTMLTag div
    LabelString IETFArea
End

InsetLayout Flex:IETFWorkingGroup
    LyXType Custom
    HTMLTag div
    LabelString IETFWorkingGroup
End

InsetLayout Flex:XML2RFCKeyword
    LyXType Custom
    HTMLTag div
    LabelString XML2RFCKeyword
End

InsetLayout Flex:TitleAbbrev
    LyXType Custom
    HTMLTag div
    LabelString TitleAbbrev
End

InsetLayout Flex:AuthorRole
    LyXType Custom
    HTMLTag div
    LabelString AuthRole
End

InsetLayout Flex:AuthorInitials
    LyXType Custom
    HTMLTag div
    LabelString AuthInitials
End

InsetLayout Flex:AuthorSurname
    LyXType Custom
    HTMLTag div
    LabelString AuthSurname
End

InsetLayout Flex:AuthorOrg
    LyXType Custom
    HTMLTag div
    LabelString AuthOrg
End

InsetLayout Flex:AuthorOrgAbbrev
    LyXType Custom
    HTMLTag div
    LabelString AuthOrgAbbrev
End

InsetLayout Flex:AuthorEmailAddr
    LyXType Custom
    HTMLTag div
    LabelString AuthEmailAddr
End

InsetLayout Flex:AuthorAddrStreet
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrStreet
End

InsetLayout Flex:AuthorAddrCity
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCity
End

InsetLayout Flex:AuthorAddrRegion
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrRegion
End

InsetLayout Flex:AuthorAddrCode
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCode
End

InsetLayout Flex:AuthorAddrCountry
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCountry
End

InsetLayout Flex:EntityXRef
    LyXType Custom
    HTMLTag div
    LabelString EntityXRef
End

InsetLayout Flex:BibXML
    LyXType Custom
    HTMLTag div
    LabelString BibXML
End

InsetLayout Flex:EmbeddedBibXML
    LyXType Custom
    HTMLTag div
    LabelString EmbeddedBibXML
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman cmr
\font_sans cmss
\font_typewriter cmtt
\font_default_family ttdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Impersonation Naming Attribute for the Generic Security Services Application
 Programming Interface (GSS-API)
\end_layout

\begin_layout Standard
\begin_inset Flex DocName
status open

\begin_layout Plain Layout
draft-williams-kitten-impersonation-naming-attr-01
\end_layout

\end_inset


\begin_inset Flex IPR
status open

\begin_layout Plain Layout
trust200902
\end_layout

\end_inset


\begin_inset Flex IntendedStatus
status open

\begin_layout Plain Layout
std
\end_layout

\end_inset


\begin_inset Flex TitleAbbrev
status open

\begin_layout Plain Layout
GSS Impersonation
\end_layout

\end_inset


\begin_inset Flex IETFArea
status open

\begin_layout Plain Layout
Security Area
\end_layout

\end_inset


\begin_inset Flex XML2RFCKeyword
status open

\begin_layout Plain Layout
Internet-Draft
\end_layout

\end_inset


\begin_inset Flex Updates
status open

\begin_layout Plain Layout
1964, 2743, 2744
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI TOC
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\begin_inset Flex PI SymRefs
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\begin_inset Flex PI TOCIndent
status open

\begin_layout Plain Layout
no
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
comments="yes"
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
inline="yes"
\end_layout

\end_inset


\end_layout

\begin_layout Author
Nicolas Williams
\begin_inset Flex AuthorOrg
status open

\begin_layout Plain Layout
Cryptonector, LLC
\end_layout

\end_inset


\begin_inset Flex AuthorOrgAbbrev
status open

\begin_layout Plain Layout
Cryptonector
\end_layout

\end_inset


\begin_inset Flex AuthorEmailAddr
status open

\begin_layout Plain Layout
nico@cryptonector.com
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
This document describes a method for impersonation of one principal by another.
 Relying parties are expected to apply policy to decide which impersonation
 attempts they accept.
 Trusted third parties may provide assistance in evaluating policy.
 The proposed system fails safe: applications that do not support it see
 their peers as the impersonators, not the impersonated principals.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction and Motivation
\end_layout

\begin_layout Standard
A very common application design involves services that must impersonate
 their clients to other services.
 There are two common designs for enabling this:
\end_layout

\begin_layout Description
credential
\begin_inset space ~
\end_inset

delegation where clients delegate credentials to the impersonators,
\end_layout

\begin_layout Description
explicit
\begin_inset space ~
\end_inset

impersonation where impersonators explicitly state that they are impersonating
 others.
\end_layout

\begin_layout Standard
There exist protocols where the explicit impersonation concept is difficult
 to retrofit.
 And there exist protocols where credential delegation is the commonly-deployed
 -and therefore expected- method for impersonation.
 Therefore explicit impersonation is not universally available.
\end_layout

\begin_layout Standard
On the other hand, unconstrained credential delegation is dangerous (for
 obvious reasons).
 What to do?
\end_layout

\begin_layout Standard
One answer has been 
\series bold
constrained delegation
\series default
.
 In this design the credential issuer creates a credential for impersonating
 the client, but in a constrained way (e.g., to only a small set of downstream
 services).
 But constrained credential delegation is difficult to manage: the constraints
 must be expressed by parties that aren't best-placed to know the desired
 policy.
\end_layout

\begin_layout Standard
We propose a simple solution for Generic Security Services Application Programmi
ng Interface (GSS-API) 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

 applications: have the impersonator use their own credential (or one specifical
ly for this purpose) and assert the name of the principal to be impersonated
 as a name attribute.
 This is very similar to the concept of 
\begin_inset Quotes eld
\end_inset

authz-id
\begin_inset Quotes erd
\end_inset

 in Simple Authentication and Security Layers (SASL) 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4422
\end_layout

\end_inset

, but with some subtle differences as described below.
 We also propose the addition of a name attribute with the same semantics
 as the SASL authz-id.
\end_layout

\begin_layout Subsection
Comparison to S4U
\end_layout

\begin_layout Standard
There is an extension for Kerberos 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4120
\end_layout

\end_inset

 known as Services for User (S4U) 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
S4U
\end_layout

\end_inset

 which provides for impersonation.
 S4FU is available to GSS-API applications via the Kerberos GSS-API mechanism
 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC1964
\end_layout

\end_inset


\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4121
\end_layout

\end_inset

, naturally.
\end_layout

\begin_layout Standard
A complete treatment of S4U is out of scope for this document, however,
 a brief summary is as follows.
 S4U consists of two sub-protocols for impersonation:
\end_layout

\begin_layout Description
S4U2Self Allows services to use their own credentials to obtain KDC-issued
 authorization-data for principals to be impersonated.
\end_layout

\begin_layout Description
S4U2Proxy Allows services to use clients' service tickets as 
\begin_inset Quotes eld
\end_inset

evidence
\begin_inset Quotes erd
\end_inset

 tickets with which (and together with the impersonator's credentials) to
 obtain other tickets in the name of the client principals to be impersonated.
\end_layout

\begin_layout Standard
This document concerns itself only with functionality like that of S4U2Proxy.
\end_layout

\begin_layout Standard
There are several differences between this proposal and S4U2Proxy:
\end_layout

\begin_layout Enumerate
At no point does a KDC issue a ticket to an impersonator with the impersonated
 principal's name as the cname/crealm.
 This permits access to services in the impersonated principal's home realm.
\end_layout

\begin_layout Enumerate
No 
\begin_inset Quotes eld
\end_inset

evidence
\begin_inset Quotes erd
\end_inset

 tickets are required or used.
\end_layout

\begin_layout Enumerate
No KDC support is required, but may be provided.
\end_layout

\begin_layout Enumerate
No KDC-side policy is required, but may be provided.
\end_layout

\begin_layout Standard
(1) is the initial motivation for this work: S4U does not permit services
 not in the impersonated principal's realm to impersonate it to services
 in that same realm.
 This is because any service ticket issued for such access would appear
 to transit a trust path back to the impersonated principal's realm, thus
 triggering loop detection.
 A better fix for this might be to permit exactly one full cycle precisely
 so as to permit this and other similar use cases.
 However, the other differences and advantages over S4U2Proxy are compelling.
\end_layout

\begin_layout Standard
This proposal 
\emph on
does not
\emph default
 intend to entirely replace S4U.
 In particular, in use cases where Kerberos tickets carry KDC-issued authorizati
on-data, the services to which principals are successfully impersonated
 may need to use S4U2Self in order to obtain that authorization-data if
 they have no other method available by which to get it.
\end_layout

\begin_layout Subsubsection
Comparison to S4U2Proxy
\end_layout

\begin_layout Standard
Our method of impersonation has a number of advantages to S4U:
\end_layout

\begin_layout Itemize
it is simpler (no need for evidence tickets and related cryptographic sub-protoc
ols, no need for KDC-side policy, and even where KDCs apply additional policy,
 this method imposes no new requirements for additional cryptographic operations
 on either the impersonator's nor the KDC's part);
\end_layout

\begin_layout Itemize
it adheres strictly to the Kerberos model whereby application-local policy
 has the last word and KDCs need not apply any policy;
\end_layout

\begin_layout Itemize
it fails safe when used with peers that do not implement it (and therefore
 do not apply local policy to impersonation attempts);
\end_layout

\begin_layout Itemize
it permits impersonation of principals whose names are not Kerberos principal
 names.
\end_layout

\begin_layout Subsection
Conventions used in this document
\end_layout

\begin_layout Standard
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
 "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are
 to be interpreted as described in 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2119
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Generic Interfaces for Impersonation
\end_layout

\begin_layout Standard
We provide three interfaces for impersonation:
\end_layout

\begin_layout Itemize
naming attributes 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC6680
\end_layout

\end_inset

 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Generic-Impersonation-Attributes"

\end_inset

);
\end_layout

\begin_layout Itemize
a function, GSS_Acquire_cred_impersonate_name() and its C programming language
 bindings patterned after the GSS-APIv2u1 C bindings 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC2744
\end_layout

\end_inset

 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:GSS_Acquire_cred_impersonate_nam"

\end_inset

);
\end_layout

\begin_layout Itemize
apparent credential delegation, even when credential delegation has not
 taken place (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Apparent-Credential-Delegation"

\end_inset

).
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec:Generic-Impersonation-Attributes"

\end_inset

Naming Attributes for Generic Impersonation
\end_layout

\begin_layout Standard
We define two generic GSS-API naming attributes 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC6680
\end_layout

\end_inset

 for impersonation:
\end_layout

\begin_layout Description
GSS_C_ATTR_IMPERSONATED_PRINCIPAL This attribute notionally carries an exported
 name token representation of the name of the principal to be impersonated
 by the principal whose CREDENTIAL HANDLE's desired NAME has this attribute.
 This is subtly different from SASL's authz-id concept in that the latter
 carries an application-specific name form while this one carries a mechanism-sp
ecific name form (though not necessarily the same mechanism as is used to
 authenticate the impersonator!).
 When obtained with GSS_Get_name_attribute() the display_value of this attribute
 SHOULD be a display form of the impersonated name else it MUST be empty,
 whereas the non-display form MUST be an octet string suitable for use as
 an input to GSS_Import_name() with GSS_C_NT_EXPORTED_NAME or GSS_C_NT_COMPOSITE
_EXPORT.
\end_layout

\begin_layout Description
GSS_C_ATTR_AUTHZ_ID This attribute carries an application-specific name
 form corresponding to an identity that is to be impersonated (by the principal
 whose CREDENTIAL HANDLE's desired NAME has this attribute).
 This attribute's semantics are exactly like SASL's.
 Interpretation of this attribute's non-display value is application-specific;
 the display value of this attribute is empty.
\end_layout

\begin_layout Standard
Mechanisms MAY support credential delegation for credentials with these
 attributes set, however, if they do they MUST constrain the delegated credentia
ls such that they may only be used to impersonate the same principal or
 assert the same authz-id as in the security context token exchange where
 the credential was delegated.
 Impersonator applications are encouraged to not delegate impersonation
 credentials; instead their peers should should use impersonation if necessary.
\end_layout

\begin_layout RevisionRemark
TBD: Should we specify a way to denote authz-id form, e.g., via a URN? Perhaps
 by convention the authz-id should generally be prefixed with a URN denoting
 its form, and perhaps there should be a URN for denoting 
\begin_inset Quotes eld
\end_inset

private to the application using it
\begin_inset Quotes erd
\end_inset

.
 Of course, that would be an optional convention, and anyways, it's not
 necessary (SASL doesn't have it).
\end_layout

\begin_layout Subsubsection
C Bindings
\end_layout

\begin_layout RevisionRemark
TBD.
 Obviously the bindings consist of the same symbols as shown above; their
 values should be of type gss_buffer_desc, pointing to the URNs assigned
 herein (still TBD).
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:GSS_Acquire_cred_impersonate_nam"

\end_inset

GSS_Acquire_cred_impersonate_name()
\end_layout

\begin_layout Standard
Inputs:
\end_layout

\begin_layout Description
impersonator_cred_handle
\begin_inset space ~
\end_inset

CREDENTIAL
\begin_inset space ~
\end_inset

HANDLE A handle for the impersonator's credentials.
\end_layout

\begin_layout Description
desired_name
\begin_inset space ~
\end_inset

NAME The name of the principal to be impersonated.
\end_layout

\begin_layout Description
time_req
\begin_inset space ~
\end_inset

INTEGER Same as for GSS_Acquire_cred() 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

.
\end_layout

\begin_layout Description
desired_mechs
\begin_inset space ~
\end_inset

SET
\begin_inset space ~
\end_inset

OF
\begin_inset space ~
\end_inset

OBJECT
\begin_inset space ~
\end_inset

IDENTIFIER Same as for GSS_Acquire_cred() 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

.
\end_layout

\begin_layout Description
cred_usage
\begin_inset space ~
\end_inset

INTEGER Same as for GSS_Acquire_cred() 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Outputs:
\end_layout

\begin_layout Description
major
\begin_inset space ~
\end_inset

status
\begin_inset space ~
\end_inset

INTEGER
\end_layout

\begin_layout Description
minor
\begin_inset space ~
\end_inset

status
\begin_inset space ~
\end_inset

INTEGER
\end_layout

\begin_layout Description
output_cred_handle
\begin_inset space ~
\end_inset

CREDENTIAL
\begin_inset space ~
\end_inset

HANDLE If returned, these are the credentials for impersonating the desired_name.
\end_layout

\begin_layout Description
actual_mechs
\begin_inset space ~
\end_inset

SET
\begin_inset space ~
\end_inset

OF
\begin_inset space ~
\end_inset

OBJECT
\begin_inset space ~
\end_inset

IDENTIFIER Same as for GSS_Acquire_cred() 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

.
\end_layout

\begin_layout Description
time_rec
\begin_inset space ~
\end_inset

INTEGER Same as for GSS_Acquire_cred() 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
This function is just like GSS_Acquire_cred(), from the base GSS-APIv2u1
 RFC2743 specification, but with the addition of an input for the impersonator's
 credentials.
\end_layout

\begin_layout Standard
This function may be used with S4U2Self or it may be equivalent to acquiring
 credentials for the impersonator's NAME but with one or both of the name
 attributes described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Generic-Impersonation-Attributes"

\end_inset

.
\end_layout

\begin_layout RevisionRemark
TBD: Describe any differences from GSS_Acquire_name() as to major status
 codes.
\end_layout

\begin_layout Subsubsection
C Bindings of GSS_Acquire_cred_impersonate_name()
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 OM_uint32 gss_acquire_cred_impersonate_name(
\end_layout

\begin_layout Plain Layout

         OM_uint32 *minor_status,
\end_layout

\begin_layout Plain Layout

         const gss_cred_id_t impersonator_cred_handle,
\end_layout

\begin_layout Plain Layout

         const gss_name_t desired_name,
\end_layout

\begin_layout Plain Layout

         OM_uint32 time_req,
\end_layout

\begin_layout Plain Layout

         const gss_OID_set desired_mechs,
\end_layout

\begin_layout Plain Layout

         gss_cred_usage_t cred_usage,
\end_layout

\begin_layout Plain Layout

         gss_cred_id_t *output_cred_handle,
\end_layout

\begin_layout Plain Layout

         gss_OID_set *actual_mechs,
\end_layout

\begin_layout Plain Layout

         OM_uint32 *time_rec);
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
gss_acquire_cred_impersonate_name()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Apparent-Credential-Delegation"

\end_inset

Apparent Credential Delegation
\end_layout

\begin_layout Standard
When an initiator uses impersonation but does not request and perform credential
 delegation, and the acceptor is so configured, the acceptor mechanism SHOULD
 pretend that the initiator delegated a credential to impersonate the same
 principal/authz-id as impersonated to the acceptor if the acceptor has
 credentials for a principal suitable for use as an impersonator.
\end_layout

\begin_layout Standard
When an initiator uses impersonation and does request and successfully perform
 credential delegation, the issuer of the delegated credentials SHOULD constrain
 that credential to carry the same impersonation name attributes as the
 initiator's.
\end_layout

\begin_layout Subsection
Intended Usage
\end_layout

\begin_layout Standard
Impersonator applications are expected to create a NAME object for their
 impersonator principal name, set one, the other, or even both of the impersonat
ion attributes described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Generic-Impersonation-Attributes"

\end_inset

, acquire a credential for this NAME as the desired_name, then use this
 credential handle with GSS_Init_sec_context() (or even GSS_Accept_sec_context()
) to authenticate to other services (or initiators).
\end_layout

\begin_layout Standard
Impersonator applications SHOULD take care to use an impersonator name that
 does not denote any access or privilege beyond impersonation [to peers
 that will trust it so].
\end_layout

\begin_layout Subsection
Local Policy
\end_layout

\begin_layout Standard
Applications that are not aware of impersonation MUST observe a security
 context's peer's name as the impersonator name: impersonation fails safe.
\end_layout

\begin_layout Standard
Applications that are impersonation-aware SHOULD obtain the name of the
 principal to be impersonated and if so, MUST apply local policy to determine
 if the impersonator principal is permitted to impersonate the requested
 principal to the application.
\end_layout

\begin_layout Subsection
Third-Party Impersonation Policy Assistance
\end_layout

\begin_layout Standard
Trusted third parties (e.g., Kerberos KDCs) may reject impersonation using
 policy local to them.
 Trusted third parties may also bless impersonation attempts, but application
 local policy must still be applied (even if that policy is to accept a
 trusted third party's blessing).
\end_layout

\begin_layout Standard
Trusted third party policy is conveyed to application via their use (or
 non-use) of the GSS_C_ATTR_GENERIC_UNCONSTRAINED or GSS_C_ATTR_GENERIC_UNCONSTR
AINED_OK name attribute prefixes together with the 'authenticated' output
 of GSS_Get_name_attributes() 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
I-D.williams-kitten-generic-naming-attributes
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
See 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
I-D.williams-kitten-generic-naming-attributes
\end_layout

\end_inset

 for more information on the semantics of the GSS_C_ATTR_GENERIC_UNCONSTRAINED
 and GSS_C_ATTR_GENERIC_UNCONSTRAINED_OK name attribute prefixes.
\end_layout

\begin_layout Section
Kerberos Bindings of Impersonation Attributes
\end_layout

\begin_layout Standard
For Kerberos 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4120
\end_layout

\end_inset

 we use authorization-data, which may be carried in either Tickets or Authentica
tors, and may or may not be embedded in AD-KDC-ISSUED or similar (when embedded
 in a Ticket).
 KDC policy approval is expressed via embedding these authorization-data
 in AD-KDC-ISSUED or similar (in a Ticket).
 KDC policy application is requested by placing the authorization-data in
 a TGS-REQ's enc-authorization-data.
\end_layout

\begin_layout Standard
KDC support for all these authorization-data elements is OPTIONAL.
\end_layout

\begin_layout Standard
Use of these authorization-data elements entirely in the Authenticator is
 sufficient for most uses.
 Use in Tickets is only required for a) application of more general KDC-side
 policy (otherwise the KDC doesn't see who is being impersonated), b) for
 requesting FORWARDED impersonation Tickets (which, as described 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Generic-Impersonation-Attributes"

\end_inset

, is OPTIONAL.
\end_layout

\begin_layout Standard
The authorization-data element is:
\end_layout

\begin_layout Description
AD-IMPERSONATE-GSS Indicates that the Ticket or Authenticator is intended
 to impersonate the given principal.
 The octet string value of this element is an exported GSS-API name token
\end_layout

\begin_layout Description
AD-ASSERT-AUTHZID Indicates that the Ticket or Authenticator is intended
 to impersonate the given authzid (SASL semantics).
 The octet string value of this element is application-specific, therefore
 clients SHOULD NOT request this element be added to TGTs.
\end_layout

\begin_layout Standard
(Note that no ASN.1 syntax is needed to describe these authorization-data
 elements' values.)
\end_layout

\begin_layout Subsection
Client Processing
\end_layout

\begin_layout Standard
Clients MAY embed AD-IMPERSONATE-GSS and/or AD-ASSERT-AUTHZID in an AD-IF-RELEVA
NT authorization-data element in TGS requests for new Tickets, except when
 requesting forwarded/forwardable Tickets, in which case the element MUST
 be made critical (by not including it in any authorization-data element
 that denotes non-criticality).
\end_layout

\begin_layout Standard
Clients that do not need or do not want KDC blessing SHOULD only include
 these authorization-data elements in Authenticators.
 The client MAY include these elements in AD-IF-RELEVANT (on the theory
 that it's safe for the target service to observe the impersonator's name
 instead of the impersonated name), but the client SHOULD make these authorizati
on-data elements critical to ensure that the target service rejects the
 AP-REQ if it does not understand them.
\end_layout

\begin_layout Subsection
TGS Processing (OPTIONAL)
\end_layout

\begin_layout Standard
TGSes need not have any further support for these authorization-data elements
 than is required by RFC4120.
 However, a TGS may contribute its own local policy by including any AD-IMPERSON
ATE-GSS or AD-ASSERT-AUTHZID elements from a TGS-REQ's enc-authorization-data
 (or from a TGT's authorization-data) in AD-KDC-ISSUED (or similar) elements.
 A TGS MUST NOT include these attributes in AD-KDC-ISSUED (or similar) without
 having applied local policy and determined that the client principal is
 permitted to make the requested assertions to the requested target service
 principal.
\end_layout

\begin_layout Standard
A TGS can only interpret AD-ASSERT-AUTHZID elements relative to the target
 service principal name.
 As there is no authzid concept for TGS principals, the TGS MUST NOT include
 AD-ASSERT-AUTHZID elements in any AD-KDC-ISSUED (or similar) elements when
 the sname of the Ticket to be issued is a TGS name.
 But a TGS may be able to interpret (and therefore apply local policy) authzids
 in other cases.
\end_layout

\begin_layout Standard
TGS policy MUST NOT bless (i.e., include these elements in AD-KDC-ISSUED or
 similar) requests with multiple instances of either AD-IMPERSONATE-GSS
 or AD-ASSERT-AUTHZID.
\end_layout

\begin_layout Standard
As usual, per-RFC4120, if these authorization-data elements appear in the
 enc-authorization-data field of the TGS-REQ and/or the TGT, then the TGS
 should copy them to the issued Ticket.
 But if the TGS has policy approving of the requested impersonation, then
 it SHOULD include the impersonation authorization-data elements in a critical
 AD-KDC-ISSUED (or similar) element.
\end_layout

\begin_layout Subsection
Target Service Processing
\end_layout

\begin_layout Standard
Services must adhere to the authorization-data handling rules specified
 in RFC4120.
 Services that implement these authorization-data element MUST expose them
 to applications in some manner (e.g., as GSS-API naming attributes, as described
 in this document).
\end_layout

\begin_layout Standard
Service implementations MAY apply local policy as to AD-IMPERSONATE-GSS
 on behalf of specific applications and, when local policy approves, may
 report the client's principal name as the impersonated principal name.
 However, it is preferred that applications apply local policy, not the
 Kerberos implementation.
\end_layout

\begin_layout Standard
Services MUST reject AP-REQs with multiple distinct AD-IMPERSONATE-GSS or
 AD-ASSERT-AUTHZID elements.
\end_layout

\begin_layout Section
Sample Code
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 <TBD>
\end_layout

\begin_layout Plain Layout

 /*
\end_layout

\begin_layout Plain Layout

  * Roughly this looks like:
\end_layout

\begin_layout Plain Layout

  *  - if the impseronator application is an acceptor
\end_layout

\begin_layout Plain Layout

  *    it calls gss_accept_sec_context() and gets a
\end_layout

\begin_layout Plain Layout

  *    delegated credential handle even when the initiator
\end_layout

\begin_layout Plain Layout

  *    didn't request delegation;
\end_layout

\begin_layout Plain Layout

  *  - else the impersonator calls
\end_layout

\begin_layout Plain Layout

  *    gss_acquire_cred_impersonate_name()
\end_layout

\begin_layout Plain Layout

  *    to acquire a credential for impersonating a given
\end_layout

\begin_layout Plain Layout

  *    principal;
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * then the application calls gss_init_sec_context() with
\end_layout

\begin_layout Plain Layout

  * the impersonation credential as the initiator credential
\end_layout

\begin_layout Plain Layout

  * handle.
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

  <TBD>
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Impersonator-side code
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 <TBD>
\end_layout

\begin_layout Plain Layout

 /*
\end_layout

\begin_layout Plain Layout

  * An impersonation-aware acceptor application
\end_layout

\begin_layout Plain Layout

  * uses gss_get_name_attribute() to check whether
\end_layout

\begin_layout Plain Layout

  * its peers' NAMEs (values of gss_name_t type output by
\end_layout

\begin_layout Plain Layout

  * gss_accept_sec_context()) have either or both of the
\end_layout

\begin_layout Plain Layout

  * GSS_C_ATTR_IMPERSONATED_PRINCIPAL and/or
\end_layout

\begin_layout Plain Layout

  * GSS_C_ATTR_AUTHZ_ID name attributes -prefixed with
\end_layout

\begin_layout Plain Layout

  * GSS_C_ATTR_GENERIC_UNCONSTRAINED_OK- set, and if so,
\end_layout

\begin_layout Plain Layout

  * then they check local policy.
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * Third-party policy can be checked by checking the
\end_layout

\begin_layout Plain Layout

  * 'authenticated' boolean output of gss_get_name_attribute()
\end_layout

\begin_layout Plain Layout

  * or by not prefixing with either these attributes with either
\end_layout

\begin_layout Plain Layout

  * GSS_C_ATTR_GENERIC_UNCONSTRAINED_OK nor
\end_layout

\begin_layout Plain Layout

  * GSS_C_ATTR_GENERIC_UNCONSTRAINED.
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Acceptor-side code
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout RevisionRemark
Also add sample code using the authz-id attribute.
\end_layout

\begin_layout Section
Security Considerations
\end_layout

\begin_layout Standard
This entire document deals with security.
 Specifically this document provides a method for denoting impersonation
 while failing safe when peers do not support this method.
 Failing safe means: peers observe the impersonator's name, not the impersonated
 name, and impersonator applications fail when their GSS-API implementation
 is not impersonation-aware.
\end_layout

\begin_layout Standard
Local policy is to be used for deciding when impersonators may impersonate
 any one entity to another.
 Such policy must be local to the impersonators' peers.
 Third parties may apply policy as well in some cases, but local policy
 must always be able to reject impersonation.
 Policy MUST be applied by applications.
 Implementations MAY provide a method by which local policy may be indicated
 in an indirect manner (e.g., via 
\begin_inset Quotes eld
\end_inset

environment variables
\begin_inset Quotes erd
\end_inset

) and evaluated by the GSS-API provider on behalf of the application; this
 is strictly to avoid having to modify existing GSS-API applications, but
 should not be encouraged beyond that purpose.
\end_layout

\begin_layout RevisionRemark
Should add text about when and why one might need or use impersonation.
\end_layout

\begin_layout Subsection
Security Requirements and Recommendations
\end_layout

\begin_layout Standard
GSS_Set_name_attribute() is required to fail when used with attributes not
 understood by the mechanism.
 This ensures that impersonators applications that set these attributes
 do not accidentally fail to actually use them when impersonating principals.
 Some additional safe-guards MAY be applied:
\end_layout

\begin_layout Itemize
impersonator applications SHOULD use a credential that denotes no other
 privileges;
\end_layout

\begin_layout Itemize
credential issuers (e.g., Kerberos KDCs) MAY constrain the use of credentials
 for known impersonator principals to requesting credentials for impersonation.
\end_layout

\begin_layout Standard
In particular, for Kerberos, KDCs SHOULD NOT issue Ticket Granting Tickets
 (TGTs) with the FORWARDED or FORWARDABLE flags set if the Ticket's client
 principal is a known impersonator and the AD-IMPERSONATE-GSS authorization-data
 element is not present in the client's Ticket and/or TGS-REQ as a critical
 authorization-data element; if AD-IMPERSONATE-GSS is present in the Ticket
 as a critical and KDC-issued element but not in the TGS-REQ then the KDC
 SHOULD copy the AD-IMPERSONATE-GSS to the Ticket to be issued.
\end_layout

\begin_layout Standard
Kerberos initiators should (as opposed to SHOULD, but perhaps this should
 be a SHOULD) use impersonator names that begin with a zeroth component
 with this value: 
\begin_inset Quotes eld
\end_inset

IMPERSONATE
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Our approach fails safe: service applications that are not aware of impersonatio
n will not think that they are talking to the principal that an impersonator
 wishes to impersonate, and impersonator applications should fail when their
 GSS-API mechanism implementations do not support this feature.
\end_layout

\begin_layout Section
IANA Considerations
\end_layout

\begin_layout RevisionRemark
Request addition of the new GSS name attributes and Kerberos authorization-data
 to the relevant registries.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:References"

\end_inset

Normative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2119"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc1964"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1964.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2743"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2743.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2744"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2744.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4120"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4120.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4121"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4121.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc6680"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6680.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "I-D.williams-kitten-generic-naming-attributes"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.williams-kitten-generic-naming-attributes.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Informative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4422"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4422.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex EmbeddedBibXML
status collapsed

\begin_layout Plain Layout
<reference anchor='S4U'> <front> <title>[MS-SFU]: Kerberos Protocol Extensions:
 Service for User and Constrained Delegation Protocol</title> <author initials='
U.' surname='Unspecified' fullname='Unspecified'> <organization abbrev='MSFT'>
 Microsoft Corporation </organization> </author>
\end_layout

\begin_layout Plain Layout
<date month='August' year='2013' /> </front> <format type='HTML' target='http://
msdn.microsoft.com/en-us/library/cc246071.aspx' /> </reference> 
\end_layout

\end_inset


\end_layout

\begin_layout Section
\start_of_appendix
Acknowledgements
\end_layout

\begin_layout Standard
This document resulted from Viktor Dukhovni's notes on S4U2Proxy's shortcomings
 and discussions between him and the author as to how best to address this.
\end_layout

\end_body
\end_document
